var searchIndex = JSON.parse('{\
"biguint":{"doc":"Running","t":[5,5,5],"n":["assert_biguints_eq","check_digit_lengths","main"],"q":["biguint","",""],"d":["","",""],"i":[0,0,0],"f":[[[["biguint",3],["biguint",3]]],[[["usize",15],["biguint",3]],["bool",15]],[[]]],"p":[]},\
"fixed_point":{"doc":"Running","t":[5],"n":["main"],"q":["fixed_point"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"fork_tree":{"doc":"Utility library for managing tree-like ordered data with …","t":[13,13,13,4,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Changed","Client","Duplicate","Error","FinalizationResult","ForkTree","Revert","Unchanged","UnfinalizedAncestor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","encode_to","eq","eq","eq","finalize","finalize_root","finalize_with_ancestors","finalize_with_descendent_if","finalizes_any_with_descendent_if","find_node_index_where","find_node_where","find_node_where_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","import","into","into","into","iter","map","ne","ne","ne","new","prune","rebalance","roots","to_keyed_vec","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["fork_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The tree has changed, optionally return the value …","Error throw by client when checking for node ancestry.","Adding duplicate node to tree.","Error occurred when iterating with the tree.","Result of finalizing a node (that could be a part of the …","A tree data structure that stores several nodes across …","Imported or finalized node that is an ancestor of …","The tree has not changed.","Finalizing descendent of tree node without finalizing …","","","","","","","","","","","","","","","","","","","","Finalize a node in the tree. This method will make sure …","Finalize a root in the tree and return it, return <code>None</code> in …","Finalize a node in the tree and all its ancestors. The …","Finalize a root in the tree by either finalizing the node …","Checks if any node in the tree is finalized by either …","Same as <code>find_node_where</code>, but returns indexes.","Find a node in the tree that is the deepest ancestor of …","Same as <code>find_node_where</code>, but returns mutable reference.","","","","","","","","","","Import a new node into the tree. The given function …","","","","Iterates the nodes in the tree in pre-order.","Map fork tree into values of new types.","","","","Create a new empty tree.","Prune the tree, removing all non-canonical nodes. We find …","Rebalance the tree, i.e. sort child nodes by max branch …","Iterates over the existing roots in the tree.","","","","","","","","","","","","",""],"i":[1,2,2,0,0,0,2,1,2,2,1,3,2,1,3,2,2,3,2,3,3,3,3,3,3,2,1,3,3,3,3,3,3,3,3,3,2,2,1,3,2,2,2,1,3,3,2,1,3,3,3,2,1,3,3,3,3,3,3,2,3,2,2,1,3,2,1,3,2,1,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",8],["option",4,["error"]]]],[[],["error",4]],[[],["forktree",3]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[]],[[["error",4]],["bool",15]],[[["finalizationresult",4]],["bool",15]],[[["forktree",3]],["bool",15]],[[],[["result",4,["finalizationresult","error"]],["error",4],["finalizationresult",4]]],[[],["option",4]],[[],[["result",4,["finalizationresult","error"]],["error",4],["finalizationresult",4]]],[[],[["result",4,["finalizationresult","error"]],["error",4],["finalizationresult",4]]],[[],[["error",4],["result",4,["option","error"]],["option",4,["bool"]]]],[[],[["option",4,["vec"]],["result",4,["option","error"]],["error",4]]],[[],[["option",4,["node"]],["error",4],["result",4,["option","error"]]]],[[],[["option",4,["node"]],["result",4,["option","error"]],["error",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["error",4]],[[]],[[]],[[],[["bool",15],["error",4],["result",4,["bool","error"]]]],[[]],[[]],[[]],[[]],[[],["forktree",3]],[[["error",4]],["bool",15]],[[["finalizationresult",4]],["bool",15]],[[["forktree",3]],["bool",15]],[[],["forktree",3]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"FinalizationResult"],[4,"Error"],[3,"ForkTree"]]},\
"frame_metadata":{"doc":"Decodable variant of the RuntimeMetadata.","t":[12,12,12,12,13,13,13,6,4,6,13,13,8,3,13,13,3,3,3,3,3,3,13,17,13,3,8,3,13,13,3,13,4,4,6,3,3,3,4,4,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","0","1","Blake2_128","Blake2_128Concat","Blake2_256","ByteGetter","DecodeDifferent","DecodeDifferentArray","Decoded","Default","DefaultByte","DefaultByteGetter","DoubleMap","Encode","ErrorMetadata","EventMetadata","ExtrinsicMetadata","FnEncode","FunctionArgumentMetadata","FunctionMetadata","Identity","META_RESERVED","Map","ModuleConstantMetadata","ModuleErrorMetadata","ModuleMetadata","NMap","Optional","OuterEventMetadata","Plain","RuntimeMetadata","RuntimeMetadataDeprecated","RuntimeMetadataLastVersion","RuntimeMetadataPrefixed","RuntimeMetadataV13","StorageEntryMetadata","StorageEntryModifier","StorageEntryType","StorageHasher","StorageMetadata","Twox128","Twox256","Twox64Concat","V0","V1","V10","V11","V12","V13","V2","V3","V4","V5","V6","V7","V8","V9","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","arguments","arguments","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calls","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constants","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default_byte","documentation","documentation","documentation","documentation","documentation","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","entries","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","errors","event","events","extrinsic","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","metadata","modifier","modules","name","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","prefix","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signed_extensions","storage","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","value","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","hasher","hasher","hashers","key","key1","key2","key2_hasher","keys","unused","value","value","value"],"q":["frame_metadataframe_metadata::StorageEntryType","","","","","","","","","","",""],"d":["","","","","","","","Decode different for static lazy initiated byte value.","A type that decodes to a different type than it encodes. …","","","","A technical trait to store lazy initiated vec value as …","Wrapper over dyn pointer for accessing a cached once byte …","","","All the metadata about a module error.","All the metadata about an event.","Metadata of the extrinsic used by the runtime.","Newtype wrapper for support encoding functions (actual …","All the metadata about a function argument.","All the metadata about a function.","","Current prefix of metadata","","All the metadata about one module constant.","All the metadata about errors in a module.","All metadata about an runtime module.","","","All the metadata about an outer event.","","The metadata of a runtime. The version ID encoded/decoded …","Enum that should fail.","The latest version of the metadata.","Metadata prefixed by a u32 for reserved usage","The metadata of a runtime.","All the metadata about one storage entry.","A storage entry modifier.","A storage entry type.","Hasher used by storage maps","All metadata of the storage.","","","","Unused; enum filler.","Version 1 for runtime metadata. No longer used.","Version 10 for runtime metadata. No longer used.","Version 11 for runtime metadata. No longer used.","Version 12 for runtime metadata. No longer used.","Version 13 for runtime metadata.","Version 2 for runtime metadata. No longer used.","Version 3 for runtime metadata. No longer used.","Version 4 for runtime metadata. No longer used.","Version 5 for runtime metadata. No longer used.","Version 6 for runtime metadata. No longer used.","Version 7 for runtime metadata. No longer used.","Version 8 for runtime metadata. No longer used.","Version 9 for runtime metadata. No longer usedetadata of the extrinsic.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Define the index of the module, this index will be used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata of all the modules.","","","","","","","","","","","","","","","","","","","","","","","The common prefix used by all storage entries.","","","","","","","","","","","","","","","","","","","","","The signed extensions in the order they appear in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extrinsic version.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,3,4,4,4,0,0,0,5,6,0,0,7,5,0,0,0,0,0,0,4,0,7,0,0,0,7,6,0,7,0,0,0,0,0,0,0,0,0,0,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,9,10,1,11,12,13,14,15,2,4,7,6,16,17,9,12,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,17,17,5,9,10,11,12,13,14,15,4,7,6,16,3,18,8,19,20,17,5,9,10,11,12,13,14,15,4,7,6,16,3,18,8,19,20,17,5,9,10,11,12,13,14,15,4,7,6,16,3,18,8,19,20,17,5,9,10,11,12,13,14,15,4,7,6,16,3,18,8,19,20,17,13,21,9,12,13,14,15,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,16,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,17,17,11,20,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,17,22,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,23,13,20,9,10,11,12,13,14,15,17,9,10,11,12,13,14,15,7,16,3,18,8,20,17,16,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,18,17,5,9,10,11,12,13,14,15,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,10,13,14,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,14,18,5,9,10,1,11,12,13,14,15,2,4,7,6,16,3,18,8,19,20,17,24,25,26,24,25,25,25,26,24,24,25,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["decodedifferent",4]],[[],["functionmetadata",3]],[[],["functionargumentmetadata",3]],[[],["fnencode",3]],[[],["outereventmetadata",3]],[[],["eventmetadata",3]],[[],["storageentrymetadata",3]],[[],["moduleconstantmetadata",3]],[[],["errormetadata",3]],[[],["defaultbytegetter",3]],[[],["storagehasher",4]],[[],["storageentrytype",4]],[[],["storageentrymodifier",4]],[[],["storagemetadata",3]],[[],["modulemetadata",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],null,[[],[["vec",3,["u8"]],["u8",15]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[["functionmetadata",3]],["bool",15]],[[["functionargumentmetadata",3]],["bool",15]],[[],["bool",15]],[[["outereventmetadata",3]],["bool",15]],[[["eventmetadata",3]],["bool",15]],[[["storageentrymetadata",3]],["bool",15]],[[["moduleconstantmetadata",3]],["bool",15]],[[["errormetadata",3]],["bool",15]],[[["defaultbytegetter",3]],["bool",15]],[[["storagehasher",4]],["bool",15]],[[["storageentrytype",4]],["bool",15]],[[["storageentrymodifier",4]],["bool",15]],[[["storagemetadata",3]],["bool",15]],[[["runtimemetadataprefixed",3]],["bool",15]],[[["extrinsicmetadata",3]],["bool",15]],[[["runtimemetadata",4]],["bool",15]],[[["runtimemetadatadeprecated",4]],["bool",15]],[[["runtimemetadatav13",3]],["bool",15]],[[["modulemetadata",3]],["bool",15]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["runtimemetadataprefixed",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["opaquemetadata",3]],[[]],[[]],[[]],[[]],[[]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],null,null,null,null,null,null,null,null,null,null,[[["functionmetadata",3]],["bool",15]],[[["functionargumentmetadata",3]],["bool",15]],[[["outereventmetadata",3]],["bool",15]],[[["eventmetadata",3]],["bool",15]],[[["storageentrymetadata",3]],["bool",15]],[[["moduleconstantmetadata",3]],["bool",15]],[[["errormetadata",3]],["bool",15]],[[["storageentrytype",4]],["bool",15]],[[["storagemetadata",3]],["bool",15]],[[["runtimemetadataprefixed",3]],["bool",15]],[[["extrinsicmetadata",3]],["bool",15]],[[["runtimemetadata",4]],["bool",15]],[[["runtimemetadatav13",3]],["bool",15]],[[["modulemetadata",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"FnEncode"],[3,"DefaultByteGetter"],[3,"RuntimeMetadataPrefixed"],[4,"StorageHasher"],[4,"DecodeDifferent"],[4,"StorageEntryModifier"],[4,"StorageEntryType"],[4,"RuntimeMetadata"],[3,"FunctionMetadata"],[3,"FunctionArgumentMetadata"],[3,"OuterEventMetadata"],[3,"EventMetadata"],[3,"StorageEntryMetadata"],[3,"ModuleConstantMetadata"],[3,"ErrorMetadata"],[3,"StorageMetadata"],[3,"ModuleMetadata"],[3,"ExtrinsicMetadata"],[4,"RuntimeMetadataDeprecated"],[3,"RuntimeMetadataV13"],[8,"DefaultByte"],[6,"RuntimeMetadataLastVersion"],[8,"ModuleErrorMetadata"],[13,"Map"],[13,"DoubleMap"],[13,"NMap"]]},\
"frame_support_procedural":{"doc":"Proc macro of Support code for the runtime.","t":[24,24,24,24,24,24,14,14,14,14,23,23,23],"n":["CloneNoBound","DebugNoBound","DefaultNoBound","EqNoBound","PartialEqNoBound","RuntimeDebugNoBound","__generate_dummy_part_checker","construct_runtime","decl_storage","impl_key_prefix_for_tuples","pallet","require_transactional","transactional"],"q":["frame_support_procedural","","","","","","","","","","","",""],"d":["Derive <code>Clone</code> but do not bound any generic. Docs are at …","Derive <code>Debug</code> but do not bound any generics. Docs are at …","derive <code>Default</code> but do no bound any generic. Docs are at …","derive Eq but do no bound any generic. Docs are at …","Derive <code>PartialEq</code> but do not bound any generic. Docs are at…","Derive <code>Debug</code>, if <code>std</code> is enabled it uses …","Internal macro use by frame_support to generate dummy …","Construct a runtime, with the given name and the given …","Declares strongly-typed wrappers around codec-compatible …","This macro is meant to be used by frame-support only. It …","Macro to define a pallet. Docs are at …","","Execute the annotated function in a new storage …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"frame_support_procedural_tools":{"doc":"Proc macro helpers for procedural macros","t":[24,24,5,5,5,5,0,3,3,3,3,3,3,6,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12],"n":["Parse","ToTokens","clean_type_string","generate_crate_access","generate_crate_access_2018","generate_hidden_includes","syn_ext","Braces","Brackets","Meta","NoTrailing","OuterAttributes","Parens","Punctuated","PunctuatedInner","PunctuatedTrailing","StopParse","Trailing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","content","content","content","expr_contains_ident","extract_type_option","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","inner","inner","inner","inner","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_contains_ident","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant"],"q":["frame_support_procedural_tools","","","","","","","frame_support_procedural_tools::syn_ext","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["self defined parsing struct. not meant for any struct, …","self defined parsing struct or enum. not meant for any …","","Generates the access to the <code>frame-support</code> crate.","Generate the crate access for the crate using 2018 syntax.","Generates the hidden includes that are required to make …","Extension to syn types, mainly for parsing","","","Note that syn Meta is almost fine for use case (lacks …","","","","","","","stop parsing here getting remaining token as content Warn …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if a <code>Expr</code> contains the given <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if a <code>Type</code> contains the given <code>Ident</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,5,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,5,8,9,1,2,3,4,5,8,9,2,3,4,5,6,7,8,1,2,3,4,5,8,9,2,3,4,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,5],"f":[null,null,[[["str",15]],["string",3]],[[["str",15]],["tokenstream",3]],[[["str",15]],[["ident",3],["result",4,["ident","error"]],["error",3]]],[[["str",15]],["tokenstream",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["notrailing",3]],[[],["trailing",3]],[[],["meta",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["ident",3],["expr",4]],["bool",15]],[[["type",4]],[["type",4],["option",4,["type"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["type",4],["ident",3]],["bool",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[3,"StopParse"],[3,"Braces"],[3,"Brackets"],[3,"Parens"],[3,"PunctuatedInner"],[3,"NoTrailing"],[3,"Trailing"],[3,"Meta"],[3,"OuterAttributes"]]},\
"frame_support_procedural_tools_derive":{"doc":"Use to derive parsing for parsing struct.","t":[24,24],"n":["Parse","ToTokens"],"q":["frame_support_procedural_tools_derive",""],"d":["self defined parsing struct. not meant for any struct, …","self defined parsing struct or enum. not meant for any …"],"i":[0,0],"f":[null,null],"p":[]},\
"multiply_by_rational":{"doc":"Running","t":[5,5],"n":["main","mul_div"],"q":["multiply_by_rational",""],"d":["",""],"i":[0,0],"f":[[[]],[[["u128",15]],["u128",15]]],"p":[]},\
"normalize":{"doc":"Running","t":[6,5],"n":["Ty","main"],"q":["normalize",""],"d":["",""],"i":[0,0],"f":[null,[[]]],"p":[]},\
"pallet_contracts_proc_macro":{"doc":"Proc macros used in the contracts module.","t":[24,24],"n":["ScheduleDebug","WeightDebug"],"q":["pallet_contracts_proc_macro",""],"d":["This is basically identical to the std libs Debug derive …","This derives <code>Debug</code> for a struct where each field must be …"],"i":[0,0],"f":[null,null],"p":[]},\
"pallet_staking_reward_curve":{"doc":"Proc macro to generate the reward curve functions and …","t":[14],"n":["build"],"q":["pallet_staking_reward_curve"],"d":["Accepts a number of expressions to create a instance of …"],"i":[0],"f":[null],"p":[]},\
"pallet_staking_reward_fn":{"doc":"Useful function for inflation for nominated proof of …","t":[5],"n":["compute_inflation"],"q":["pallet_staking_reward_fn"],"d":["Compute yearly inflation using function"],"i":[0],"f":[[[["perthing",8]],["perthing",8]]],"p":[]},\
"per_thing_rational":{"doc":"Running","t":[5,5],"n":["assert_per_thing_equal_error","main"],"q":["per_thing_rational",""],"d":["",""],"i":[0,0],"f":[[[["u128",15],["perthing",8]]],[[]]],"p":[]},\
"sc_allocator":{"doc":"Collection of allocator implementations.","t":[13,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocatorOutOfSpace","Error","FreeingBumpHeapAllocator","Other","RequestedAllocationTooLarge","allocate","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","deallocate","drop","fmt","fmt","from","from","from_mut","from_mut","from_ref","from_ref","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vzip","vzip"],"q":["sc_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Allocator run out of space.","The error type used by the allocators.","An implementation of freeing bump allocator.","Some other error occurred.","Someone tried to allocate more memory than the allowed …","Gets requested number of bytes to allocate and returns a …","","","","","","","","","Deallocates the space which was allocated for a pointer.","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","Creates a new allocation heap which follows a …","","","","","","","","","","",""],"i":[1,0,0,1,1,2,2,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1],"f":[null,null,null,null,null,[[["wordsize",6]],[["pointer",3,["u8"]],["result",4,["pointer","error"]],["error",4]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["pointer",3,["u8"]],["u8",15]],[["result",4,["error"]],["error",4]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["u32",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[4,"Error"],[3,"FreeingBumpHeapAllocator"]]},\
"sc_chain_spec_derive":{"doc":"Macros to derive chain spec extension traits …","t":[24,24],"n":["ChainSpecExtension","ChainSpecGroup"],"q":["sc_chain_spec_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"sc_executor_common":{"doc":"A set of common definitions that are needed for defining …","t":[0,0,0,0,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,16,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,13,4,13,8,3,13,3,3,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,8,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,12,12],"n":["error","runtime_blob","sandbox","wasm_runtime","Allocator","ApiError","ApplySnapshotFailed","CantDeserializeWasm","CodeNotFound","ErasingFailed","Error","Externalities","FunctionExecution","FunctionRefIsNull","HeapBaseNotFoundOrInvalid","ImportedGlobalsUnsupported","InitializerHasTooManyExpressions","Instantiation","InvalidCode","InvalidData","InvalidHeapPages","InvalidIndex","InvalidInitializerExpression","InvalidMemory","InvalidMemoryReference","InvalidModule","InvalidReturn","MethodNotFound","NoTable","NoTableEntryWithIndex","Other","Other","Result","Runtime","RuntimeConstruction","RuntimeHasStartFn","RuntimePanicked","SharedMemUnsupported","TableElementIsNotAFunction","Trap","VersionInvalid","WasmError","Wasmi","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_ref","from_ref","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vzip","vzip","DataSegmentsSnapshot","ExposedMutableGlobalsSet","Global","GlobalsSnapshot","InstanceGlobals","RuntimeBlob","__clone_box","__clone_box","apply","apply","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect","custom_section_contents","declared_globals_count","entry_point_exists","expose_mutable_globals","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","get_global","get_global_value","imported_globals_count","inject_stack_depth_metering","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_inner","new","serialize","set_global_value","take","take","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","uncompress_if_needed","vzip","vzip","vzip","vzip","EnvironmentDefinitionCorrupted","GuestEnvironment","GuestExternals","Instantiation","InstantiationError","ModuleDecoding","SandboxCapabilities","SandboxInstance","StartTrapped","Store","SupervisorFuncIndex","SupervisorFuncRef","UnregisteredInstance","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode","eq","fmt","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","get_global_val","instance","instance_teardown","instantiate","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","invoke","invoke","invoke_index","memory","memory_teardown","ne","new","new_memory","register","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Export","InvokeMethod","Table","TableWithWrapper","WasmInstance","WasmModule","as_any","as_any_mut","borrow","borrow_mut","call","call_export","from","from","from_mut","from_ref","get_global_const","into","into_any","into_any_arc","into_any_rc","linear_memory_base_ptr","new_instance","try_from","try_into","type_id","unchecked_into","vzip","dispatcher_ref","func"],"q":["sc_executor_common","","","","sc_executor_common::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sc_executor_common::runtime_blob","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sc_executor_common::sandbox","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sc_executor_common::wasm_runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","sc_executor_common::wasm_runtime::InvokeMethod",""],"d":["Rust executor possible errors.","This module allows for inspection and instrumentation, …","This module implements sandboxing support in the runtime.","Definitions for a wasm runtime.","","","Failure to reinitialize runtime instance from snapshot.","Wasm code could not be deserialized.","Code could not be read from the state.","Failure to erase the wasm memory.","Error type.","","","","","","","Instantiation error.","","","The number of heap pages requested is disallowed by the …","","","The module does not export a linear memory named <code>memory</code>.","","Wasm code failed validation.","","","","","","Other error happenend.","Result type alias.","","","","","","","","","Type for errors occurring during Wasm runtime …","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","","","","","","","","","","This is a snapshot of data segments specialzied for a …","A set of exposed mutable globals.","A handle to a global which can be used to get or set a …","A snapshot of a global variables values. This snapshot …","An adapter for a wasm module instance that is focused on …","A bunch of information collected from a WebAssembly …","","","Apply the snapshot to the given instance.","Apply the given snapshot to a linear memory.","","","","","","","","","","","","","","","","","","","","","Collect the set from the given runtime blob. See the …","Scans the wasm blob for the first section with the name …","The number of globals defined in locally in this module.","Perform an instrumentation that makes sure that a …","Perform an instrumentation that makes sure that the …","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a handle to a global by it’s export name.","Get the current value of the global.","The number of imports of globals.","Run a pass that instrument this module so as to introduce …","","","","","","","","","","","","","","","","","Destructure this structure into the underlying …","Create <code>RuntimeBlob</code> from the given wasm code.","Consumes this runtime blob and serializes it.","Update the current value of the global.","Take a snapshot of global variables for a given instance.","Create a snapshot from the data segments from the module.","","","","","","","","","","","","","","","","","","","Create <code>RuntimeBlob</code> from the given wasm code. Will attempt …","","","","","Something wrong with the environment definition. It …","An environment in which the guest module is instantiated.","Implementation of <code>Externals</code> that allows execution of …","Module is a well-formed webassembly binary but could not …","Error occurred during instantiation of a sandboxed module.","Provided module isn’t recognized as a valid webassembly …","This trait encapsulates sandboxing capabilities.","Sandboxed instance of a wasm module.","Module is well-formed, instantiated and linked, but while …","This struct keeps track of all sandboxed components.","Index of a function inside the supervisor.","Represents a function reference into the supervisor …","An unregistered sandboxed instance.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decodes an environment definition from the given raw …","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get the value from a global with the given <code>name</code>.","Returns <code>SandboxInstance</code> by <code>instance_idx</code>.","Tear down the instance at the specified index.","Instantiate a guest module and return it’s index in the …","","","","","","","","","","","","","","","","","","","","","","","","","Invoke a function in the supervisor environment.","Invoke an exported function by a name.","","Returns reference to a memory instance by <code>memory_idx</code>.","Tear down the memory at the specified index.","","Create a new empty sandbox store.","Create a new memory instance and return it’s index.","Finalizes instantiation of this module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Call function exported with this name.","A method to be used to find the entrypoint when calling …","Call a function found in the exported table found under …","Call function by reference from table through a wrapper.","A trait that defines an abstract wasm module instance.","A trait that defines an abstract WASM runtime module.","","","","","Call a method on this WASM instance.","Call an exported method on this WASM instance.","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get the value from a global with the given <code>name</code>.","","","","","<strong>Testing Only</strong>. This function returns the base address of …","Create a new instance.","","","","","","Wrapper for the call.","Extra argument for dispatch."],"i":[0,0,0,0,1,1,2,2,2,2,0,1,1,1,1,1,1,2,1,1,2,1,1,2,1,2,1,1,1,1,1,2,0,1,1,1,1,1,1,1,1,0,1,1,2,1,2,1,2,1,2,1,1,2,2,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,0,0,3,0,0,0,4,5,6,4,7,6,4,5,7,6,4,5,7,6,4,5,7,6,4,5,4,5,4,5,7,5,5,5,5,7,6,4,5,7,6,4,5,7,6,4,5,3,3,5,5,7,6,4,5,7,6,4,5,7,6,4,5,7,6,4,5,5,5,5,3,6,4,4,5,7,6,4,5,7,6,4,5,7,6,4,5,7,6,4,5,5,7,6,4,5,8,0,0,8,0,8,0,0,8,0,0,9,0,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,10,10,13,10,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,12,15,15,0,11,12,8,13,14,15,10,11,12,8,13,14,15,10,8,13,10,11,12,8,13,14,15,10,9,12,11,15,15,10,15,15,14,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,11,12,8,13,14,15,10,16,0,16,16,0,0,16,16,16,16,17,17,16,16,16,16,17,16,16,16,16,17,18,16,16,16,16,16,19,19],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["string",3]],["error",4]],[[["wasmerror",4]]],[[["str",15]],["error",4]],[[]],[[["error",3]]],[[["error",4]]],[[["error",4]]],[[["trap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["error",8],["option",4,["error"]]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[]],[[],["result",4]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datasegmentssnapshot",3]],[[],["runtimeblob",3]],[[]],[[]],[[["runtimeblob",3]]],[[["str",15]],["option",4]],[[],["u32",15]],[[["str",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],["value",4]],[[],["u32",15]],[[["u32",15]],[["result",4,["wasmerror"]],["wasmerror",4]]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["module",3]],[[],[["result",4,["wasmerror"]],["wasmerror",4]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["value",4]]],[[["exposedmutableglobalsset",3]]],[[["runtimeblob",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],[["result",4,["wasmerror"]],["wasmerror",4]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["supervisorfuncindex",3]],[[]],[[["store",3]],[["result",4,["instantiationerror"]],["instantiationerror",4]]],[[["supervisorfuncindex",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["option",4,["value"]],["value",4]]],[[["u32",15]],[["result",6,["rc"]],["rc",3,["sandboxinstance"]]]],[[["u32",15]],["result",6]],[[["u32",15],["guestenvironment",3]],[["instantiationerror",4],["result",4,["unregisteredinstance","instantiationerror"]],["unregisteredinstance",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["supervisorfuncindex",3],["u8",15],["u32",15],["wordsize",6],["pointer",3,["u8"]]],[["i64",15],["result",6,["i64"]]]],[[["str",15],["u32",15]],[["option",4,["runtimevalue"]],["error",4],["result",4,["option","error"]]]],[[["usize",15],["runtimeargs",3]],[["result",4,["option","trap"]],["option",4,["runtimevalue"]],["trap",3]]],[[["u32",15]],[["result",6,["memoryref"]],["memoryref",3]]],[[["u32",15]],["result",6]],[[["supervisorfuncindex",3]],["bool",15]],[[]],[[["u32",15]],[["u32",15],["result",6,["u32"]]]],[[["store",3]],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["invokemethod",4]],[["result",4,["vec","error"]],["vec",3,["u8"]],["error",4]]],[[["str",15]],[["result",4,["vec","error"]],["vec",3,["u8"]],["error",4]]],[[["str",15]],["invokemethod",4]],[[]],[[]],[[]],[[["str",15]],[["result",4,["option","error"]],["option",4,["value"]],["error",4]]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["option",4]],[[],[["error",4],["result",4,["box","error"]],["box",3,["wasminstance"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null],"p":[[4,"Error"],[4,"WasmError"],[8,"InstanceGlobals"],[3,"DataSegmentsSnapshot"],[3,"RuntimeBlob"],[3,"GlobalsSnapshot"],[3,"ExposedMutableGlobalsSet"],[4,"InstantiationError"],[8,"SandboxCapabilities"],[3,"SupervisorFuncIndex"],[3,"GuestExternals"],[3,"SandboxInstance"],[3,"GuestEnvironment"],[3,"UnregisteredInstance"],[3,"Store"],[4,"InvokeMethod"],[8,"WasmInstance"],[8,"WasmModule"],[13,"TableWithWrapper"]]},\
"sc_executor_wasmi":{"doc":"This crate provides an implementation of <code>WasmModule</code> that …","t":[3,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["WasmiInstance","WasmiRuntime","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","call","create_runtime","from","from","from_mut","from_mut","from_ref","from_ref","get_global_const","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new_instance","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vzip","vzip"],"q":["sc_executor_wasmi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wasmi instance wrapper along with the state snapshot.","A runtime along with initial copy of data segments.","","","","","","","","","","Create a new <code>WasmiRuntime</code> given the code. This function …","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,2,0,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2],"f":[null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["invokemethod",4]],[["result",4,["vec","error"]],["vec",3,["u8"]],["error",4]]],[[["u64",15],["runtimeblob",3],["function",8],["bool",15],["vec",3,["function"]]],[["wasmiruntime",3],["wasmerror",4],["result",4,["wasmiruntime","wasmerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["option",4,["value"]],["result",4,["option","error"]],["error",4]]],[[]],[[]],[[["global",3],["box",3,["global"]]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["global",3],["box",3,["global"]]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["result",4,["box","error"]],["box",3,["wasminstance"]],["error",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"WasmiRuntime"],[3,"WasmiInstance"]]},\
"sc_keystore":{"doc":"Keystore (and session key management) for ed25519 based …","t":[4,13,13,13,13,13,13,3,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","InvalidPassword","InvalidPhrase","InvalidSeed","Io","Json","KeyNotSupported","LocalKeystore","Result","Unavailable","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","ecdsa_generate_new","ecdsa_generate_new","ecdsa_public_keys","ecdsa_public_keys","ecdsa_sign_prehashed","ecdsa_sign_prehashed","ed25519_generate_new","ed25519_generate_new","ed25519_public_keys","ed25519_public_keys","fmt","fmt","from","from","from","from","from","from_mut","from_mut","from_ref","from_ref","has_keys","has_keys","in_memory","insert_unknown","insert_unknown","into","into","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","key_pair","keys","keys","open","sign_with","sign_with","source","sr25519_generate_new","sr25519_generate_new","sr25519_public_keys","sr25519_public_keys","sr25519_vrf_sign","sr25519_vrf_sign","supported_keys","supported_keys","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vzip","vzip"],"q":["sc_keystore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Keystore error.","Invalid password.","Invalid BIP39 phrase","Invalid seed","IO error.","JSON error.","Public key type is not supported","A local based keystore that is either memory-based or …","Keystore Result","Keystore unavailable","","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","Create a local keystore in memory.","","","","","","","","","","","","","Get a key pair for the given public key.","","","Create a local keystore from filesystem.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,0,1,2,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,1,2,1,2,1,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1],"f":[null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["option",4,["str"]],["keytypeid",3],["str",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["str",15],["option",4,["str"]]],[["public",3],["traiterror",4],["result",4,["public","traiterror"]]]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["public",3]],[["box",3,["future"]],["pin",3,["box"]]]],[[["keytypeid",3],["public",3]],[["option",4,["signature"]],["traiterror",4],["result",4,["option","traiterror"]]]],[[["option",4,["str"]],["keytypeid",3],["str",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["str",15],["option",4,["str"]]],[["public",3],["traiterror",4],["result",4,["public","traiterror"]]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["vec",3,["public"]],["public",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["keytypeid",3]],["error",4]],[[]],[[["error",3]],["error",4]],[[["error",3]],["error",4]],[[]],[[]],[[]],[[]],[[],[["box",3,["future"]],["pin",3,["box"]]]],[[],["bool",15]],[[]],[[["keytypeid",3],["str",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["str",15]],["result",4]],[[]],[[],["synccryptostoreptr",6]],[[],[["arc",3,["cryptostore"]],["cryptostore",8]]],[[]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["option",4],["result",6,["option"]]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["vec",3,["cryptotypepublicpair"]],["result",4,["vec","traiterror"]],["traiterror",4]]],[[["pathbuf",3],["secretstring",6],["into",8,["pathbuf"]],["option",4,["secretstring"]]],["result",6]],[[["keytypeid",3],["cryptotypepublicpair",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["cryptotypepublicpair",3]],[["result",4,["option","traiterror"]],["traiterror",4],["option",4,["vec"]]]],[[],[["option",4,["error"]],["error",8]]],[[["option",4,["str"]],["keytypeid",3],["str",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["str",15],["option",4,["str"]]],[["public",3],["result",4,["public","traiterror"]],["traiterror",4]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["vec",3,["public"]],["public",3]]],[[["keytypeid",3],["sr25519public",3],["vrftranscriptdata",3]],[["result",4,["option","traiterror"]],["option",4,["vrfsignature"]],["traiterror",4]]],[[["public",3],["keytypeid",3],["vrftranscriptdata",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["vec",3,["cryptotypepublicpair"]],["keytypeid",3],["cryptotypepublicpair",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["vec",3,["cryptotypepublicpair"]],["keytypeid",3],["cryptotypepublicpair",3]],[["vec",3,["cryptotypepublicpair"]],["result",4,["vec","traiterror"]],["traiterror",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[4,"Error"],[3,"LocalKeystore"]]},\
"sc_peerset":{"doc":"Peer Set Manager (PSM). Contains the strategy for …","t":[12,13,13,13,4,3,4,3,3,3,3,13,13,3,3,3,13,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["0","Accept","Connect","Drop","DropReason","IncomingIndex","Message","PeerId","Peerset","PeersetConfig","PeersetHandle","Refused","Reject","ReputationChange","SetConfig","SetId","Unknown","add_reserved_peer","add_to_peers_set","add_to_peers_set","as_ref","bootnodes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","debug_info","dropped","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_config","from_multihash","from_public_key","from_str","get_hash","get_hash","get_hash","hash","hash","hash","in_peers","incoming","into","into","into","into","into","into","into","into","into","into","into_stream","is_public_key","ne","ne","ne","ne","ne","new","new_fatal","num_discovered_peers","out_peers","partial_cmp","partial_cmp","poll_next","random","reason","remove_from_peers_set","remove_reserved_peer","report_peer","report_peer","reserved_nodes","reserved_only","reserved_peers","set_reserved_only","set_reserved_peers","sets","to_base58","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","peer_id","peer_id","set_id","set_id"],"q":["sc_peersetsc_peerset::Message","","",""],"d":["","Equivalent to <code>Connect</code> for the peer corresponding to this …","Request to open a connection to the given peer. From the …","Drop the connection to the given peer, or cancel the …","Reason for calling <code>Peerset::dropped</code>.","Opaque identifier for an incoming connection. Allocated …","Message that can be sent by the peer set manager (PSM).","Identifier of a peer of the network.","Side of the peer set manager owned by the network. In …","Configuration to pass when creating the peer set manager.","Shared handle to the peer set manager (PSM). Distributed …","Substream or connection has been explicitly refused by …","Equivalent to <code>Drop</code> for the peer corresponding to this …","Description of a reputation adjustment for a node.","Configuration for a single set of nodes.","Identifier of a set in the peerset.","Substream or connection has been closed for an unknown …","Adds a new reserved peer. The peerset will make an effort …","Add a peer to a set.","Adds a node to the given set. The peerset will, if …","","List of bootstrap nodes to initialize the set with.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a JSON object containing the state of the …","Indicate that we dropped an active connection with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a <code>PeerId</code> from bytes.","Builds a new peerset from the given configuration.","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","","","","","","Maximum number of ingoing links to peers.","Indicate that we received an incoming connection. Must be …","","","","","","","","","","","","Checks whether the public key passed as parameter matches …","","","","","","New reputation change with given delta and reason.","New reputation change that forces minimum possible …","Returns the number of peers that we have discovered.","Maximum number of outgoing links to peers.","","","","Generates a random peer ID from a cryptographically …","Reason for reputation change.","Remove a peer from a set.","Remove a previously-added reserved peer.","Reports an adjustment to the reputation of the given peer.","Reports an adjustment to the reputation of the given peer.","Lists of nodes we should always be connected to.","If true, we only accept nodes in <code>SetConfig::reserved_nodes</code>…","Returns the list of reserved peers.","Sets whether or not the peerset only has connections with …","Set reserved peers to the new set.","List of sets of nodes the peerset manages.","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reputation delta.","","","","","","","","","","","Peer to connect to.","Peer to disconnect from.","",""],"i":[1,2,2,2,0,0,0,0,0,0,0,3,2,0,0,0,3,4,4,5,6,7,3,8,9,4,2,1,10,7,5,6,3,8,9,4,2,1,10,7,5,6,8,9,4,1,6,8,9,4,1,6,8,6,5,5,8,9,2,1,6,8,9,4,2,1,10,7,5,6,6,3,8,8,8,9,4,2,1,1,10,7,5,6,6,6,5,6,6,6,8,1,6,8,1,6,7,5,3,8,9,4,2,1,10,7,5,6,5,6,8,9,2,1,6,9,9,5,7,8,6,5,6,9,4,4,4,5,7,7,5,4,4,10,6,6,8,9,4,1,6,6,3,8,9,4,2,1,10,7,5,6,6,6,3,8,9,4,2,1,10,7,5,6,3,8,9,4,2,1,10,7,5,6,9,3,8,9,4,2,1,10,7,5,6,11,12,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["setid",3],["peerid",3]]],[[["setid",3],["peerid",3]]],[[["setid",3],["peerid",3]]],[[],["multihash",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["setid",3]],[[],["reputationchange",3]],[[],["peersethandle",3]],[[],["incomingindex",3]],[[],["peerid",3]],[[]],[[]],[[]],[[]],[[]],[[["setid",3]],["ordering",4]],[[["peerid",3]],["ordering",4]],[[],["value",4]],[[["dropreason",4],["setid",3],["peerid",3]]],[[["setid",3]],["bool",15]],[[["reputationchange",3]],["bool",15]],[[["message",4]],["bool",15]],[[["incomingindex",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["incomingindex",3]],[[]],[[]],[[]],[[]],[[["publickey",4]],["peerid",3]],[[],[["peerid",3],["result",4,["peerid","error"]],["error",4]]],[[["peersetconfig",3]]],[[["multihash",3,["uint"]],["uint",3,["uint","b0"]]],[["peerid",3],["result",4,["peerid","multihash"]],["multihash",3,["uint"]]]],[[["publickey",4]],["peerid",3]],[[["str",15]],[["peerid",3],["result",4,["peerid"]]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],null,[[["setid",3],["peerid",3],["incomingindex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["publickey",4]],[["option",4,["bool"]],["bool",15]]],[[["setid",3]],["bool",15]],[[["reputationchange",3]],["bool",15]],[[["message",4]],["bool",15]],[[["incomingindex",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[["i32",15],["str",15]],["reputationchange",3]],[[["str",15]],["reputationchange",3]],[[],["usize",15]],null,[[["setid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["peerid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["context",3],["pin",3]],[["poll",4,["option"]],["option",4]]],[[],["peerid",3]],null,[[["setid",3],["peerid",3]]],[[["setid",3],["peerid",3]]],[[["peerid",3],["reputationchange",3]]],[[["peerid",3],["reputationchange",3]]],null,null,[[["setid",3]]],[[["setid",3],["bool",15]]],[[["hashset",3,["peerid"]],["setid",3],["peerid",3]]],null,[[],["string",3]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["multihash",3,["uint"]],["uint",3,["uint","b0"]]],[["peerid",3],["result",4,["peerid"]]]],[[["global",3],["u8",15],["vec",3,["u8","global"]]],[["peerid",3],["result",4,["peerid"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null],"p":[[3,"IncomingIndex"],[4,"Message"],[4,"DropReason"],[3,"PeersetHandle"],[3,"Peerset"],[3,"PeerId"],[3,"SetConfig"],[3,"SetId"],[3,"ReputationChange"],[3,"PeersetConfig"],[13,"Connect"],[13,"Drop"]]},\
"sc_proposer_metrics":{"doc":"Prometheus basic proposer metrics.","t":[3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["Metrics","MetricsLink","block_constructed","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","from","from","into","into","new","number_of_transactions","register","report","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["sc_proposer_metrics","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Authorship metrics.","Optional shareable link to basic authorship metrics.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,1,2,2,1,2,1,2,1,2,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],["metricslink",3]],[[],["metrics",3]],[[]],[[]],[[],["metricslink",3]],[[]],[[]],[[]],[[]],[[["registry",3],["option",4,["registry"]]]],null,[[["registry",3]],[["result",4,["prometheuserror"]],["prometheuserror",4]]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Metrics"],[3,"MetricsLink"]]},\
"sc_telemetry":{"doc":"Substrate’s client telemetry is a part of substrate …","t":[17,17,17,17,3,4,3,13,6,17,17,3,13,3,3,3,3,13,3,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["CONSENSUS_DEBUG","CONSENSUS_INFO","CONSENSUS_TRACE","CONSENSUS_WARN","ConnectionMessage","Error","ExtTransport","IoError","Result","SUBSTRATE_DEBUG","SUBSTRATE_INFO","Telemetry","TelemetryAlreadyInitialized","TelemetryConnectionNotifier","TelemetryEndpoints","TelemetryHandle","TelemetryWorker","TelemetryWorkerDropped","TelemetryWorkerHandle","VerbosityLevel","address_translation","authority","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","deserialize","dial","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","genesis_hash","get_hash","handle","handle","hash","implementation","into","into","into","into","into","into","into","into","into","is_empty","listen_on","name","ne","network_id","new","new","new","new_telemetry","on_connect_stream","run","send_telemetry","serialize","serialize","source","start_telemetry","startup_time","telemetry","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_transport"],"q":["sc_telemetry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Consensus DEBUG log level.","Consensus INFO log level.","Consensus TRACE log level.","Consensus WARN log level.","Message sent when the connection (re-)establishes.","","Implementation of <code>Transport</code> whose implementation is …","","","Substrate DEBUG log level.","Substrate INFO log level.","A telemetry instance that can be used to send telemetry …","","Used to create a stream of events with only one event: …","List of telemetry servers we want to talk to. Contains …","Handle to a <code>Telemetry</code>.","Telemetry worker.","","Handle to the <code>TelemetryWorker</code> thats allows initializing …","Telemetry message verbosity.","","Node is an authority.","","","","","","","","","","","","","","","","","","","Node’s chain.","","","","","","","","","","","Node’s configuration.","","","","","","","","","","","","","","","","","","","","","","","","Node’s genesis hash.","","Get a new <code>TelemetryWorkerHandle</code>.","Make a new cloneable handle to this <code>Telemetry</code>. This is …","","Node’s implementation.","","","","","","","","","","Return <code>true</code> if there are no telemetry endpoints, <code>false</code> …","","Node’s name.","","Node’s network ID.","Create a <code>TelemetryEndpoints</code> based on a list of …","Instantiate a new <code>TelemetryWorker</code> which can run in …","Creates a new <code>ExtTransport</code> that uses the given external …","Instantiate a new <code>Telemetry</code> object.","Get event stream for telemetry connection established …","Run the telemetry worker.","Send telemetry messages.","","","","Initialize the telemetry with the endpoints provided in …","Node’s startup time.","Report a telemetry.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Node’s version.","","","","","","","","","","Instantiate a new <code>TelemetryWorker</code> with the given …"],"i":[0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,2,3,4,1,3,5,6,7,8,9,2,4,1,3,5,6,7,8,9,2,3,4,6,8,9,2,4,6,8,9,2,3,4,2,4,4,1,1,3,5,6,7,8,9,2,4,1,1,3,5,6,7,8,9,2,3,4,5,7,4,3,4,1,3,5,6,7,8,9,2,4,2,3,4,3,4,5,2,6,8,5,8,4,3,1,7,3,0,4,6,8,9,2,1,4,1,3,5,6,7,8,9,2,4,1,3,5,6,7,8,9,2,4,1,3,5,6,7,8,9,2,3,4,1,3,5,6,7,8,9,2,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["multiaddr",3]],[["option",4,["multiaddr"]],["multiaddr",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["telemetryendpoints",3]],[[],["telemetryworkerhandle",3]],[[],["telemetryhandle",3]],[[],["telemetryconnectionnotifier",3]],[[],["exttransport",3]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[["multiaddr",3]],[["result",4,["transporterror"]],["transporterror",4]]],[[["telemetryendpoints",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u64",15]],[[],["telemetryworkerhandle",3]],[[],["telemetryhandle",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["multiaddr",3]],[["transporterror",4],["result",4,["transporterror"]]]],null,[[["telemetryendpoints",3]],["bool",15]],null,[[["vec",3]],[["result",4,["error"]],["error",4]]],[[["usize",15]],["result",6]],[[["transport",3]],["exttransport",3]],[[["telemetryendpoints",3]],["telemetry",3]],[[],["receiver",3]],[[]],[[["map",3,["string","value"]],["string",3],["verbositylevel",6],["value",4]]],[[],["result",4]],[[],["result",4]],[[],[["error",8],["option",4,["error"]]]],[[["connectionmessage",3]],["result",6]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["exttransport",3],["option",4,["exttransport"]]],["result",6]]],"p":[[4,"Error"],[3,"ExtTransport"],[3,"ConnectionMessage"],[3,"TelemetryEndpoints"],[3,"TelemetryWorker"],[3,"TelemetryWorkerHandle"],[3,"Telemetry"],[3,"TelemetryHandle"],[3,"TelemetryConnectionNotifier"]]},\
"sc_tracing_proc_macro":{"doc":"","t":[23],"n":["prefix_logs_with"],"q":["sc_tracing_proc_macro"],"d":["Add a log prefix to the function."],"i":[0],"f":[null],"p":[]},\
"sp_api_proc_macro":{"doc":"Macros for declaring and implementing runtime apis.","t":[14,14,14],"n":["decl_runtime_apis","impl_runtime_apis","mock_impl_runtime_apis"],"q":["sp_api_proc_macro","",""],"d":["","",""],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"sp_application_crypto":{"doc":"Traits and macros for constructing application specific …","t":[12,12,8,8,8,8,8,18,18,18,18,3,16,16,16,18,18,18,18,3,8,16,16,16,8,8,16,16,16,16,11,11,10,10,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,10,10,0,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,14,14,12,12,3,3,3,13,13,17,4,13,3,3,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,13,13,17,4,13,3,3,3,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,12,12,3,3,3,17,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["0","0","AppKey","AppPair","AppPublic","AppSignature","BoundToRuntimeAppPublic","CRYPTO_ID","CRYPTO_ID","CRYPTO_ID","CRYPTO_ID","CryptoTypeId","Generic","Generic","Generic","ID","ID","ID","ID","KeyTypeId","MaybeHash","Pair","Public","Public","RuntimeAppPublic","RuntimePublic","Signature","Signature","Signature","UntypedGeneric","__clone_box","__clone_box","all","all","app_crypto","app_crypto_pair","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","deserialize","deserialize","ecdsa","ed25519","encode","encode","encode_to","encode_to","eq","eq","fmt","fmt","from","from","from","from_ffi_value","from_inner","from_mut","from_mut","from_ref","from_ref","generate_pair","generate_pair","get_hash","get_hash","hash","hash","inner","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_ffi_value","into_inner","key_types","ne","ne","partial_cmp","partial_cmp","serialize","serialize","sign","sign","sr25519","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_raw_vec","to_raw_vec","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","using_encoded","using_encoded","verify","verify","vzip","vzip","with_pair","wrap","0","0","AppPair","AppPublic","AppSignature","BadBase58","BadLength","CRYPTO_ID","DeriveError","InvalidChecksum","Pair","Public","PublicError","Signature","SoftKeyInPath","UnknownVersion","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","deref","derive","derive","derive","deserialize","deserialize","deserialize","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ffi_value","from_ffi_value","from_full","from_inner","from_inner","from_legacy_string","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_phrase","from_phrase","from_raw","from_raw","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed","from_seed_slice","from_seed_slice","from_slice","from_slice","from_slice","from_string","from_string","from_string_with_version","from_string_with_version","generate_pair","generate_pair","generate_with_phrase","generate_with_phrase","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","inner","inner","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","into_inner","max_encoded_len","max_encoded_len","ne","ne","partial_cmp","partial_cmp","public","public","recover","recover_prehashed","seed","serialize","serialize","serialize","sign","sign","sign","sign","sign_prehashed","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_public_crypto_pair","to_raw_vec","to_raw_vec","to_raw_vec","to_raw_vec","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_from","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","using_encoded","using_encoded","verify","verify","verify","verify","verify_prehashed","verify_weak","verify_weak","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","AppPair","AppPublic","AppSignature","BadBase58","BadLength","CRYPTO_ID","DeriveError","InvalidChecksum","LocalizedSignature","Pair","Public","PublicError","Signature","SoftKeyInPath","UnknownVersion","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_array_ref","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","deref","deref","derive","derive","derive","deserialize","deserialize","deserialize","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ffi_value","from_ffi_value","from_h256","from_h512","from_inner","from_inner","from_legacy_string","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_phrase","from_phrase","from_raw","from_raw","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed","from_seed_slice","from_seed_slice","from_slice","from_slice","from_slice","from_str","from_string","from_string","from_string_with_version","from_string_with_version","generate_pair","generate_pair","generate_with_phrase","generate_with_phrase","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","inner","inner","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","into_inner","max_encoded_len","max_encoded_len","ne","ne","ne","ne","partial_cmp","partial_cmp","public","public","seed","serialize","serialize","serialize","sign","sign","sign","sign","signature","signer","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_public_crypto_pair","to_raw_vec","to_raw_vec","to_raw_vec","to_raw_vec","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_from","unchecked_from","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","using_encoded","using_encoded","verify","verify","verify","verify","verify_weak","verify_weak","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ACCOUNT","AURA","AUTHORITY_DISCOVERY","BABE","DUMMY","GRANDPA","IM_ONLINE","REPORTING","STAKING","0","0","AppPair","AppPublic","AppSignature","CRYPTO_ID","LocalizedSignature","Pair","Public","Signature","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_array_ref","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","deref","deref","derive","derive","derive","derive","deserialize","deserialize","deserialize","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_entropy","from_ffi_value","from_ffi_value","from_h256","from_h512","from_inner","from_inner","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_phrase","from_phrase","from_raw","from_raw","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed","from_seed_slice","from_seed_slice","from_slice","from_slice","from_slice","from_str","from_string","from_string","from_string_with_version","from_string_with_version","generate_pair","generate_pair","generate_with_phrase","generate_with_phrase","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","inner","inner","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","into_inner","max_encoded_len","max_encoded_len","ne","ne","ne","ne","partial_cmp","partial_cmp","public","public","serialize","serialize","serialize","sign","sign","sign","sign","signature","signer","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_public_crypto_pair","to_raw_vec","to_raw_vec","to_raw_vec","to_raw_vec","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_from","unchecked_from","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","using_encoded","using_encoded","verify","verify","verify","verify","verify_batch","verify_deprecated","verify_weak","verify_weak","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["sp_application_crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_application_crypto::ecdsasp_application_crypto::edsp_application_crypto::key_types","","","","","","","","","sp_application_crypto::srd":["","","An application-specific key.","A application’s key pair.","A application’s public key.","A application’s signature.","Something that bound to a fixed <code>RuntimeAppPublic</code>.","The identifier of the crypto type of this …","The identifier of the crypto type of this …","The identifier of the crypto type of this …","The identifier of the crypto type of this …","An identifier for a specific cryptographic algorithm used …","The wrapped type which is just a plain instance of <code>Public</code>.","The wrapped type which is just a plain instance of <code>Pair</code>.","The wrapped type which is just a plain instance of …","An identifier for this application-specific key type.","An identifier for this application-specific key type.","An identifier for this application-specific key type.","An identifier for this application-specific key type.","An identifier for a type of cryptographic key.","Type which implements Hash in std, not when no-std (std …","The corresponding key pair type in this application …","The corresponding public key type in this application …","The <code>RuntimeAppPublic</code> this type is bound to.","A runtime interface for an application’s public key.","A runtime interface for a public key.","The corresponding signature type in this application …","The signature that will be generated when signing with …","The signature that will be generated when signing with …","The corresponding type as a generic crypto type.","","","Returns all public keys for the given key type in the …","Returns all public keys for this application in the …","Declares Public, Pair, Signature types which are …","Declares Pair type which is functionally equivalent to …","","","","","","","","","","","","","","","","","","","","","","","","","","","Ecdsa crypto types.","Ed25519 crypto types.","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Generate a public/private pair for the given key type …","Generate a public/private pair with an optional <code>seed</code> and …","","","","","","","","","","","","","","","","Known key types; this also functions as a global registry …","","","","","","","Sign the given message with the corresponding private key …","Sign the given message with the corresponding private key …","Sr25519 crypto types.","","","","","Returns <code>Self</code> as raw vec.","Returns <code>Self</code> as raw vec.","","","","","","","","","","","","Verify that the given signature matches the given message …","Verify that the given signature matches the given message …","","","Generate the given code if the pair type is available.","Implement bidirectional <code>From</code> and on-way <code>AsRef</code>/<code>AsMut</code> for …","","","A generic <code>AppPublic</code> wrapper type over $pair crypto; this …","A generic <code>AppPublic</code> wrapper type over $public crypto; …","A generic <code>AppPublic</code> wrapper type over $public crypto; …","Bad alphabet.","Bad length.","An identifier used to match public keys against ecdsa keys","An error when deriving a key.","Invalid checksum.","A key pair.","The ECDSA compressed public key.","An error type for SS58 decoding.","A signature (a 512-bit value, plus 8 bits for recovery …","A soft key was found in the path (and is unsupported).","Unknown version.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new instance from the given full public key.","","","Exactly as <code>from_string</code> except that if no matches are …","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","","Generate key pair from given recovery phrase and password.","A new instance from the given 33-byte <code>data</code>.","A new instance from the given 65-byte <code>data</code>.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","Make a new key pair from secret seed material.","","Make a new key pair from secret seed material. The slice …","","A new instance from the given slice that should be 33 …","A new instance from the given slice that should be 65 …","","","","","","","","Generate new secure (random) key pair and provide the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the public key.","Recover the public key from this signature and a message.","Recover the public key from this signature and a …","Get the seed for this key.","","","","","","","Sign a message.","Sign a pre-hashed message","","","","","","","","","","","","","","","","","Return a vec filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature on a message. Returns true if the …","Verify a signature on a pre-hashed message. Return <code>true</code> …","","Verify a signature on a message. Returns true if the …","","","","","","","","","","","A generic <code>AppPublic</code> wrapper type over $pair crypto; this …","A generic <code>AppPublic</code> wrapper type over $public crypto; …","A generic <code>AppPublic</code> wrapper type over $public crypto; …","Bad alphabet.","Bad length.","An identifier used to match public keys against ed25519 …","An error when deriving a key.","Invalid checksum.","A localized signature also contains sender information.","A key pair.","A public key.","An error type for SS58 decoding.","A signature (a 512-bit value).","A soft key was found in the path (and is unsupported).","Unknown version.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a slice filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A new instance from an H256.","A new instance from an H512.","","","Exactly as <code>from_string</code> except that if no matches are …","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","","Generate key pair from given recovery phrase and password.","A new instance from the given 32-byte <code>data</code>.","A new instance from the given 64-byte <code>data</code>.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","Make a new key pair from secret seed material.","","Make a new key pair from secret seed material. The slice …","","A new instance from the given slice that should be 32 …","A new instance from the given slice that should be 64 …","","","","","","","","","Generate new secure (random) key pair and provide the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the public key.","Get the seed for this key.","","","","","","Sign a message.","","The signature itself.","The signer of the signature.","","","","","","","","","","","","","","","","","","Return a vec filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature on a message. Returns true if the …","","","Verify a signature on a message. Returns true if the …","","","","","","","","","","Key type for controlling an account in a Substrate …","Key type for Aura module, built-in. Identified as <code>aura</code>.","Key type for AuthorityDiscovery module, built-in. …","Key type for Babe module, built-in. Identified as <code>babe</code>.","A key type ID useful for tests.","Key type for Grandpa module, built-in. Identified as <code>gran</code>.","Key type for ImOnline module, built-in. Identified as <code>imon</code>…","Key type for equivocation reporting, built-in. Identified …","Key type for staking, built-in. Identified as <code>stak</code>.","","","A generic <code>AppPublic</code> wrapper type over $pair crypto; this …","A generic <code>AppPublic</code> wrapper type over $public crypto; …","A generic <code>AppPublic</code> wrapper type over $public crypto; …","An identifier used to match public keys against sr25519 …","A localized signature also contains sender information. …","An Schnorrkel/Ristretto x25519 (“sr25519”) key pair.","An Schnorrkel/Ristretto x25519 (“sr25519”) public key.","An Schnorrkel/Ristretto x25519 (“sr25519”) signature.","","","","","","","","","","","","","","","","","","","","","","","","Return a slice filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a new key pair from binary data derived from a valid …","","","A new instance from an H256.","A new instance from an H512.","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","","","A new instance from the given 32-byte <code>data</code>.","A new instance from the given 64-byte <code>data</code>.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","Make a new key pair from raw secret seed material.","","Make a new key pair from secret seed material. The slice …","","A new instance from the given slice that should be 32 …","A new instance from the given slice that should be 64 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the public key.","","","","","","","","The signature itself.","The signer of the signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Batch verification.","Verify a signature on a message. Returns <code>true</code> if the …","","","","","","","","",""],"i":[1,2,0,0,0,0,0,3,3,4,4,0,5,6,7,3,3,4,4,0,0,3,3,8,0,0,3,9,4,3,1,2,9,4,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,1,2,1,2,1,2,1,2,1,1,2,1,1,1,2,1,2,9,4,1,2,1,2,1,1,2,1,2,1,2,1,2,1,1,0,1,2,1,2,1,2,9,4,0,1,2,1,2,9,4,1,1,2,1,2,1,2,1,2,1,2,9,4,1,2,0,0,10,11,0,0,0,12,12,0,0,12,0,0,0,0,13,12,14,15,16,10,12,11,17,14,10,14,15,16,13,10,12,11,17,14,15,16,13,10,12,11,17,14,15,10,11,14,14,15,16,10,11,14,10,11,14,10,11,14,14,15,15,16,10,11,11,14,15,10,11,14,15,16,13,10,12,11,17,14,15,16,13,10,12,11,17,14,15,16,10,12,11,17,14,15,16,10,12,11,17,14,10,14,15,10,11,14,15,10,11,14,15,10,11,14,15,10,11,14,15,10,11,15,14,16,17,14,10,11,14,15,10,11,14,15,10,11,14,15,10,11,14,15,10,11,14,15,10,12,11,14,14,15,10,10,12,11,14,14,15,15,16,16,13,10,10,10,12,11,11,11,17,17,10,11,10,10,11,17,14,15,16,13,10,12,11,17,16,17,10,11,14,15,16,13,10,12,11,17,16,17,16,17,14,10,11,14,10,14,10,14,10,16,17,14,15,10,11,14,15,10,11,10,11,14,15,16,13,10,12,11,17,14,15,16,13,10,12,11,17,14,15,16,13,10,12,11,17,14,15,16,13,10,12,11,17,10,11,10,11,14,10,14,15,14,10,16,17,11,11,17,14,10,11,14,16,10,17,17,14,15,10,11,14,15,16,10,12,11,17,14,10,14,16,10,17,14,10,14,14,15,15,16,13,10,10,12,11,11,17,14,15,16,13,10,12,11,17,14,15,16,13,10,12,11,17,14,10,14,15,16,13,10,12,11,17,14,15,10,11,14,16,10,17,17,16,17,14,15,16,13,10,12,11,17,18,19,0,0,0,20,20,0,0,20,0,0,0,0,0,21,20,22,23,24,25,18,19,26,20,22,18,22,23,24,25,21,18,19,26,20,22,23,24,25,21,18,19,26,20,18,22,23,18,19,22,22,23,24,18,19,22,18,19,22,18,19,22,22,23,23,24,18,18,19,19,22,23,18,19,22,23,24,25,21,18,19,26,20,22,23,24,25,21,18,19,26,20,22,23,24,25,18,19,26,20,22,23,24,25,18,19,26,20,22,18,22,23,18,19,26,22,23,18,19,26,22,23,18,19,26,22,23,18,19,26,22,23,18,19,23,18,22,24,25,22,18,19,22,23,18,19,22,23,18,19,22,23,18,19,22,23,18,19,26,22,23,18,19,26,20,22,22,23,18,18,19,26,20,20,22,22,23,23,24,24,25,25,21,18,18,18,19,19,26,20,18,19,18,19,18,19,25,22,23,24,25,21,18,19,26,20,24,25,18,19,22,23,24,25,21,18,19,26,20,24,25,24,25,22,18,19,18,22,18,22,18,22,18,24,25,22,23,18,19,22,23,18,19,18,19,22,23,24,25,21,18,19,26,20,22,23,24,25,21,18,19,26,20,22,23,24,25,21,18,19,26,20,22,23,24,25,21,18,19,26,20,18,19,18,19,22,18,22,23,18,26,22,18,24,25,25,22,18,19,22,24,25,18,26,26,22,23,18,19,26,22,23,24,25,18,19,26,20,22,18,22,24,25,18,22,18,20,22,22,23,23,24,25,21,18,18,19,19,26,20,22,23,24,25,21,18,19,26,20,22,23,24,25,21,18,19,26,20,22,18,18,22,23,24,25,21,18,19,26,20,22,23,18,19,22,24,25,18,24,25,22,23,24,25,21,18,19,26,20,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,29,30,31,32,27,28,33,29,27,29,30,31,32,27,28,33,29,30,31,32,27,28,33,27,29,30,27,28,29,29,30,31,27,28,29,27,28,29,27,28,29,29,30,30,31,32,27,27,28,28,29,30,27,28,29,30,31,32,27,28,33,29,30,31,32,27,28,33,29,30,31,32,27,28,33,29,30,31,32,27,28,33,29,27,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,30,27,29,31,32,27,29,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,33,29,29,30,27,27,28,33,29,29,30,30,31,31,32,32,32,32,32,27,27,28,28,28,33,32,27,28,27,28,27,28,29,30,31,32,27,28,33,31,32,27,28,29,30,31,32,27,28,33,31,32,31,32,29,27,28,27,29,27,29,27,29,27,31,32,29,30,27,28,29,30,27,28,27,28,29,30,31,32,27,28,33,29,30,31,32,27,28,33,29,30,31,32,27,28,33,29,30,31,32,27,28,33,27,28,27,28,29,27,29,30,27,33,29,27,31,32,29,27,28,29,31,32,27,33,33,29,30,27,28,29,30,31,32,27,28,33,29,27,29,31,32,27,29,27,29,29,30,30,31,32,27,27,28,28,33,29,30,31,32,27,28,33,29,30,31,32,27,28,33,29,27,27,29,30,31,32,27,28,33,29,30,27,28,29,31,32,27,0,32,31,32,29,30,31,32,27,28,33],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["keytypeid",3]],["vec",3]],[[],["vec",3]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["keytypeid",3]],[[],["cryptotypeid",3]],[[]],[[]],[[["keytypeid",3]],["ordering",4]],[[["cryptotypeid",3]],["ordering",4]],[[],[["keytypeid",3],["error",3],["result",4,["keytypeid","error"]]]],[[],[["result",4,["cryptotypeid","error"]],["cryptotypeid",3],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["keytypeid",3]],[[],["cryptotypeid",3]],[[],[["keytypeid",3],["result",4,["keytypeid"]]]],[[],[["cryptotypeid",3],["result",4,["cryptotypeid"]]]],null,null,[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[["keytypeid",3]],["bool",15]],[[["cryptotypeid",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["u32",15]],["keytypeid",3]],[[]],[[]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[],["keytypeid",3]],[[]],[[]],[[]],[[]],[[["vec",3,["u8"]],["keytypeid",3],["option",4,["vec"]]]],[[["vec",3,["u8"]],["option",4,["vec"]]]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],null,[[["keytypeid",3]],["bool",15]],[[["cryptotypeid",3]],["bool",15]],[[["keytypeid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cryptotypeid",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[["keytypeid",3]],["option",4]],[[],["option",4]],null,[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["str",15]],[["result",4,["keytypeid"]],["keytypeid",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["vec",3]],[[["keytypeid",3]],["vec",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["public",3]],[[]],[[],["signature",3]],[[],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[],["public",3]],[[],["signature",3]],[[]],[[],["pair",3]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[],["signature",3]],[[],["pair",3]],[[],["public",3]],[[],["publicerror",4]],[[],["signature",3]],[[],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["ordering",4]],[[["public",3]],["ordering",4]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["public",3],["result",4,["public","error"]]]],[[],[["signature",3],["error",3],["result",4,["signature","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["public",3]],[[],["signature",3]],[[],["public",3]],[[],["signature",3]],[[]],[[["iterator",8]],["option",4]],[[["iterator",8],["option",4]],["result",4]],[[["option",4]],[["deriveerror",4],["result",4,["deriveerror"]]]],[[],["result",4]],[[],[["result",4,["public"]],["public",3]]],[[],[["signature",3],["result",4,["signature"]]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["public",3]],["bool",15]],[[["publicerror",4]],["bool",15]],[[["signature",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["public",3]]],[[]],[[["signature",3]]],[[]],[[["pair",3]]],[[]],[[]],[[["pair",3]],["public",3]],[[]],[[["public",3]]],[[]],[[]],[[],["signature",3]],[[["signature",3]]],[[]],[[["pair",3]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[],[["result",4,["public"]],["public",3]]],[[],["public",3]],[[],["signature",3]],[[["option",4,["str"]],["str",15]],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[["option",4,["str"]],["str",15]],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[],["public",3]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pair",3]],[[],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[],[["result",4,["pair","secretstringerror"]],["secretstringerror",4],["pair",3]]],[[]],[[],["public",3]],[[],["signature",3]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["option",4,["vec"]],["vec",3,["u8"]]]],[[["vec",3,["u8"]],["keytypeid",3],["option",4,["vec"]]]],[[["str",15],["option",4,["str"]]]],[[["option",4,["str"]],["str",15]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["public",3]],[[],[["public",3],["option",4,["public"]]]],[[],[["public",3],["option",4,["public"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[]],[[["keytypeid",3]],["option",4]],[[],["signature",3]],[[],["signature",3]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],["cryptotypepublicpair",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3,["u8"]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["public",3],["result",4,["public"]]]],[[],["result",4]],[[],[["signature",3],["result",4,["signature"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["public",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[],["bool",15]],[[["asref",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["signature",3],["public",3]],["bool",15]],[[["asref",8]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["vec",3]],[[["keytypeid",3]],["vec",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[]],[[],["signature",3]],[[],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[],["public",3]],[[]],[[],["signature",3]],[[],["pair",3]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[],["signature",3]],[[],["pair",3]],[[],["pair",3]],[[],["public",3]],[[],["signature",3]],[[],["localizedsignature",3]],[[],["publicerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["ordering",4]],[[["public",3]],["ordering",4]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["public",3],["result",4,["public","error"]]]],[[],[["error",3],["signature",3],["result",4,["signature","error"]]]],[[],[["error",3],["localizedsignature",3],["result",4,["localizedsignature","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["public",3]],[[],["signature",3]],[[],["public",3]],[[],["signature",3]],[[]],[[]],[[["iterator",8]],["option",4]],[[["iterator",8],["option",4]],["result",4]],[[["option",4]],[["result",4,["deriveerror"]],["deriveerror",4]]],[[],["result",4]],[[],[["result",4,["public"]],["public",3]]],[[],[["signature",3],["result",4,["signature"]]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["publicerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["public",3]]],[[]],[[]],[[["signature",3]]],[[]],[[["pair",3]]],[[["pair",3]]],[[]],[[]],[[["pair",3]],["public",3]],[[["public",3]]],[[]],[[["signature",3]]],[[]],[[]],[[]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["h256",3]],["public",3]],[[["h512",3]],["signature",3]],[[],["public",3]],[[],["signature",3]],[[["option",4,["str"]],["str",15]],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[["option",4,["str"]],["str",15]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[],["public",3]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pair",3]],[[],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[],[["secretstringerror",4],["result",4,["pair","secretstringerror"]],["pair",3]]],[[]],[[],["public",3]],[[],["signature",3]],[[["str",15]],[["result",4,["public"]],["public",3]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["option",4,["vec"]],["vec",3,["u8"]]]],[[["vec",3,["u8"]],["keytypeid",3],["option",4,["vec"]]]],[[["str",15],["option",4,["str"]]]],[[["option",4,["str"]],["str",15]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["public",3]],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["public",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[]],[[],["signature",3]],[[["keytypeid",3]],["option",4]],null,null,[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],["cryptotypepublicpair",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3,["u8"]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["public"]],["public",3]]],[[],["result",4]],[[],[["signature",3],["result",4,["signature"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["h256",3]],["public",3]],[[],["public",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[],["bool",15]],[[["asref",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["asref",8]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["vec",3]],[[["keytypeid",3]],["vec",3]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[],["signature",3]],[[],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[],["public",3]],[[]],[[],["signature",3]],[[],["pair",3]],[[],["keypair",3]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[],["signature",3]],[[],["pair",3]],[[],["pair",3]],[[],["public",3]],[[],["signature",3]],[[],["localizedsignature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["ordering",4]],[[["public",3]],["ordering",4]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["public",3],["error",3],["result",4,["public","error"]]]],[[],[["result",4,["signature","error"]],["signature",3],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["public",3]],[[],["signature",3]],[[],["public",3]],[[],["signature",3]],[[]],[[]],[[["iterator",8]],["option",4]],[[["iterator",8],["option",4]],["result",4]],[[["option",4]],["result",4]],[[],[["public",3],["option",4,["public"]]]],[[],["result",4]],[[],[["public",3],["result",4,["public"]]]],[[],[["result",4,["signature"]],["signature",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["public",3]]],[[]],[[]],[[["signature",3]]],[[["pair",3]]],[[]],[[["keypair",3]],["pair",3]],[[]],[[["minisecretkey",3]],["pair",3]],[[["secretkey",3]],["pair",3]],[[["pair",3]]],[[]],[[["public",3]]],[[["signature",3]]],[[]],[[["signature",3]],["signature",3]],[[]],[[["option",4,["str"]],["str",15]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["h256",3]],["public",3]],[[["h512",3]],["signature",3]],[[],["public",3]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[["option",4,["str"]],["str",15]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[],["public",3]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pair",3]],[[],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[],[["result",4,["pair","secretstringerror"]],["pair",3],["secretstringerror",4]]],[[]],[[],["public",3]],[[],["signature",3]],[[["str",15]],[["public",3],["result",4,["public"]]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["option",4,["vec"]],["vec",3,["u8"]]]],[[["vec",3,["u8"]],["keytypeid",3],["option",4,["vec"]]]],[[["str",15],["option",4,["str"]]]],[[["option",4,["str"]],["str",15]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["public",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["public",3]],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["public",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[]],[[],["signature",3]],[[["keytypeid",3]],["option",4]],null,null,[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],["cryptotypepublicpair",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3,["u8"]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["public"]],["public",3]]],[[],["result",4]],[[],[["result",4,["signature"]],["signature",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["public",3]],[[["h256",3]],["public",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[],["bool",15]],[[["asref",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3,["signature","global"]],["public",3],["signature",3],["vec",3,["global"]],["vec",3,["public","global"]],["global",3]],["bool",15]],[[["public",3],["signature",3]],["bool",15]],[[["asref",8]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"KeyTypeId"],[3,"CryptoTypeId"],[8,"AppKey"],[8,"RuntimeAppPublic"],[8,"AppPublic"],[8,"AppPair"],[8,"AppSignature"],[8,"BoundToRuntimeAppPublic"],[8,"RuntimePublic"],[3,"Public"],[3,"Signature"],[4,"PublicError"],[4,"DeriveError"],[3,"AppPublic"],[3,"AppSignature"],[3,"AppPair"],[3,"Pair"],[3,"Public"],[3,"Signature"],[4,"PublicError"],[4,"DeriveError"],[3,"AppPublic"],[3,"AppSignature"],[3,"AppPair"],[3,"Pair"],[3,"LocalizedSignature"],[3,"Public"],[3,"Signature"],[3,"AppPublic"],[3,"AppSignature"],[3,"AppPair"],[3,"Pair"],[3,"LocalizedSignature"]]},\
"sp_arithmetic":{"doc":"Minimal fixed point arithmetic primitives and types for …","tn":["Normalizable","ThresholdOrd","assert_eq_error_rate","biguint","fixed_point","helpers_128bit","normalize","normalize","per_things","rational","tcmp","traits","BigUint","Double","Single","add","add","add_single","borrow","borrow_mut","checked_get","clone","clone_into","cmp","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","div","div_unit","encode","encode_to","eq","fmt","from","from","from","from","from","from","from_limbs","get","into","is_zero","len","lpad","lsb","lstrip","msb","mul","mul","mul_single","one","partial_cmp","set","split","sub","sub","to_keyed_vec","to_owned","try_from","try_into","type_id","unique_saturated_into","using_encoded","with_capacity","zero","DIV","FixedI128","FixedI64","FixedPointNumber","FixedPointOperand","FixedU128","Inner","SIGNED","accuracy","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ceil","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div_int","checked_from_integer","checked_from_rational","checked_mul","checked_mul","checked_mul","checked_mul_int","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_from","decode_from","decode_from","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","deserialize","deserialize","deserialize","div","div","div","encode","encode","encode","encode_as","encode_as","encode_as","encode_to","encode_to","encode_to","eq","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_float","from_float","from_float","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_inner","from_str","from_str","from_str","into","into","into","into_inner","into_inner","into_inner","into_inner","is_negative","is_one","is_positive","is_zero","is_zero","is_zero","max_value","max_value","max_value","min_value","min_value","min_value","mul","mul","mul","ne","ne","ne","neg","neg","neg","one","one","one","partial_cmp","partial_cmp","partial_cmp","reciprocal","round","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_div_int","saturating_from_integer","saturating_from_rational","saturating_mul","saturating_mul","saturating_mul","saturating_mul_acc_int","saturating_mul_int","saturating_pow","saturating_pow","saturating_pow","saturating_sub","saturating_sub","saturating_sub","serialize","serialize","serialize","sub","sub","sub","tcmp","tcmp","tcmp","to_float","to_float","to_float","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_string","to_string","to_string","trunc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_saturated_from","unique_saturated_from","unique_saturated_from","unique_saturated_into","unique_saturated_into","unique_saturated_into","using_encoded","using_encoded","using_encoded","zero","zero","zero","gcd","multiply_by_rational","split","to_big_uint","ACCURACY","Inner","InnerOf","PerThing","PerU16","Perbill","Percent","Permill","Perquintill","Upper","UpperOf","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_from","decode_from","decode_from","decode_from","decode_from","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","deconstruct","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","encode","encode","encode","encode","encode","encode_as","encode_as","encode_as","encode_as","encode_as","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_float","from_float","from_float","from_float","from_float","from_float","from_float","from_float","from_float","from_float","from_float","from_fraction","from_parts","from_parts","from_parts","from_parts","from_parts","from_parts","from_parts","from_parts","from_parts","from_parts","from_parts","from_percent","from_percent","from_percent","from_percent","from_percent","from_percent","from_perthousand","from_perthousand","from_perthousand","from_perthousand","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational","from_rational_approximation","from_rational_approximation","from_rational_approximation","from_rational_approximation","from_rational_approximation","from_rational_approximation","into","into","into","into","into","is_one","is_one","is_one","is_one","is_one","is_one","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","left_from_one","max_value","max_value","max_value","max_value","max_value","min_value","min_value","min_value","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_ceil","mul_ceil","mul_ceil","mul_ceil","mul_ceil","mul_ceil","mul_floor","mul_floor","mul_floor","mul_floor","mul_floor","mul_floor","ne","ne","ne","ne","ne","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_reciprocal_mul","saturating_reciprocal_mul","saturating_reciprocal_mul","saturating_reciprocal_mul","saturating_reciprocal_mul","saturating_reciprocal_mul","saturating_reciprocal_mul_ceil","saturating_reciprocal_mul_ceil","saturating_reciprocal_mul_ceil","saturating_reciprocal_mul_ceil","saturating_reciprocal_mul_ceil","saturating_reciprocal_mul_ceil","saturating_reciprocal_mul_floor","saturating_reciprocal_mul_floor","saturating_reciprocal_mul_floor","saturating_reciprocal_mul_floor","saturating_reciprocal_mul_floor","saturating_reciprocal_mul_floor","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","serialize","serialize","serialize","serialize","serialize","square","square","square","square","square","square","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unique_saturated_from","unique_saturated_from","unique_saturated_from","unique_saturated_from","unique_saturated_from","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","zero","zero","zero","zero","zero","zero","Rational128","RationalInfinite","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_sub","clone","clone","clone_into","clone_into","cmp","cmp","d","d","default","default","eq","eq","fmt","from","from","from","from","from","from","from_unchecked","into","into","is_zero","lazy_saturating_add","lazy_saturating_sub","lcm","max_value","min_value","n","n","one","one","partial_cmp","partial_cmp","to_den","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unique_saturated_from","unique_saturated_into","unique_saturated_into","zero","zero","AtLeast32Bit","AtLeast32BitUnsigned","BaseArithmetic","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","IntegerSquareRoot","One","SaturatedConversion","Saturating","Signed","UniqueSaturatedFrom","UniqueSaturatedInto","Unsigned","Zero","abs","abs_sub","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_shl","checked_shr","checked_sub","integer_sqrt","integer_sqrt_checked","is_negative","is_one","is_positive","is_zero","max_value","min_value","one","saturated_from","saturated_into","saturating_accrue","saturating_add","saturating_dec","saturating_inc","saturating_mul","saturating_pow","saturating_reduce","saturating_sub","set_one","set_zero","signum","unique_saturated_from","unique_saturated_into","zero"],"q":["sp_arithmetic","","","","","","","","","","","","sp_arithmetic::biguint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_arithmetic::fixed_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_arithmetic::helpers_128bit","","","","sp_arithmetic::per_thingssp_arithmetic::rational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_arithmetic::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A collection-like object that is made of values of type <code>T</code> …","Trait for comparing two numbers with an threshold.","Copied from <code>sp-runtime</code> and documented there.","Infinite precision unsigned integer for substrate runtime.","Decimal Fixed Point implementations for Substrate runtime.","Some helper functions to work with 128bit numbers. Note …","Normalize <code>input</code> so that the sum of all elements reaches …","Normalize self around <code>targeted_sum</code>.","","","Compare if <code>self</code> is <code>threshold</code> greater or less than <code>other</code>.","Primitive traits for the runtime arithmetic.","Simple wrapper around an infinitely large integer, …","Representation of two limbs.","Representation of a single limb.","Adds <code>self</code> with <code>other</code>. self and other do not have to have …","","Assumed as a given primitive.","","","A naive getter for limb at <code>index</code>. Note that the order is …","","","","","","","","","Divides an <code>n + m</code> limb self by a <code>n</code> limb <code>other</code>. The result …","Divides <code>self</code> by a single limb <code>other</code>. This can be used in …","","","","","","","","","","","Raw constructor from custom limbs. If <code>limbs</code> is empty, …","A naive getter for limb at <code>index</code>. Note that the order is …","","","Number of limbs.","Zero-pad <code>self</code> from left to reach <code>size</code> limbs. Will not …","returns the least significant limb of the number.","Strips zeros from the left side (the most significant …","returns the most significant limb of the number.","Multiplies n-limb number <code>self</code> with m-limb number <code>other</code>.","","Assumed as a given primitive.","","","A naive setter for limb at <code>index</code>. Note that the order is …","Splits a <code>Double</code> limb number into a tuple of two <code>Single</code> …","","Subtracts <code>other</code> from <code>self</code>. self and other do not have to …","","","","","","","","Create a new instance with <code>size</code> limbs. This prevents any …","","Precision of this fixed point implementation. It should …","A fixed point number representation in the range.","A fixed point number representation in the range.","Something that implements a decimal fixed point number.","Integer types that can be used to interact with …","A fixed point number representation in the range.","The underlying data type used for this fixed point number.","Indicates if this fixed point implementation is signed or …","Precision of this fixed point implementation.","","","","","","","","","","Returns the smallest integer greater than or equal to a …","","","","","","","Checked division for integer type <code>N</code>. Equal to <code>self / d</code>.","Creates <code>self</code> from an integer number <code>int</code>.","Creates <code>self</code> from a rational number. Equal to <code>n / d</code>.","","","","Checked multiplication for integer type <code>N</code>. Equal to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the largest integer less than or equal to a …","","","","","","","Returns the fractional part.","","","","","","","","","","","","","","","","","","","Builds this type from an integer number.","const version of <code>FixedPointNumber::from_inner</code>.","","const version of <code>FixedPointNumber::from_inner</code>.","","","const version of <code>FixedPointNumber::from_inner</code>.","","","","","","","Consumes <code>self</code> and returns the inner raw value.","","","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Checks if the number is one.","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","","","","","","","","","","","","","","","","","","","","","","","","","Takes the reciprocal (inverse). Equal to <code>1 / self</code>.","Returns the number rounded to the nearest integer. Rounds …","Saturating absolute value.","","","","Saturating division for integer type <code>N</code>. Equal to <code>self / d</code>.","Creates self from an integer number <code>int</code>.","Creates <code>self</code> from a rational number. Equal to <code>n / d</code>.","","","","Saturating multiplication for integer type <code>N</code>, adding the …","Saturating multiplication for integer type <code>N</code>. Equal to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the integer part.","","","","","","","","","","","","","","","","","","","","","","Helper gcd function used in Rational128 implementation.","Safely and accurately compute <code>a * b / c</code>. The approach is:","split a u128 into two u64 limbs","Convert a u128 to a u32 based biguint.","The accuracy of this type.","The data type used to build this per-thingy.","Get the inner type of a <code>PerThing</code>.","Something that implements a fixed point ration with an …","A fixed point representation of a number in the range [0, …","A fixed point representation of a number in the range [0, …","A fixed point representation of a number in the range [0, …","A fixed point representation of a number in the range [0, …","A fixed point representation of a number in the range [0, …","A data type larger than <code>Self::Inner</code>, used to avoid …","Get the upper type of a <code>PerThing</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume self and return the number of parts per thing.","Consume self and return the number of parts per thing.","See <code>PerThing::deconstruct</code>.","See <code>PerThing::deconstruct</code>.","Consume self and return the number of parts per thing.","See <code>PerThing::deconstruct</code>.","Consume self and return the number of parts per thing.","See <code>PerThing::deconstruct</code>.","Consume self and return the number of parts per thing.","Consume self and return the number of parts per thing.","See <code>PerThing::deconstruct</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a fraction into <code>Self</code>.","NOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>","See <code>PerThing::from_float</code>.","NOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>","See <code>PerThing::from_float</code>.","NOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>","See <code>PerThing::from_float</code>.","NOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>","See <code>PerThing::from_float</code>.","See <code>PerThing::from_float</code>.","NOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>","Same as <code>Self::from_float</code>.","Build this type from a number of parts per thing.","From an explicitly defined number of parts per maximum of …","Build this type from a number of parts per thing.","From an explicitly defined number of parts per maximum of …","Build this type from a number of parts per thing.","From an explicitly defined number of parts per maximum of …","Build this type from a number of parts per thing.","Build this type from a number of parts per thing.","From an explicitly defined number of parts per maximum of …","From an explicitly defined number of parts per maximum of …","Build this type from a number of parts per thing.","Build this type from a percent. Equivalent to …","Converts a percent into <code>Self</code>. Equal to <code>x / 100</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 100</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 100</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 100</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 100</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.","Converts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.","Approximate the fraction <code>p/q</code> into a per-thing fraction. …","See <code>PerThing::from_rational</code>.","","","See <code>PerThing::from_rational</code>.","See <code>PerThing::from_rational</code>.","","","See <code>PerThing::from_rational</code>.","","See <code>PerThing::from_rational</code>.","Same as <code>Self::from_rational</code>.","See <code>PerThing::from_rational</code>.","See <code>PerThing::from_rational</code>.","See <code>PerThing::from_rational</code>.","See <code>PerThing::from_rational</code>.","See <code>PerThing::from_rational</code>.","","","","","","Return <code>true</code> if this is one.","See <code>PerThing::is_one</code>.","See <code>PerThing::is_one</code>.","See <code>PerThing::is_one</code>.","See <code>PerThing::is_one</code>.","See <code>PerThing::is_one</code>.","Return <code>true</code> if this is nothing.","See <code>PerThing::is_zero</code>.","See <code>PerThing::is_zero</code>.","See <code>PerThing::is_zero</code>.","See <code>PerThing::is_zero</code>.","See <code>PerThing::is_zero</code>.","Return the part left when <code>self</code> is saturating-subtracted …","","","","","","","","","","","","","","","","","","","","","Multiplication that always rounds the result up to a …","See <code>PerThing::mul_ceil</code>.","See <code>PerThing::mul_ceil</code>.","See <code>PerThing::mul_ceil</code>.","See <code>PerThing::mul_ceil</code>.","See <code>PerThing::mul_ceil</code>.","Multiplication that always rounds down to a whole number. …","See <code>PerThing::mul_floor</code>.","See <code>PerThing::mul_floor</code>.","See <code>PerThing::mul_floor</code>.","See <code>PerThing::mul_floor</code>.","See <code>PerThing::mul_floor</code>.","","","","","","Equivalent to <code>Self::from_parts(Self::ACCURACY)</code>.","See <code>PerThing::one</code>","See <code>PerThing::one</code>","See <code>PerThing::one</code>","See <code>PerThing::one</code>","See <code>PerThing::one</code>","","","","","","","","","","","Saturating addition. Compute <code>self + rhs</code>, saturating at …","Saturating addition. Compute <code>self + rhs</code>, saturating at …","Saturating addition. Compute <code>self + rhs</code>, saturating at …","Saturating addition. Compute <code>self + rhs</code>, saturating at …","Saturating addition. Compute <code>self + rhs</code>, saturating at …","Saturating multiply. Compute <code>self * rhs</code>, saturating at …","Saturating multiply. Compute <code>self * rhs</code>, saturating at …","Saturating multiply. Compute <code>self * rhs</code>, saturating at …","Saturating multiply. Compute <code>self * rhs</code>, saturating at …","Saturating multiply. Compute <code>self * rhs</code>, saturating at …","Saturating exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating multiplication by the reciprocal of <code>self</code>.\\tThe …","See <code>PerThing::saturating_reciprocal_mul</code>.","See <code>PerThing::saturating_reciprocal_mul</code>.","See <code>PerThing::saturating_reciprocal_mul</code>.","See <code>PerThing::saturating_reciprocal_mul</code>.","See <code>PerThing::saturating_reciprocal_mul</code>.","Saturating multiplication by the reciprocal of <code>self</code>.\\tThe …","See <code>PerThing::saturating_reciprocal_mul_ceil</code>.","See <code>PerThing::saturating_reciprocal_mul_ceil</code>.","See <code>PerThing::saturating_reciprocal_mul_ceil</code>.","See <code>PerThing::saturating_reciprocal_mul_ceil</code>.","See <code>PerThing::saturating_reciprocal_mul_ceil</code>.","Saturating multiplication by the reciprocal of <code>self</code>.\\tThe …","See <code>PerThing::saturating_reciprocal_mul_floor</code>.","See <code>PerThing::saturating_reciprocal_mul_floor</code>.","See <code>PerThing::saturating_reciprocal_mul_floor</code>.","See <code>PerThing::saturating_reciprocal_mul_floor</code>.","See <code>PerThing::saturating_reciprocal_mul_floor</code>.","Saturating subtraction. Compute <code>self - rhs</code>, saturating at …","Saturating subtraction. Compute <code>self - rhs</code>, saturating at …","Saturating subtraction. Compute <code>self - rhs</code>, saturating at …","Saturating subtraction. Compute <code>self - rhs</code>, saturating at …","Saturating subtraction. Compute <code>self - rhs</code>, saturating at …","","","","","","Return the product of multiplication of this value by …","See <code>PerThing::square</code>.","See <code>PerThing::square</code>.","See <code>PerThing::square</code>.","See <code>PerThing::square</code>.","See <code>PerThing::square</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to <code>Self::from_parts(0)</code>.","See <code>PerThing::zero</code>.","See <code>PerThing::zero</code>.","See <code>PerThing::zero</code>.","See <code>PerThing::zero</code>.","See <code>PerThing::zero</code>.","A wrapper for any rational number with a 128 bit …","A wrapper for any rational number with infinitely large …","","","","","Addition. Simply tries to unify the denominators and add …","Subtraction. Simply tries to unify the denominators and …","","","","","","","Return the denominator reference.","Return the denominator.","","","","","","","Build from a raw <code>n/d</code>.","","Build from a raw <code>n/d</code>.","","","Build from a raw <code>n/d</code>. This could lead to / 0 if not …","","","If it is zero or not","A saturating add that assumes <code>self</code> and <code>other</code> have the …","A saturating subtraction that assumes <code>self</code> and <code>other</code> have …","Get the least common divisor of <code>self</code> and <code>other</code>.","","","Return the numerator reference.","Return the numerator.","One.","One","","","Convert <code>self</code> to a similar rational number where …","","","","","","","","","","","","Zero.","Zero.","A meta trait for arithmetic.","A meta trait for arithmetic.  Same as <code>AtLeast32Bit</code>, but …","A meta trait for arithmetic type operations, regardless …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","A trait implementing integer square root.","Defines a multiplicative identity element for <code>Self</code>.","Convenience type to work around the highly unergonomic …","Saturating arithmetic operations, returning maximum or …","Useful functions for signed numbers (i.e. numbers that …","Just like <code>From</code> except that if the source value is too big …","Just like <code>Into</code> except that if the source value is too big …","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","The positive difference of two numbers.","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Find the integer square root.","Find the integer square root, returning <code>None</code> if the …","Returns true if the number is negative and false if the …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Convert from a value of <code>T</code> into an equivalent instance of …","Consume self to return an equivalent value of <code>T</code>.","Increment self by some <code>amount</code>, saturating.","Saturating addition. Compute <code>self + rhs</code>, saturating at …","Decrement self by one, saturating at zero.","Increment self by one, saturating.","Saturating multiply. Compute <code>self * rhs</code>, saturating at …","Saturating exponentiation. Compute <code>self.pow(exp)</code>, …","Decrement self by some <code>amount</code>, saturating at zero.","Saturating subtraction. Compute <code>self - rhs</code>, saturating at …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the sign of the number.","Convert from a value of <code>T</code> into an equivalent instance of …","Consume self to return an equivalent value of <code>T</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>."],"i":[0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,4,4,4,5,6,7,5,6,7,5,6,7,4,5,6,7,5,6,7,4,4,4,5,6,7,4,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,4,5,5,6,6,7,7,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,5,6,7,4,5,5,6,6,7,7,5,6,7,5,6,7,4,5,6,7,4,4,4,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,4,4,4,5,6,7,4,4,4,5,6,7,4,4,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,4,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,0,0,0,0,8,8,0,0,0,0,0,0,0,8,0,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,8,9,9,10,10,11,11,12,12,13,13,9,10,11,12,13,9,10,11,12,13,9,9,10,10,11,11,12,12,13,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,9,10,10,11,11,12,12,13,13,8,9,9,10,10,11,11,12,12,13,13,8,8,9,9,10,10,11,11,12,12,13,13,8,9,10,11,12,13,10,11,12,13,8,9,9,10,10,11,11,12,12,13,13,8,9,10,11,12,13,9,10,11,12,13,8,9,10,11,12,13,8,9,10,11,12,13,8,9,10,11,12,13,9,10,11,12,13,9,9,10,10,11,11,12,12,13,13,8,9,10,11,12,13,8,9,10,11,12,13,9,10,11,12,13,8,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,8,9,10,11,12,13,8,9,10,11,12,13,8,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,8,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,9,10,11,12,13,8,9,10,11,12,13,0,0,14,15,14,15,15,15,14,15,14,15,14,15,14,15,14,15,14,15,15,14,14,14,15,15,15,15,14,15,15,15,15,15,15,15,14,15,14,15,14,15,15,14,15,14,15,14,15,14,15,15,14,15,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,17,18,19,20,0,21,22,23,24,25,25,16,26,16,27,28,28,26,29,29,30,30,30,30,30,30,30,30,26,27,16,31,32,27],"f":[null,null,null,null,null,null,[[],[["result",4,["vec","str"]],["vec",3],["str",15]]],[[],[["result",4,["vec","str"]],["vec",3],["str",15]]],null,null,[[],["ordering",4]],null,null,null,null,[[]],[[]],[[["single",6]]],[[]],[[]],[[["usize",15]],[["option",4,["single"]],["single",6]]],[[],["biguint",3]],[[]],[[],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["biguint",3]],[[["bool",15]],["option",4]],[[["single",6]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["u16",15]]],[[["u32",15]]],[[]],[[["double",6]]],[[["u128",15]]],[[["u8",15]]],[[]],[[["usize",15]],["single",6]],[[]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[],["single",6]],[[]],[[],["single",6]],[[]],[[]],[[["single",6]],["double",6]],[[]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15],["single",6]]],[[["double",6]]],[[]],[[],["result",4]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["fnonce",8]]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["fixedpointoperand",8]],[["fixedpointoperand",8],["option",4]]],[[],["option",4]],[[["fixedpointoperand",8]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["fixedpointoperand",8]],[["fixedpointoperand",8],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["fixedi64",3]],[[],["fixedi128",3]],[[],["fixedu128",3]],[[]],[[]],[[]],[[["fixedi64",3]],["ordering",4]],[[["fixedi128",3]],["ordering",4]],[[["fixedu128",3]],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["i64",15]],[["error",3],["fixedi64",3],["result",4,["fixedi64","error"]]]],[[["i128",15]],[["error",3],["result",4,["fixedi128","error"]],["fixedi128",3]]],[[["u128",15]],[["result",4,["fixedu128","error"]],["error",3],["fixedu128",3]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["fixedi64",3]],[[],["fixedi128",3]],[[],["fixedu128",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["i64",15]],[[],["i128",15]],[[],["u128",15]],[[]],[[]],[[]],[[["fixedi64",3]],["bool",15]],[[["fixedi128",3]],["bool",15]],[[["fixedu128",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["fixedi64",3],["compact",3,["fixedi64"]]],["fixedi64",3]],[[["i64",15]]],[[]],[[]],[[["i128",15]]],[[]],[[]],[[["compact",3,["fixedi128"]],["fixedi128",3]],["fixedi128",3]],[[]],[[]],[[["compact",3,["fixedu128"]],["fixedu128",3]],["fixedu128",3]],[[["u128",15]]],[[]],[[]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[]],[[["i64",15]]],[[]],[[["i128",15]]],[[]],[[]],[[["u128",15]]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fixedi64",3]],["bool",15]],[[["fixedi128",3]],["bool",15]],[[["fixedu128",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fixedi64",3]],[["option",4,["ordering"]],["ordering",4]]],[[["fixedi128",3]],[["option",4,["ordering"]],["ordering",4]]],[[["fixedu128",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[["fixedpointoperand",8]],["fixedpointoperand",8]],[[["fixedpointoperand",8]]],[[["fixedpointoperand",8]]],[[]],[[]],[[]],[[["fixedpointoperand",8]],["fixedpointoperand",8]],[[["fixedpointoperand",8]],["fixedpointoperand",8]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[]],[[["u128",15]],["u128",15]],[[["u128",15]],[["str",15],["result",4,["u128","str"]],["u128",15]]],[[["u128",15]]],[[["u128",15]],["biguint",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["percent",3]],[[],["peru16",3]],[[],["permill",3]],[[],["perbill",3]],[[],["perquintill",3]],[[]],[[]],[[]],[[]],[[]],[[["percent",3]],["ordering",4]],[[["peru16",3]],["ordering",4]],[[["permill",3]],["ordering",4]],[[["perbill",3]],["ordering",4]],[[["perquintill",3]],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["u8",15]],[[],["u16",15]],[[]],[[],["u32",15]],[[]],[[],["u32",15]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["percent",3]],["bool",15]],[[["peru16",3]],["bool",15]],[[["permill",3]],["bool",15]],[[["perbill",3]],["bool",15]],[[["perquintill",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["compact",3,["percent"]],["percent",3]],["percent",3]],[[]],[[]],[[["compact",3,["peru16"]],["peru16",3]],["peru16",3]],[[["permill",3],["compact",3,["permill"]]],["permill",3]],[[]],[[]],[[["compact",3,["perbill"]],["perbill",3]],["perbill",3]],[[]],[[["compact",3,["perquintill"]],["perquintill",3]],["perquintill",3]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[]],[[["u8",15]]],[[]],[[["u16",15]]],[[]],[[["u32",15]]],[[]],[[]],[[["u32",15]]],[[["u64",15]]],[[]],[[]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["percent",3]],["bool",15]],[[["peru16",3]],["bool",15]],[[["permill",3]],["bool",15]],[[["perbill",3]],["bool",15]],[[["perquintill",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["percent",3]],[["option",4,["ordering"]],["ordering",4]]],[[["peru16",3]],[["option",4,["ordering"]],["ordering",4]]],[[["permill",3]],[["option",4,["ordering"]],["ordering",4]]],[[["perbill",3]],[["option",4,["ordering"]],["ordering",4]]],[[["perquintill",3]],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],[[],["rationalinfinite",3]],[[],["rational128",3]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[],["biguint",3]],[[],["u128",15]],[[],["rationalinfinite",3]],[[],["rational128",3]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["biguint",3]]],[[["rational128",3]]],[[["u128",15]]],[[]],[[]],[[["u128",15]]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],[["str",15],["result",4,["u128","str"]],["u128",15]]],[[]],[[]],[[],["biguint",3]],[[],["u128",15]],[[]],[[]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["u128",15]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"Normalizable"],[8,"ThresholdOrd"],[3,"BigUint"],[8,"FixedPointNumber"],[3,"FixedI64"],[3,"FixedI128"],[3,"FixedU128"],[8,"PerThing"],[3,"Percent"],[3,"PerU16"],[3,"Permill"],[3,"Perbill"],[3,"Perquintill"],[3,"RationalInfinite"],[3,"Rational128"],[8,"Signed"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"IntegerSquareRoot"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"SaturatedConversion"],[8,"Saturating"],[8,"UniqueSaturatedFrom"],[8,"UniqueSaturatedInto"]]},\
"sp_core":{"doc":"Shareable Substrate types.","tn":["0","0","0","0","0","0","0","Blake2Hasher","BlockConstruction","Bytes","ChangesTrieConfiguration","ChangesTrieConfigurationRange","Debug","Debug","Encoded","Error","Error","ExecutionContext","H160","H256","H512","Hasher","Importing","Info","Info","KeccakHasher","LENGTH","LogLevel","LogLevelFilter","MAX","MAX","MAX_POSSIBLE_ALLOCATION","Native","NativeOrEncoded","NeverNativeValue","Off","OffchainCall","OpaqueMetadata","OpaquePeerId","Out","RuntimeDebug","StdHasher","Syncing","TYPE_ID","Trace","Trace","TypeId","U256","U512","Void","Warn","Warn","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add_assign","add_assign","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_bytes","as_bytes","as_bytes","as_bytes_mut","as_bytes_mut","as_bytes_mut","as_encoded","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes_mut","as_fixed_bytes_mut","as_fixed_bytes_mut","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_u128","as_u128","as_u32","as_u32","as_u64","as_u64","as_usize","as_usize","assign_from_slice","assign_from_slice","assign_from_slice","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","byte","capabilities","checked_add","checked_add","checked_div","checked_div","checked_mul","checked_mul","checked_neg","checked_neg","checked_pow","checked_pow","checked_rem","checked_rem","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","config","constant_size","constant_size","constant_size","constant_size","constant_size","covers","covers","covers","crypto","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","deref","deref","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","digest_interval","digest_level_at_block","digest_levels","div","div","div_assign","div_assign","div_mod","div_mod","ecdsa","ed25519","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp10","exp10","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_big_endian","from_big_endian","from_dec_str","from_dec_str","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_inner","from_inner","from_inner","from_inner","from_little_endian","from_little_endian","from_low_u64_be","from_low_u64_be","from_low_u64_be","from_low_u64_le","from_low_u64_le","from_low_u64_le","from_low_u64_ne","from_low_u64_ne","from_low_u64_ne","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","full_mul","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hashing","hexdisplay","impl_maybe_marker","index","index","index","index_mut","index_mut","index_mut","inner","inner","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_encoded","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_inner","into_inner","into_inner","into_inner","is_digest_build_enabled","is_digest_build_required_at_block","is_zero","is_zero","is_zero","is_zero","is_zero","leading_zeros","leading_zeros","len_bytes","len_bytes","len_bytes","low_u128","low_u128","low_u32","low_u32","low_u64","low_u64","map","max_digest_interval","max_encoded_len","max_encoded_len","max_encoded_len","max_encoded_len","max_encoded_len","max_value","max_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","ne","ne","ne","ne","ne","new","new","new","next_max_level_digest_range","not","not","offchain","one","one","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_neg","overflowing_neg","overflowing_pow","overflowing_pow","overflowing_sub","overflowing_sub","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","prev_max_level_digest_block","random","random","random","random_using","random_using","random_using","randomize","randomize","randomize","randomize_using","randomize_using","randomize_using","rem","rem","rem_assign","rem_assign","repeat_byte","repeat_byte","repeat_byte","sandbox","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_sub","saturating_sub","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl","shl_assign","shl_assign","shr","shr","shr_assign","shr_assign","size_hint","size_of","size_of","size_of","size_of","size_of","size_of","sr25519","sub","sub","sub_assign","sub_assign","testing","to_big_endian","to_big_endian","to_fixed_bytes","to_fixed_bytes","to_fixed_bytes","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_little_endian","to_little_endian","to_low_u64_be","to_low_u64_be","to_low_u64_be","to_low_u64_le","to_low_u64_le","to_low_u64_le","to_low_u64_ne","to_low_u64_ne","to_low_u64_ne","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","trailing_zeros","trailing_zeros","traits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u32_trait","uint","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","using_encoded","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wasm_export_functions","zero","zero","zero","zero","zero","zero","0","0","0","1","AcalaAccount","AccountId32","AlphavilleAccount","AresAccount","AventusAccount","BadBase58","BadLength","BareEd25519","BareSecp256k1","BareSr25519","BasiliskAccount","BifrostAccount","CalamariAccount","CentrifugeAccount","ChainXAccount","CrustAccount","CryptoType","CryptoTypeId","CryptoTypePublicPair","Custom","DEV_ADDRESS","DEV_PHRASE","DarkAccount","DarwiniaAccount","DataHighwayAccount","Derive","DeriveError","DeriveJunction","DhiwayAccount","DockMainAccount","DockTestAccount","Dummy","EdgewareAccount","EquilibriumAccount","ExposeSecret","FormatNotAllowed","GeekAccount","Hard","HeikoAccount","HydraDXAccount","Infallible","Inner","InvalidChecksum","InvalidFormat","InvalidFormat","InvalidPassword","InvalidPath","InvalidPath","InvalidPhrase","InvalidSeed","InvalidSeedLength","IsWrappedBy","JUNCTION_ID_LEN","JupiterAccount","KaruraAccount","KatalChainAccount","KeyTypeId","KiltAccount","KulupuAccount","KusamaAccount","LaminarAccount","LitentryAccount","MantaAccount","Moonbeam","Moonriver","NeatcoinAccount","NodleAccount","OriginTrailAccount","Pair","Pair","ParallelAccount","ParseError","PhalaAccount","PlasmAccount","PolimecAccount","PolkaFoundry","PolkaSmith","PolkadotAccount","PolymathAccount","Public","Public","PublicError","Reserved46","Reserved47","ReynoldsAccount","RobonomicsAccount","SecretString","SecretStringError","Seed","ShiftNrg","Signature","SocialAccount","Soft","SoraAccount","Ss58AddressFormat","Ss58Codec","StafiAccount","SubsocialAccount","SubstraTeeAccount","SubstrateAccount","SynesthesiaAccount","TotemAccount","UncheckedFrom","UncheckedInto","UniartsAccount","UnknownVersion","ValiuAccount","Wraps","ZeitgeistAccount","ZeroAccount","Zeroize","Zeroize","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","all","all_names","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","derive","derive","derive","deserialize","deserialize","deserialize","deserialize","encode","encode","encode","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expose_secret","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_is_allowed","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ffi_value","from_inner","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_phrase","from_phrase","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed","from_seed_slice","from_seed_slice","from_slice","from_slice","from_ss58check","from_ss58check_with_version","from_str","from_str","from_string","from_string","from_string","from_string_with_seed","from_string_with_version","from_string_with_version","generate","generate_with_phrase","generate_with_phrase","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hard","harden","hash","hash","hash","hash","hash","hash","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_inner","is_custom","is_hard","is_soft","key_types","max_encoded_len","ne","ne","ne","ne","ne","ne","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","public","public","serialize","serialize","serialize","serialize","set_default_ss58_version","sign","sign","soft","soften","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_public_crypto_pair","to_raw_vec","to_raw_vec","to_raw_vec","to_raw_vec","to_ss58check","to_ss58check_with_version","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_from","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unwrap_inner","using_encoded","using_encoded","using_encoded","verify","verify","verify_weak","verify_weak","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeroize","ACCOUNT","AURA","AUTHORITY_DISCOVERY","BABE","DUMMY","GRANDPA","IM_ONLINE","REPORTING","STAKING","0","0","BadBase58","BadLength","CRYPTO_ID","DeriveError","InvalidChecksum","Pair","Public","PublicError","Signature","SoftKeyInPath","UnknownVersion","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","derive","deserialize","deserialize","encode","encode","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_to","encode_to","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ffi_value","from_ffi_value","from_full","from_inner","from_inner","from_legacy_string","from_mut","from_mut","from_mut","from_mut","from_mut","from_phrase","from_raw","from_raw","from_ref","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed_slice","from_slice","from_slice","from_string","from_string_with_version","generate_with_phrase","get_hash","get_hash","hash","hash","inner","inner","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","into_inner","max_encoded_len","partial_cmp","public","recover","recover_prehashed","seed","serialize","serialize","sign","sign_prehashed","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_raw_vec","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","verify","verify_prehashed","verify_weak","vzip","vzip","vzip","vzip","vzip","0","0","BadBase58","BadLength","CRYPTO_ID","DeriveError","InvalidChecksum","LocalizedSignature","Pair","Public","PublicError","Signature","SoftKeyInPath","UnknownVersion","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_array_ref","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","deref","derive","deserialize","deserialize","encode","encode","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_to","encode_to","encode_to","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ffi_value","from_ffi_value","from_h256","from_h512","from_inner","from_inner","from_legacy_string","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_phrase","from_raw","from_raw","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed_slice","from_slice","from_slice","from_str","from_string","from_string_with_version","generate_with_phrase","get_hash","get_hash","hash","hash","inner","inner","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","into_inner","max_encoded_len","ne","ne","partial_cmp","public","seed","serialize","serialize","sign","signature","signer","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_raw_vec","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_from","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","verify","verify_weak","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","H160","H256","H512","convert_hash","blake2_128","blake2_128_into","blake2_256","blake2_256_into","blake2_512","blake2_512_into","blake2_64","blake2_64_into","keccak_256","keccak_512","sha2_256","twox_128","twox_128_into","twox_256","twox_256_into","twox_64","twox_64_into","AsBytesRef","HexDisplay","as_any","as_any_mut","as_bytes_ref","ascii_format","borrow","borrow_mut","fmt","fmt","from","from","from_mut","from_ref","into","into_any","into_any_arc","into_any_rc","to_string","try_from","try_into","type_id","unchecked_into","vzip","0","0","0","0","0","Capabilities","Capability","DbExternalities","DeadlineReached","DeadlineReached","Duration","Externalities","Finished","Http","HttpError","HttpRequestId","HttpRequestStatus","Invalid","Invalid","IoError","IoError","Keystore","LOCAL","LimitedExternalities","NetworkState","NodeAuthorization","OffchainDbExt","OffchainDbRead","OffchainDbWrite","OffchainOverlayedChange","OffchainStorage","OffchainWorkerExt","OpaqueMultiaddr","OpaqueNetworkState","PERSISTENT","Randomness","Remove","STORAGE_PREFIX","SetValue","StorageKind","Timestamp","TransactionPool","TransactionPool","TransactionPoolExt","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compare_and_set","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","diff","encode","encode","encode","encode","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","external_addresses","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_inner","from_inner","from_inner","from_inner","from_millis","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_unix_millis","get","get_hash","get_hash","has","has_all","hash","hash","http_request_add_header","http_request_add_header","http_request_start","http_request_start","http_request_write_body","http_request_write_body","http_response_headers","http_response_headers","http_response_read_body","http_response_read_body","http_response_wait","http_response_wait","inner","inner","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_inner","into_inner","into_inner","into_inner","is_validator","is_validator","local_storage_clear","local_storage_clear","local_storage_compare_and_set","local_storage_compare_and_set","local_storage_get","local_storage_get","local_storage_set","local_storage_set","millis","ne","ne","ne","ne","ne","ne","ne","ne","network_state","network_state","new","new","new","new","new","none","partial_cmp","partial_cmp","partial_cmp","peer_id","random_seed","random_seed","remove","rich_offchain_call","serialize","set","set_authorized_nodes","set_authorized_nodes","sleep_until","sleep_until","storage","sub","submit_transaction","testing","timestamp","timestamp","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unix_millis","using_encoded","using_encoded","using_encoded","using_encoded","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","InMemOffchainStorage","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","compare_and_set","default","fmt","from","from_mut","from_ref","get","into","into_any","into_any_arc","into_any_rc","into_iter","iter","remove","remove","set","to_owned","try_from","try_into","type_id","unchecked_into","vzip","0","OffchainState","PendingRequest","PoolState","TestOffchainExt","TestPersistentOffchainDB","TestTransactionPoolExt","__clone_box","__clone_box","apply_offchain_changes","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compare_and_set","default","default","default","default","default","default","drop","eq","expect_request","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","fulfill_pending_request","get","get","headers","http_request_add_header","http_request_start","http_request_write_body","http_response_headers","http_response_read_body","http_response_wait","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_validator","local_storage","local_storage_clear","local_storage_compare_and_set","local_storage_get","local_storage_set","meta","method","ne","network_state","new","new","new","persistent_storage","random_seed","read","remove","requests","response","response_headers","seed","sent","set","set_authorized_nodes","sleep_until","submit_transaction","timestamp","timestamp","to_owned","to_owned","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","uri","vzip","vzip","vzip","vzip","vzip","vzip","with_offchain_db","ERR_EXECUTION","ERR_MODULE","ERR_OK","ERR_OUT_OF_BOUNDS","Entry","EnvironmentDefinition","ExternEntity","Function","HostError","MEM_UNLIMITED","Memory","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","encode","encode_to","encode_to","encode_to","encode_to","entity","entries","eq","eq","eq","field_name","fmt","fmt","fmt","fmt","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","module_name","ne","ne","ne","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","vzip","vzip","vzip","vzip","0","0","CRYPTO_ID","LocalizedSignature","Pair","Public","Signature","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_array_ref","as_byte_slice","as_byte_slice","as_mut","as_mut","as_mut_byte_slice","as_mut_byte_slice","as_mut_slice_of","as_mut_slice_of","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","deref","derive","derive","deserialize","deserialize","encode","encode","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_to","encode_to","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_entropy","from_ffi_value","from_ffi_value","from_h256","from_h512","from_inner","from_inner","from_mut","from_mut","from_mut","from_mut","from_phrase","from_raw","from_raw","from_ref","from_ref","from_ref","from_ref","from_seed","from_seed_slice","from_slice","from_slice","from_str","from_string","from_string_with_version","generate_with_phrase","get_hash","get_hash","hash","hash","inner","inner","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","into_inner","max_encoded_len","ne","ne","partial_cmp","public","serialize","serialize","sign","signature","signer","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_public_crypto_pair","to_raw_vec","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unchecked_from","unchecked_from","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","verify","verify_batch","verify_deprecated","verify_weak","vzip","vzip","vzip","vzip","ECDSA","ED25519","SR25519","TaskExecutor","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","default","from","from_mut","from_ref","into","into_any","into_any_arc","into_any_rc","new","spawn","spawn_blocking","spawn_essential","spawn_essential_blocking","to_owned","try_from","try_into","type_id","unchecked_into","vzip","0","0","0","0","CodeExecutor","CodeNotFound","Error","Externalities","ExternalitiesExt","FetchRuntimeCode","NoneFetchRuntimeCode","ReadRuntimeVersion","ReadRuntimeVersionExt","RuntimeCode","RuntimeSpawn","RuntimeSpawnExt","SpawnEssentialNamed","SpawnNamed","TaskExecutorExt","WrappedRuntimeCode","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","child_storage","child_storage_hash","child_storage_root","clear_child_prefix","clear_child_storage","clear_prefix","clear_storage","clone","clone_into","code_fetcher","commit","deref","deref","deref","deref_mut","deref_mut","deref_mut","deregister_extension","deregister_extension","empty","eq","exists_child_storage","exists_storage","extension","extension","fetch_runtime_code","fetch_runtime_code","fetch_runtime_code","fetch_runtime_code","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","get_read_and_written_keys","get_whitelist","hash","heap_pages","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","join","kill_child_storage","new","new","next_child_storage_key","next_storage_key","place_child_storage","place_storage","proof_size","read_runtime_version","read_write_count","register_extension","register_extension","reset_read_write_count","set_child_storage","set_offchain_storage","set_storage","set_whitelist","spawn","spawn_blocking","spawn_call","spawn_essential","spawn_essential_blocking","storage","storage_append","storage_changes_root","storage_commit_transaction","storage_hash","storage_index_transaction","storage_renew_transaction_index","storage_rollback_transaction","storage_root","storage_start_transaction","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wipe","VALUE","Value","_0","_1","_10","_100","_11","_112","_12","_128","_13","_14","_15","_16","_160","_17","_18","_19","_192","_2","_20","_21","_22","_224","_23","_24","_25","_256","_26","_27","_28","_29","_3","_30","_31","_32","_33","_34","_35","_36","_37","_38","_384","_39","_4","_40","_41","_42","_43","_44","_45","_46","_47","_48","_49","_5","_50","_51","_512","_52","_53","_54","_55","_56","_57","_58","_59","_6","_60","_61","_62","_63","_64","_65","_66","_67","_68","_69","_7","_70","_71","_72","_73","_74","_75","_76","_77","_78","_79","_8","_80","_81","_82","_83","_84","_85","_86","_87","_88","_89","_9","_90","_91","_92","_93","_94","_95","_96","_97","_98","_99","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","U256","U512"],"q":["sp_coresp_core::cryptosp_core::crypto::key_types","","","","","","","","","sp_core::ecdsasp_core::edsp_core::hash","","","","","","","sp_core::hashing","","","","","","","","","","","","","","","","","sp_core::hexdisplay","","","","","","","","","","","","","","","","","","","","","","","","sp_core::offchainsp_core::offchain::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_core::offchain::testingsp_core::sandbox","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_core::srsp_core::testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_core::traitssp_core::u32_traitsp_core::uint","","",""],"d":["","","","","","","","Concrete implementation of Hasher using Blake2b 256-bit …","Context used for block construction.","Hex-serialized shim for <code>Vec<u8></code>.","Substrate changes trie configuration.","Substrate changes trie configuration range.","<code>Debug</code> log level.","<code>Debug</code> log level filter.","The encoded representation.","<code>Error</code> log level.","<code>Error</code> log level filter.","Context for executing a call into the runtime.","Fixed-size uninterpreted hash type with 20 bytes (160 …","Fixed-size uninterpreted hash type with 32 bytes (256 …","Fixed-size uninterpreted hash type with 64 bytes (512 …","Trait describing an object that can hash a slice of …","Context used for general block import (including locally …","<code>Info</code> log level.","<code>Info</code> log level filter.","Concrete implementation of Hasher using Keccak 256-bit …","The length in bytes of the <code>Hasher</code> output.","A log level matching the one from <code>log</code> crate.","Log level filter that expresses which log levels should …","Maximum value.","Maximum value.","The maximum number of bytes that can be allocated at one …","The native representation.","Something that is either a native or an encoded value.","A value that is never in a native representation. This is …","<code>Off</code> log level filter.","Context used for offchain calls.","Stores the encoded <code>RuntimeMetadata</code> for the native side as …","Simple blob to hold a <code>PeerId</code> without committing to its …","The output type of the <code>Hasher</code>","","What to use to build <code>HashMap</code>s with this <code>Hasher</code>.","Context used for importing blocks as part of an initial …","Simple 4 byte identifier.","<code>Trace</code> log level.","<code>Trace</code> log level filter.","Provide a simple 4 byte identifier for a type.","Little-endian large integer type","Little-endian large integer type","The void type - it cannot exist.","<code>Warn</code> log level.","<code>Warn</code> log level filter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Return the value as the encoded format.","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","","","","","","","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","","","","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","","","","","","","","","Conversion to u128 with overflow checking","Conversion to u128 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Return if specific bit is set.","Return if specific bit is set.","","","","","","","","","","","","","","","","","","","","","","","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return specific byte.","Return specific byte.","Returns the capabilities of particular context.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The configuration itself. None if changes tries were …","","","","","","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Cryptographic utilities.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Interval (in blocks) at which level1-digests are created. …","Returns Some if digest must be built at given block …","Maximal number of digest levels in hierarchy. 0 means …","","","","","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","Simple ECDSA API.","Simple Ed25519 API.","","","","","","","","","","","","","","","","","Last block of configuration (if configuration has been …","","","","","","","","","","","","","","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a hash type from the given bytes array of …","Constructs a hash type from the given reference to the …","","Constructs a hash type from the given reference to the …","","","","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","","Constructs a hash type from the given bytes array of …","","","","","Constructs a hash type from the given bytes array of …","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Convert from a decimal string.","Convert from a decimal string.","","","","","","","","","","","Converts from little endian representation bytes in …","Converts from little endian representation bytes in …","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","","","","Creates a hash type instance from the given string.","Creates a hash type instance from the given string.","Creates a hash type instance from the given string.","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","Multiplies two 256-bit integers to produce full 512-bit …","","","","","","","A fixed hash type.","Compute the hash of the provided slice of bytes returning …","","","","","","","","","Hashing functions.","Wrapper type for byte collections that outputs hex.","Macro for creating <code>Maybe*</code> marker traits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the value as the encoded format.","","","","","","","","","","","Is digest build enabled?","Do we need to build digest at given block?","Whether this is zero.","Whether this is zero.","Returns <code>true</code> if no bits are set.","Returns <code>true</code> if no bits are set.","Returns <code>true</code> if no bits are set.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","Low 2 words (u128)","Low 2 words (u128)","Conversion to u32","Conversion to u32","Low word (u64)","Low word (u64)","Initialize a key-value collection from array.","Returns max digest interval. One if digests are not …","","","","","","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new configuration given digest interval and levels.","Creates a new instance with the given metadata blob.","Create new <code>OpaquePeerId</code>","Returns max level digest blocks range (inclusive) which …","","","Offchain workers types","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","Add with overflow.","Add with overflow.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Negation with overflow.","Negation with overflow.","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Subtraction which underflows and returns a flag if it …","Subtraction which underflows and returns a flag if it …","","","","","","","","Fast exponentiation by squaring …","Fast exponentiation by squaring …","Returns max level digest block number that has been …","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","","","","","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","Definition of a sandbox environment.","Addition which saturates at the maximum value …","Addition which saturates at the maximum value …","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Subtraction which saturates at zero.","Subtraction which saturates at zero.","","","","","","","","","","","","","","","","","","","","","","","","Simple sr25519 (Schnorr-Ristretto) API.","","","","","Types that should only be used for testing!","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Returns the inner bytes array.","Returns the inner bytes array.","Returns the inner bytes array.","","","","","","","","","","","","","","Write to the slice in little-endian format.","Write to the slice in little-endian format.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","","","","","","","","","","","","","","","","","","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Shareable Substrate traits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An u32 trait with “values” as impl’d types.","An unsigned fixed-size integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro for exporting functions from wasm in with the …","Zero (additive identity) of this type.","Zero (additive identity) of this type.","Returns a new zero-initialized fixed hash.","Returns a new zero-initialized fixed hash.","Returns a new zero-initialized fixed hash.","Zero block of configuration.","","","","","Acala mainnet, standard account (*25519).","An opaque 32-byte cryptographic identifier.","ZERO testnet, standard account (*25519).","Ares Protocol, standard account (*25519).","Aventus Chain mainnet, standard account (*25519).","Bad alphabet.","Bad length.","Bare 32-bit Edwards Ed25519 key.","Bare ECDSA SECP256k1 key.","Bare 32-bit Schnorr/Ristretto 25519 (S/R 25519) key.","Basilisk standard account (*25519).","Bifrost mainnet, direct checksum, standard account (*…","Manta Canary Network, standard account (*25519).","Centrifuge Chain mainnet, standard account (*25519).","ChainX mainnet, standard account (*25519).","Crust Network, standard account (*25519).","Type which has a particular kind of crypto associated …","An identifier for a specific cryptographic algorithm used …","A type alias of CryptoTypeId & a public key","Use a manually provided numeric value as a standard …","The address of the associated root phrase for our …","The root phrase for our publicly known keys.","Dark mainnet, standard account (*25519).","Darwinia Chain mainnet, standard account (*25519).","DataHighway mainnet, standard account (*25519).","Derivable key trait.","Error returned from the <code>derive</code> function.","A since derivation junction description. It is the single …","Dhiway CORD network, standard account (*25519).","Dock mainnet, standard account (*25519).","Dock testnet, standard account (*25519).","Dummy cryptography. Doesn’t do anything.","Edgeware mainnet, standard account (*25519).","Equilibrium Network, standard account (*25519).","Trait for accessing reference to <code>SecretString</code>.","Disallowed SS58 Address Format for this datatype.","GeekCash mainnet, standard account (*25519).","Hard (“hardened”) derivation. Public keys do not have …","Heiko, session key (*25519).","HydraDX standard account (*25519).","The infallible type.","The inner type it is wrapping.","Invalid checksum.","The overall format was invalid (e.g. the seed phrase …","Invalid format.","The supplied password was invalid.","The derivation path was invalid (e.g. contains soft …","Invalid derivation path.","The seed phrase provided is not a valid BIP39 phrase.","The seed is invalid (bad content).","The seed has an invalid length.","One type is wrapped by another.","The length of the junction identifier. Note that this is …","Jupiter testnet, standard account (*25519).","Acala Karura canary network, standard account (*25519).","Katal Chain, standard account (*25519).","An identifier for a type of cryptographic key.","KILT Chain mainnet, standard account (*25519).","Kulupu mainnet, standard account (*25519).","Kusama Relay-chain, standard account (*25519).","Laminar mainnet, standard account (*25519).","Litentry Network, standard account (*25519).","Manta Network, standard account (*25519).","Moonbeam, session key (*25519).","Moonriver, session key (*25519).","Neatcoin mainnet, standard account (*25519).","Nodle Chain mainnet, standard account (*25519).","OriginTrail Parachain, ethereumm account (ECDSA).","Trait suitable for typical cryptographic PKI key pair …","The pair key type of this crypto.","Parallel, session key (*25519).","Error encountered while parsing <code>Ss58AddressFormat</code> from &…","Phala Network, standard account (*25519).","Plasm Network, standard account (*25519).","Polimec Chain mainnet, standard account (*25519).","PolkaFoundry Network, standard account (*25519).","PolkaSmith Canary Network, standard account (*25519).","Polkadot Relay-chain, standard account (*25519).","Polymath network, standard account (*25519).","Trait suitable for typical cryptographic PKI key public …","The type which is used to encode a public key.","An error type for SS58 decoding.","Reserved for future use (46).","Reserved for future use (47).","Laminar Reynolds canary network, standard account (*…","Any Robonomics network standard account (*25519).","A store for sensitive data.","An error with the interpretation of a secret.","The type used to (minimally) encode the data required to …","ShiftNrg mainnet, standard account (*25519).","The type used to represent a signature. Can be created …","Social Network, standard account (*25519).","Soft (vanilla) derivation. Public keys have a …","SORA Network, standard account (*25519).","A known address (sub)format/network ID for SS58.","Key that can be encoded to/from SS58.","Stafi mainnet, standard account (*25519).","Subsocial network, standard account (*25519).","Any SubstraTEE off-chain network private account (*25519).","Any Substrate network, standard account (*25519).","Synesthesia mainnet, standard account (*25519).","Any Totem Live Accounting network standard account (*…","Similar to <code>From</code>, except that the onus is on the part of …","The counterpart to <code>UncheckedFrom</code>.","UniArts Chain mainnet, standard account (*25519).","Unknown identifier for the encoding.","Valiu Liquidity Network mainnet, standard account (*…","Opposite of <code>IsWrappedBy</code> - denotes a type which is a …","Zeitgeist network, standard account (*25519).","ZERO mainnet, standard account (*25519).","Trait to zeroize a memory buffer.","Trait to zeroize a memory buffer.","","","","","","","","","","","All known address formats.","names of all address formats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a slice filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Expose secret: this is the only method providing access …","","","","","","","","","","","","","","","A format filterer, can be used to ensure that …","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Returns the KeyPair from the English BIP39 seed <code>phrase</code>, …","","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Generate new key pair from the provided <code>seed</code>.","","Make a new key pair from secret seed material. The slice …","","A new instance from the given slice.","","Some if the string is a properly encoded SS58Check …","Some if the string is a properly encoded SS58Check …","","","Some if the string is a properly encoded SS58Check …","Interprets the string <code>s</code> in order to generate a key pair.","","Interprets the string <code>s</code> in order to generate a key Pair. …","Some if the string is a properly encoded SS58Check …","","Generate new secure (random) key pair.","Generate new secure (random) key pair and provide the …","","","","","","","","Create a new hard (hardened) DeriveJunction from a given, …","Consume self to return a hard derive junction with the …","","","","","","","Get a reference to the inner junction id.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the address is custom.","Return <code>true</code> if the junction is hard.","Return <code>true</code> if the junction is soft.","Known key types; this also functions as a global registry …","","","","","","","","Create a new instance from its raw inner byte value.","","","","","Get the public key.","","","","","","Set the default “version” (actually, this is a bit of …","Sign a message.","","Create a new soft (vanilla) DeriveJunction from a given, …","Consume self to return a soft derive junction with the …","","","","","","","","","","","","","","","","Return <code>CryptoTypePublicPair</code> from public key.","","Return a vec filled with raw data.","Return a <code>Vec<u8></code> filled with raw data.","","","Return the ss58-check string for this key.","Return the ss58-check string for this key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from an instance of <code>T</code> to Self. This is not …","","The counterpart to <code>unchecked_from</code>.","","","","","","","","","","","","Consume self to return the chain code.","","","","Verify a signature on a message. Returns true if the …","","Verify a signature on a message. Returns true if the …","","","","","","","","","","","","","Zero out this object from memory using Rust intrinsics …","Key type for controlling an account in a Substrate …","Key type for Aura module, built-in. Identified as <code>aura</code>.","Key type for AuthorityDiscovery module, built-in. …","Key type for Babe module, built-in. Identified as <code>babe</code>.","A key type ID useful for tests.","Key type for Grandpa module, built-in. Identified as <code>gran</code>.","Key type for ImOnline module, built-in. Identified as <code>imon</code>…","Key type for equivocation reporting, built-in. Identified …","Key type for staking, built-in. Identified as <code>stak</code>.","","","Bad alphabet.","Bad length.","An identifier used to match public keys against ecdsa keys","An error when deriving a key.","Invalid checksum.","A key pair.","The ECDSA compressed public key.","An error type for SS58 decoding.","A signature (a 512-bit value, plus 8 bits for recovery …","A soft key was found in the path (and is unsupported).","Unknown version.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new instance from the given full public key.","","","Exactly as <code>from_string</code> except that if no matches are …","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Generate key pair from given recovery phrase and password.","A new instance from the given 33-byte <code>data</code>.","A new instance from the given 65-byte <code>data</code>.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Make a new key pair from secret seed material.","Make a new key pair from secret seed material. The slice …","A new instance from the given slice that should be 33 …","A new instance from the given slice that should be 65 …","","","Generate new secure (random) key pair and provide the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the public key.","Recover the public key from this signature and a message.","Recover the public key from this signature and a …","Get the seed for this key.","","","Sign a message.","Sign a pre-hashed message","","","","","","","","Return a vec filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature on a message. Returns true if the …","Verify a signature on a pre-hashed message. Return <code>true</code> …","Verify a signature on a message. Returns true if the …","","","","","","","","Bad alphabet.","Bad length.","An identifier used to match public keys against ed25519 …","An error when deriving a key.","Invalid checksum.","A localized signature also contains sender information.","A key pair.","A public key.","An error type for SS58 decoding.","A signature (a 512-bit value).","A soft key was found in the path (and is unsupported).","Unknown version.","","","","","","","","","","","","","","","","","","Return a slice filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A new instance from an H256.","A new instance from an H512.","","","Exactly as <code>from_string</code> except that if no matches are …","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Generate key pair from given recovery phrase and password.","A new instance from the given 32-byte <code>data</code>.","A new instance from the given 64-byte <code>data</code>.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Make a new key pair from secret seed material.","Make a new key pair from secret seed material. The slice …","A new instance from the given slice that should be 32 …","A new instance from the given slice that should be 64 …","","","","Generate new secure (random) key pair and provide the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the public key.","Get the seed for this key.","","","Sign a message.","The signature itself.","The signer of the signature.","","","","","","","","","","Return a vec filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature on a message. Returns true if the …","Verify a signature on a message. Returns true if the …","","","","","","","","","","Fixed-size uninterpreted hash type with 20 bytes (160 …","Fixed-size uninterpreted hash type with 32 bytes (256 …","Fixed-size uninterpreted hash type with 64 bytes (512 …","Hash conversion. Used to convert between unbound …","Do a Blake2 128-bit hash and return result.","Do a Blake2 128-bit hash and place result in <code>dest</code>.","Do a Blake2 256-bit hash and return result.","Do a Blake2 256-bit hash and place result in <code>dest</code>.","Do a Blake2 512-bit hash and return result.","Do a Blake2 512-bit hash and place result in <code>dest</code>.","Do a Blake2 64-bit hash and return result.","Do a Blake2 64-bit hash and place result in <code>dest</code>.","Do a keccak 256-bit hash and return result.","Do a keccak 512-bit hash and return result.","Do a sha2 256-bit hash and return result.","Do a XX 128-bit hash and return result.","Do a XX 128-bit hash and place result in <code>dest</code>.","Do a XX 256-bit hash and return result.","Do a XX 256-bit hash and place result in <code>dest</code>.","Do a XX 64-bit hash and return result.","Do a XX 64-bit hash and place result in <code>dest</code>.","Simple trait to transform various types to <code>&[u8]</code>","Simple wrapper to display hex representation of bytes.","","","Transform <code>self</code> into <code>&[u8]</code>.","Format into ASCII + # + hex, suitable for storage key …","","","","","Create new instance that will display <code>d</code> as a hex string …","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","","","","A set of capabilities","Execution context extra capabilities.","A externalities extension for accessing the Offchain DB.","The requested action couldn’t been completed within a …","Deadline was reached while we waited for this request to …","Duration type","An extended externalities for offchain workers.","The request has finished with given status code.","External http calls.","An error enum returned by some http methods.","Opaque type for offchain http requests.","Status of the HTTP request","The ID of the request is invalid in this context.","The passed ID is invalid in this context.","There was an IO Error while processing the request.","An error has occurred during the request, for example a …","Keystore access.","Local storage is revertible and fork-aware. It means that …","An <code>*Externalities</code> implementation with limited …","Access to opaque network state.","Manage the authorized nodes","The offchain database extension that will be registered …","Access to offchain worker DB (read only).","Access to offchain worker DB (writes).","Change to be applied to the offchain worker db in regards …","Offchain DB persistent (non-fork-aware) storage.","The offchain worker extension that will be registered at …","Simple blob to hold a <code>Multiaddr</code> without committing to its …","A blob to hold information about the local node’s …","Persistent storage is non-revertible and not fork-aware. …","Randomness source.","Remove the data associated with the key","Persistent storage prefix used by the Offchain Worker API …","Overwrite the value of an associated key","A type of supported crypto.","Opaque timestamp type","Abstraction over transaction pool.","Access to transaction pool.","An externalities extension to submit transactions to the …","","","","","","","","","","","","Increase the timestamp by given <code>Duration</code>.","Return an object representing all capabilities enabled.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replace the value in storage if given old_value matches …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a saturated difference (Duration) between two …","","","","","","","","","","","","","","","","","","","","","","","","List of addresses the node knows it can be reached as.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new duration representing given number of …","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Creates new <code>Timestamp</code> given unix timestamp in …","Retrieve a value from storage under given key and prefix.","","","Check if particular capability is enabled.","Check if this capability object represents all …","","","Append header to the request.","","Initiates a http request given HTTP verb and the URL.","","Write a chunk of request body.","","Read all response headers.","","Read a chunk of body response to given buffer.","","Block and wait for the responses for given requests.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns if the local node is a potential validator.","","Removes a value in the local storage.","","Sets a value in the local storage if it matches current …","","Gets a value from the local storage.","","Sets a value in the local storage.","","Returns number of milliseconds this Duration represents.","","","","","","","","","Returns information about the local node’s network …","","Create new externalities limited to given <code>capabilities</code>.","Create new <code>OpaqueMultiaddr</code>","Create a new instance of <code>Self</code>.","Create a new instance of <code>OffchainDbExt</code>.","Create a new instance of <code>TransactionPoolExt</code>.","Return an object representing an empty set of …","","","","PeerId of the local node in SCALE encoded.","Returns a random seed.","","Clear a storage entry under given key and prefix.","Return capabilities for rich offchain calls.","","Persist a value in storage under given key and prefix.","Set the authorized nodes from runtime.","","Pause the execution until <code>deadline</code> is reached.","","In-memory implementation of offchain workers database.","Decrease the timestamp by given <code>Duration</code>","Submit transaction.","Utilities for offchain calls testing.","Returns current UNIX timestamp (in millis)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return number of milliseconds since UNIX epoch.","","","","","","","","","","","","","","","","","","","","In-memory storage for offchain workers.","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","Consume the offchain storage and iterate over all key …","Iterate over all key value pairs by reference.","Remove a key and its associated value from the offchain …","","","","","","","","","","Internal state of the externalities.","Pending request.","The internal state of the fake transaction pool.","Implementation of offchain externalities used for tests.","Sharable “persistent” offchain storage for test.","Implementation of transaction pool used for test.","","","Apply a set of off-chain changes directly to the test …","","","","","","","","","","","","","Request body","","","","","","","","","","","","","","","","","","","","","","","","","","Add expected HTTP request.","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Asserts that pending request has been submitted and fills …","","Retrieve a key from the test backend.","Request headers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Local storage","","","","","Encoded Metadata","HTTP method","","","Create a new and empty offchain storage db for persistent …","Create new <code>TestOffchainExt</code> and a reference to the …","Create new <code>TestTransactionPoolExt</code> and a reference to the …","Persistent local storage","","Number of bytes already read from the response body.","","A list of pending requests.","Response body","Response headers","A supposedly random seed.","Has the request been sent already.","","","","","","A timestamp simulating the current time.","","","A vector of transactions submitted from the runtime.","","","","","","","","","","","","","","","","","","","","","","","","","URI","","","","","","","Create new <code>TestOffchainExt</code> and a reference to the …","Execution error occurred (typically trap).","Validation or instantiation error occurred when creating …","No error happened.","Out-of-bounds access attempted with memory or table.","An entry in a environment definition table.","Definition of runtime that could be used by sandboxed …","Describes an entity to define or import into the …","Function that is specified by an index in a default table …","Error error that can be returned from host function.","Constant for specifying no limit when creating a sandboxed…","Linear memory that is specified by some identifier …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","External entity being defined.","Vector of all entries in the environment definition.","","","","Field name in which corresponding entity being defined.","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","","","","","Module name of which corresponding entity being defined.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An identifier used to match public keys against sr25519 …","A localized signature also contains sender information. …","An Schnorrkel/Ristretto x25519 (“sr25519”) key pair.","An Schnorrkel/Ristretto x25519 (“sr25519”) public key.","An Schnorrkel/Ristretto x25519 (“sr25519”) signature.","","","","","","","","","","","","","Return a slice filled with raw data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derive a child key from a series of given junctions.","","","","","","","","","","","","","","","","","","","","","","","","","","Make a new key pair from binary data derived from a valid …","","","A new instance from an H256.","A new instance from an H512.","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","","A new instance from the given 32-byte <code>data</code>.","A new instance from the given 64-byte <code>data</code>.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Make a new key pair from raw secret seed material.","Make a new key pair from secret seed material. The slice …","A new instance from the given slice that should be 32 …","A new instance from the given slice that should be 64 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the public key.","","","","The signature itself.","The signer of the signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Batch verification.","Verify a signature on a message. Returns <code>true</code> if the …","","","","","","Key type for generic Sr 25519 key.","Key type for generic Ed25519 key.","Key type for generic Sr 25519 key.","A task executor that can be used in tests.","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","Create a new instance of <code>Self</code>.","","","","","","","","","","","","","","","Code execution engine.","Could not find the <code>:code</code> in the externalities while …","Externalities error type.","The Substrate externalities.","Extension for the <code>Externalities</code> trait.","Something that can fetch the runtime <code>:code</code>.","Type that implements <code>FetchRuntimeCode</code> and always returns …","A trait that allows reading version information from the …","An extension that provides functionality to read version …","The Wasm code of a Substrate runtime.","Runtime spawn extension.","Extension that supports spawning extra runtime instances …","Something that can spawn essential tasks (blocking and …","Something that can spawn tasks (blocking and …","Task executor extension.","Wrapper to use a <code>u8</code> slice or <code>Vec</code> as <code>FetchRuntimeCode</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Call a given method in the runtime. Returns a tuple of …","Read child runtime storage.","Get child storage value hash.","Get the trie root of a child storage map.","Clear child storage entries which keys are start with the …","Clear a child storage entry (<code>key</code>) of current contract …","Clear storage entries which keys are start with the given …","Clear a storage entry (<code>key</code>) of current contract being …","","","The code fetcher that can be used to lazily fetch the …","…","","","","","","","Deregister and drop extension of <code>T</code> type.","","Create an empty instance.","","Whether a child storage entry exists.","Whether a storage entry exists.","Tries to find a registered extension and returns a …","","Fetch the runtime <code>:code</code>.","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","…","…","The SCALE encoded hash of <code>code</code>.","The optional heap pages this <code>code</code> should be executed with.","","","","","","","","","","","","","","","","","","","","","","","","","","","Join the result of previously created runtime instance …","Clear an entire child storage.","Creates a new instance of the extension given a version …","New instance of task executor extension.","Returns the key immediately following the given key, if …","Returns the key immediately following the given key, if …","Set or clear a child storage entry.","Set or clear a storage entry (<code>key</code>) of current contract …","…","Reads the runtime version information from the given wasm …","…","Register extension <code>ext</code>.","","…","Set child storage entry <code>key</code> of current contract being …","Write a key value pair to the offchain storage database.","Set storage entry <code>key</code> of current contract being called …","…","Spawn the given non-blocking future.","Spawn the given blocking future.","Create new runtime instance and use dynamic dispatch to …","Spawn the given non-blocking future.","Spawn the given blocking future.","Read runtime storage.","Append storage item.","Get the changes trie root of the current storage overlay …","Commit the last transaction started by …","Get storage value hash.","Index specified transaction slice and store it.","Renew existing piece of transaction storage.","Rollback the last transaction started by …","Get the trie root of the current storage map.","Start a new nested transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","The actual value represented by the impl’ing type.","A u32 value, wrapped in a trait because we don’t yet …","Type representing the value 0 for the <code>Value</code> trait.","Type representing the value 1 for the <code>Value</code> trait.","Type representing the value 10 for the <code>Value</code> trait.","Type representing the value 100 for the <code>Value</code> trait.","Type representing the value 11 for the <code>Value</code> trait.","Type representing the value 112 for the <code>Value</code> trait.","Type representing the value 12 for the <code>Value</code> trait.","Type representing the value 128 for the <code>Value</code> trait.","Type representing the value 13 for the <code>Value</code> trait.","Type representing the value 14 for the <code>Value</code> trait.","Type representing the value 15 for the <code>Value</code> trait.","Type representing the value 16 for the <code>Value</code> trait.","Type representing the value 160 for the <code>Value</code> trait.","Type representing the value 17 for the <code>Value</code> trait.","Type representing the value 18 for the <code>Value</code> trait.","Type representing the value 19 for the <code>Value</code> trait.","Type representing the value 192 for the <code>Value</code> trait.","Type representing the value 2 for the <code>Value</code> trait.","Type representing the value 20 for the <code>Value</code> trait.","Type representing the value 21 for the <code>Value</code> trait.","Type representing the value 22 for the <code>Value</code> trait.","Type representing the value 224 for the <code>Value</code> trait.","Type representing the value 23 for the <code>Value</code> trait.","Type representing the value 24 for the <code>Value</code> trait.","Type representing the value 25 for the <code>Value</code> trait.","Type representing the value 256 for the <code>Value</code> trait.","Type representing the value 26 for the <code>Value</code> trait.","Type representing the value 27 for the <code>Value</code> trait.","Type representing the value 28 for the <code>Value</code> trait.","Type representing the value 29 for the <code>Value</code> trait.","Type representing the value 3 for the <code>Value</code> trait.","Type representing the value 30 for the <code>Value</code> trait.","Type representing the value 31 for the <code>Value</code> trait.","Type representing the value 32 for the <code>Value</code> trait.","Type representing the value 33 for the <code>Value</code> trait.","Type representing the value 34 for the <code>Value</code> trait.","Type representing the value 35 for the <code>Value</code> trait.","Type representing the value 36 for the <code>Value</code> trait.","Type representing the value 37 for the <code>Value</code> trait.","Type representing the value 38 for the <code>Value</code> trait.","Type representing the value 384 for the <code>Value</code> trait.","Type representing the value 39 for the <code>Value</code> trait.","Type representing the value 4 for the <code>Value</code> trait.","Type representing the value 40 for the <code>Value</code> trait.","Type representing the value 41 for the <code>Value</code> trait.","Type representing the value 42 for the <code>Value</code> trait.","Type representing the value 43 for the <code>Value</code> trait.","Type representing the value 44 for the <code>Value</code> trait.","Type representing the value 45 for the <code>Value</code> trait.","Type representing the value 46 for the <code>Value</code> trait.","Type representing the value 47 for the <code>Value</code> trait.","Type representing the value 48 for the <code>Value</code> trait.","Type representing the value 49 for the <code>Value</code> trait.","Type representing the value 5 for the <code>Value</code> trait.","Type representing the value 50 for the <code>Value</code> trait.","Type representing the value 51 for the <code>Value</code> trait.","Type representing the value 512 for the <code>Value</code> trait.","Type representing the value 52 for the <code>Value</code> trait.","Type representing the value 53 for the <code>Value</code> trait.","Type representing the value 54 for the <code>Value</code> trait.","Type representing the value 55 for the <code>Value</code> trait.","Type representing the value 56 for the <code>Value</code> trait.","Type representing the value 57 for the <code>Value</code> trait.","Type representing the value 58 for the <code>Value</code> trait.","Type representing the value 59 for the <code>Value</code> trait.","Type representing the value 6 for the <code>Value</code> trait.","Type representing the value 60 for the <code>Value</code> trait.","Type representing the value 61 for the <code>Value</code> trait.","Type representing the value 62 for the <code>Value</code> trait.","Type representing the value 63 for the <code>Value</code> trait.","Type representing the value 64 for the <code>Value</code> trait.","Type representing the value 65 for the <code>Value</code> trait.","Type representing the value 66 for the <code>Value</code> trait.","Type representing the value 67 for the <code>Value</code> trait.","Type representing the value 68 for the <code>Value</code> trait.","Type representing the value 69 for the <code>Value</code> trait.","Type representing the value 7 for the <code>Value</code> trait.","Type representing the value 70 for the <code>Value</code> trait.","Type representing the value 71 for the <code>Value</code> trait.","Type representing the value 72 for the <code>Value</code> trait.","Type representing the value 73 for the <code>Value</code> trait.","Type representing the value 74 for the <code>Value</code> trait.","Type representing the value 75 for the <code>Value</code> trait.","Type representing the value 76 for the <code>Value</code> trait.","Type representing the value 77 for the <code>Value</code> trait.","Type representing the value 78 for the <code>Value</code> trait.","Type representing the value 79 for the <code>Value</code> trait.","Type representing the value 8 for the <code>Value</code> trait.","Type representing the value 80 for the <code>Value</code> trait.","Type representing the value 81 for the <code>Value</code> trait.","Type representing the value 82 for the <code>Value</code> trait.","Type representing the value 83 for the <code>Value</code> trait.","Type representing the value 84 for the <code>Value</code> trait.","Type representing the value 85 for the <code>Value</code> trait.","Type representing the value 86 for the <code>Value</code> trait.","Type representing the value 87 for the <code>Value</code> trait.","Type representing the value 88 for the <code>Value</code> trait.","Type representing the value 89 for the <code>Value</code> trait.","Type representing the value 9 for the <code>Value</code> trait.","Type representing the value 90 for the <code>Value</code> trait.","Type representing the value 91 for the <code>Value</code> trait.","Type representing the value 92 for the <code>Value</code> trait.","Type representing the value 93 for the <code>Value</code> trait.","Type representing the value 94 for the <code>Value</code> trait.","Type representing the value 95 for the <code>Value</code> trait.","Type representing the value 96 for the <code>Value</code> trait.","Type representing the value 97 for the <code>Value</code> trait.","Type representing the value 98 for the <code>Value</code> trait.","Type representing the value 99 for the <code>Value</code> traitet a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Little-endian large integer type","Little-endian large integer type"],"i":[1,2,3,4,5,6,7,0,8,0,0,0,9,10,11,9,10,0,0,0,0,0,8,9,10,0,12,0,0,3,4,0,11,0,0,10,8,0,0,12,0,12,8,13,9,10,0,0,0,0,9,10,14,15,1,2,9,10,16,3,4,5,6,7,3,4,3,4,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,3,4,5,6,7,5,6,7,5,6,7,11,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,3,4,5,6,7,5,6,7,3,4,3,4,3,4,3,4,5,6,7,3,4,3,4,5,6,7,5,5,6,6,7,7,3,4,5,6,7,5,5,6,6,7,7,3,4,3,4,5,6,7,5,5,6,6,7,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,3,4,8,3,4,3,4,3,4,3,4,3,4,3,4,3,4,14,15,1,2,9,10,16,3,4,5,6,7,14,15,1,2,9,10,16,3,4,5,6,7,1,2,3,4,5,6,7,15,3,4,5,6,7,5,6,7,0,14,1,19,2,20,9,10,16,3,4,5,6,7,14,1,19,2,20,9,10,16,3,4,5,6,7,14,1,19,2,20,9,10,16,3,4,5,6,7,14,1,19,2,20,9,10,16,3,4,5,6,7,14,2,3,4,5,6,7,1,19,14,1,2,3,4,5,6,7,14,14,14,3,4,3,4,3,4,0,0,1,19,2,20,5,6,7,5,6,7,14,1,19,2,9,10,15,11,14,15,1,19,2,20,16,3,4,5,6,7,3,4,11,14,15,17,18,1,2,16,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,11,11,11,14,15,17,18,1,1,1,19,2,20,9,9,9,10,10,16,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,3,4,3,4,2,9,10,5,6,7,2,5,6,7,3,4,5,6,7,5,6,7,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,5,6,7,1,3,4,5,6,7,3,4,3,1,3,4,5,6,7,0,12,17,18,1,3,4,5,6,7,0,0,0,5,6,7,5,6,7,2,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,11,2,9,10,5,6,7,2,5,6,7,14,14,3,4,5,6,7,3,4,5,6,7,3,4,3,4,3,4,0,14,3,4,5,6,7,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,14,15,1,19,2,3,4,14,19,2,14,3,4,0,3,4,3,4,3,4,3,4,3,4,3,4,1,2,3,4,5,6,7,3,4,14,5,6,7,5,6,7,5,6,7,5,6,7,3,4,3,4,5,6,7,0,3,4,3,4,3,4,14,1,2,3,4,5,6,7,3,4,3,4,3,4,3,4,1,14,3,4,5,6,7,0,3,4,3,4,0,3,4,5,6,7,14,1,19,2,20,9,10,16,3,4,5,6,7,3,4,5,6,7,5,6,7,5,6,7,14,15,1,2,9,10,16,3,4,5,6,7,3,4,5,6,7,3,4,0,8,11,14,15,17,18,1,19,2,20,9,9,10,10,16,3,3,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,0,0,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,1,19,2,3,4,5,6,7,8,11,14,15,17,18,1,19,2,20,9,10,16,3,4,5,6,7,0,3,4,5,6,7,15,21,22,23,23,24,0,24,24,24,25,25,24,24,24,24,24,24,24,24,24,0,0,0,24,0,0,24,24,24,0,26,0,24,24,24,0,24,24,0,25,24,27,24,24,0,28,25,29,25,29,29,25,29,29,29,0,0,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,0,30,24,0,24,24,24,24,24,24,24,0,26,0,24,24,24,24,0,0,26,24,26,24,27,24,0,0,24,24,24,24,24,24,0,0,24,25,24,0,24,24,0,0,29,27,25,24,31,32,33,21,22,23,24,24,34,29,27,25,24,31,32,33,21,22,23,34,29,27,25,24,31,32,33,21,22,23,32,33,32,32,33,32,33,32,33,32,32,33,35,33,32,33,34,29,27,25,24,31,32,33,21,22,23,34,29,27,25,24,31,32,33,21,22,23,29,27,25,24,31,32,33,21,22,23,29,27,25,24,31,32,33,21,22,23,32,21,22,23,27,32,21,22,23,27,32,21,22,23,27,32,21,22,23,27,32,21,22,23,24,32,33,21,22,23,26,36,33,32,21,22,23,32,21,22,32,33,32,33,27,32,21,22,23,29,27,25,24,31,32,33,21,22,23,37,34,29,27,25,24,24,31,31,32,32,21,22,23,23,38,34,29,27,27,25,24,31,32,32,32,32,33,21,21,22,23,23,23,23,23,23,23,21,21,39,34,29,27,25,24,31,32,33,21,22,23,26,33,39,34,29,27,25,24,31,32,33,21,22,23,26,33,26,33,35,33,38,38,24,32,38,26,33,26,38,33,26,26,33,27,32,33,21,22,23,27,27,27,32,33,21,22,23,27,21,34,29,27,25,24,31,32,33,21,22,23,34,29,27,25,24,31,32,33,21,22,23,34,29,27,25,24,31,32,33,21,22,23,34,29,27,25,24,31,32,33,21,22,23,21,21,24,27,27,0,32,27,24,32,21,22,23,32,32,21,22,23,26,33,32,21,22,23,0,26,33,27,27,27,32,21,22,23,29,27,25,24,31,32,33,21,22,23,35,33,26,35,33,33,38,38,24,31,32,23,34,29,27,25,24,24,24,24,31,32,32,33,33,21,21,22,23,34,29,27,25,24,31,32,33,21,22,23,34,29,27,25,24,31,32,33,21,22,23,40,32,41,34,29,27,25,24,31,32,33,21,22,23,27,32,21,22,26,33,26,33,34,29,27,25,24,31,32,33,21,22,23,42,0,0,0,0,0,0,0,0,0,43,44,45,45,0,0,45,0,0,0,0,46,45,43,45,44,47,46,43,45,44,47,46,43,45,44,47,43,44,43,44,43,44,43,44,43,44,44,43,44,46,43,45,44,47,46,43,45,44,47,43,45,44,47,43,45,44,47,43,43,44,43,44,43,44,43,44,43,44,47,43,44,43,44,43,44,43,44,43,44,43,45,44,43,43,45,44,46,43,43,45,44,44,47,43,44,43,43,44,47,46,43,45,44,47,47,43,44,46,43,45,44,47,47,47,43,44,43,43,47,43,44,43,44,43,44,46,43,45,44,47,46,43,45,44,47,46,43,45,44,47,46,43,45,44,47,43,44,43,44,43,43,47,44,44,47,43,44,47,47,43,44,43,45,44,47,43,47,43,46,43,43,45,44,44,47,46,43,45,44,47,46,43,45,44,47,43,46,43,45,44,47,43,44,47,47,47,46,43,45,44,47,48,49,50,50,0,0,50,0,0,0,0,0,51,50,52,48,49,53,50,52,51,48,49,53,50,52,51,48,49,53,50,48,48,49,48,49,48,49,48,49,48,48,49,49,48,49,52,51,48,49,53,50,52,51,48,49,53,50,52,48,49,53,50,52,48,49,53,50,48,48,49,53,48,49,53,48,49,53,48,49,53,48,49,48,52,48,49,48,49,48,49,48,49,48,49,53,48,49,53,50,48,48,49,53,50,50,52,51,48,48,49,53,50,48,49,48,49,48,49,52,52,51,48,49,53,50,52,48,49,52,51,48,49,53,50,52,52,48,49,48,48,48,52,48,49,48,49,48,49,52,51,48,49,53,50,52,51,48,49,53,50,52,51,48,49,53,50,52,51,48,49,53,50,48,49,48,49,48,48,53,48,52,52,48,49,52,53,53,48,49,53,52,48,49,53,50,48,52,48,50,52,51,48,48,49,49,53,50,52,51,48,49,53,50,52,51,48,49,53,50,48,48,52,51,48,49,53,50,48,49,52,52,52,51,48,49,53,50,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,55,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,56,57,58,59,60,0,0,0,61,62,0,0,62,63,0,0,0,61,62,61,62,63,64,0,63,63,0,63,63,0,0,0,0,0,64,63,65,0,65,0,0,0,63,0,64,56,61,62,66,57,67,68,63,69,65,67,69,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,58,59,60,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,64,56,61,62,66,57,67,68,63,69,65,64,56,61,62,66,57,67,68,63,69,65,56,67,68,71,64,56,61,62,66,57,67,68,64,56,61,62,66,57,67,68,64,56,61,62,66,57,67,68,64,56,61,62,66,57,67,68,66,67,68,58,59,60,58,59,60,64,67,56,57,67,68,64,56,61,62,66,57,67,68,64,56,61,62,66,57,67,68,63,69,65,66,64,56,61,62,66,57,67,68,63,69,65,70,64,56,61,62,66,57,67,68,63,69,69,58,58,59,59,60,60,65,64,56,61,62,66,57,67,68,56,57,67,68,68,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,67,71,56,65,69,69,56,65,72,70,72,70,72,70,72,70,72,70,72,70,56,57,67,68,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,64,56,61,62,66,57,67,68,56,57,67,68,72,70,73,70,73,70,73,70,73,70,68,56,62,66,57,67,68,69,65,72,70,70,57,58,59,60,69,56,67,68,66,72,70,71,69,64,71,72,70,72,70,0,67,74,0,72,70,64,56,61,62,66,57,67,68,64,56,61,62,66,57,67,68,63,69,65,70,64,64,64,56,61,61,61,62,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,67,56,57,67,68,70,64,56,61,62,66,57,67,68,63,69,58,59,60,65,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,0,0,0,0,0,0,77,76,77,78,77,79,76,80,81,78,77,79,76,80,81,78,78,77,79,76,80,81,78,77,79,76,80,81,77,76,77,76,77,78,77,79,76,80,81,79,78,79,78,77,79,76,78,77,79,76,80,81,78,77,79,76,80,81,78,77,79,76,80,81,79,77,77,78,76,76,76,76,76,76,78,77,79,76,80,81,78,77,79,76,80,81,78,77,79,76,80,81,78,77,79,76,80,81,76,79,76,76,76,76,78,78,78,76,77,76,81,79,76,78,77,79,78,78,79,78,77,76,76,81,76,79,77,76,80,78,77,79,76,80,81,78,77,79,76,80,81,78,77,79,76,80,81,78,77,79,76,80,81,78,78,77,79,76,80,81,76,0,0,0,0,0,0,0,82,0,0,82,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,82,83,84,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,84,85,82,83,84,83,84,82,83,84,83,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,83,82,83,84,85,82,83,84,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,85,82,83,84,84,85,82,83,84,86,87,0,0,0,0,0,88,86,87,89,88,86,87,89,88,86,87,89,86,86,87,86,87,86,87,86,87,88,86,86,87,87,86,87,88,86,87,89,88,86,87,89,88,86,87,89,88,86,87,89,86,86,87,86,87,86,87,86,87,86,87,86,88,86,86,87,86,87,86,87,86,87,86,87,86,87,89,86,86,87,89,88,88,88,88,86,87,87,89,88,86,87,86,87,86,87,88,86,87,89,88,86,87,88,86,87,89,88,88,86,87,86,86,86,88,86,87,86,87,86,87,88,86,87,89,88,86,87,89,88,86,87,89,88,86,87,89,86,87,86,87,86,86,89,86,88,86,87,88,89,89,86,87,88,86,87,89,86,88,86,88,86,86,87,87,89,88,86,87,89,88,86,87,89,86,86,88,86,87,89,86,87,88,0,88,88,88,86,87,89,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,92,93,94,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,96,91,97,96,98,92,93,94,91,97,96,98,92,93,94,92,93,94,91,97,96,98,92,93,94,91,97,96,98,92,93,94,95,99,99,99,99,99,99,99,96,96,96,99,92,93,94,92,93,94,100,99,96,96,99,99,100,99,101,91,97,96,98,98,91,97,96,98,92,92,93,93,94,94,91,97,96,98,92,93,94,91,97,96,98,92,93,94,99,99,96,96,91,97,96,98,92,93,94,91,97,96,98,92,93,94,91,97,98,92,93,91,97,96,98,92,93,94,102,99,92,93,99,99,99,99,99,103,99,100,99,99,99,99,99,99,104,104,102,105,105,99,99,99,99,99,99,99,99,99,99,96,98,91,97,96,98,92,93,94,91,97,96,98,92,93,94,91,97,96,98,92,93,94,91,97,96,98,92,93,94,91,97,96,98,92,93,94,99,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,3,4,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["u256",3]],[[],["u512",3]],[[["u256",3]]],[[["u512",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cow",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[],["u128",15]],[[],["u128",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[["h160",3]]],[[["h256",3]]],[[["h512",3]]],[[["h160",3]]],[[["h160",3]]],[[["h256",3]]],[[["h256",3]]],[[["h512",3]]],[[["h512",3]]],[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[["h160",3]]],[[["h256",3]]],[[["h512",3]]],[[["h160",3]]],[[["h160",3]]],[[["h256",3]]],[[["h256",3]]],[[["h512",3]]],[[["h512",3]]],[[],["usize",15]],[[],["usize",15]],[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[["h160",3]]],[[["h256",3]]],[[["h512",3]]],[[["h160",3]]],[[["h160",3]]],[[["h256",3]]],[[["h256",3]]],[[["h512",3]]],[[["h512",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["u8",15]],[[["usize",15]],["u8",15]],[[],["capabilities",3]],[[["u256",3]],[["option",4,["u256"]],["u256",3]]],[[["u512",3]],[["option",4,["u512"]],["u512",3]]],[[["u256",3]],[["option",4,["u256"]],["u256",3]]],[[["u512",3]],[["option",4,["u512"]],["u512",3]]],[[["u256",3]],[["option",4,["u256"]],["u256",3]]],[[["u512",3]],[["option",4,["u512"]],["u512",3]]],[[],[["option",4,["u256"]],["u256",3]]],[[],[["option",4,["u512"]],["u512",3]]],[[["u256",3]],[["option",4,["u256"]],["u256",3]]],[[["u512",3]],[["option",4,["u512"]],["u512",3]]],[[["u256",3]],[["option",4,["u256"]],["u256",3]]],[[["u512",3]],[["option",4,["u512"]],["u512",3]]],[[["u256",3]],[["option",4,["u256"]],["u256",3]]],[[["u512",3]],[["option",4,["u512"]],["u512",3]]],[[],["changestrieconfiguration",3]],[[],["changestrieconfigurationrange",3]],[[],["bytes",3]],[[],["opaquepeerid",3]],[[],["loglevel",4]],[[],["loglevelfilter",4]],[[],["void",4]],[[],["u256",3]],[[],["u512",3]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bytes",3]],["ordering",4]],[[["opaquepeerid",3]],["ordering",4]],[[["u256",3]],["ordering",4]],[[["u512",3]],["ordering",4]],[[["h160",3]],["ordering",4]],[[["h256",3]],["ordering",4]],[[["h512",3]],["ordering",4]],null,[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[["h160",3]],["bool",15]],[[["h256",3]],["bool",15]],[[["h512",3]],["bool",15]],null,[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["u256","error"]],["u256",3]]],[[],[["result",4,["u512","error"]],["error",3],["u512",3]]],[[],[["h160",3],["result",4,["h160","error"]],["error",3]]],[[],[["h256",3],["result",4,["h256","error"]],["error",3]]],[[],[["result",4,["h512","error"]],["error",3],["h512",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["changestrieconfiguration",3]],[[],["opaquepeerid",3]],[[],["u256",3]],[[],["u512",3]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u256",3],["result",4,["u256"]]]],[[],[["result",4,["u512"]],["u512",3]]],[[],[["result",4,["h160"]],["h160",3]]],[[],[["h256",3],["result",4,["h256"]]]],[[],[["result",4,["h512"]],["h512",3]]],null,[[],["option",4]],null,[[],["u256",3]],[[],["u512",3]],[[]],[[]],[[["u256",3]]],[[["u512",3]]],null,null,[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[["changestrieconfiguration",3]],["bool",15]],[[["changestrieconfigurationrange",3]],["bool",15]],[[["bytes",3]],["bool",15]],[[["opaquemetadata",3]],["bool",15]],[[["opaquepeerid",3]],["bool",15]],[[["nevernativevalue",4]],["bool",15]],[[["void",4]],["bool",15]],[[["u256",3]],["bool",15]],[[["u512",3]],["bool",15]],[[["h160",3]],["bool",15]],[[["h256",3]],["bool",15]],[[["h512",3]],["bool",15]],[[["usize",15]],["u256",3]],[[["usize",15]],["u512",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[["opaquemetadata",3]]],[[]],[[]],[[]],[[]],[[["level",4]]],[[["u32",15]]],[[["levelfilter",4]]],[[]],[[]],[[["u8",15]],["u256",3]],[[["i128",15]],["u256",3]],[[]],[[["u256",3]],["u256",3]],[[["i16",15]],["u256",3]],[[["i32",15]],["u256",3]],[[["i8",15]],["u256",3]],[[],["u256",3]],[[],["u256",3]],[[["u16",15]],["u256",3]],[[["str",15]],["u256",3]],[[["u128",15]],["u256",3]],[[["u128",3]],["u256",3]],[[],["u256",3]],[[["usize",15]],["u256",3]],[[["i64",15]],["u256",3]],[[["u32",15]],["u256",3]],[[["isize",15]],["u256",3]],[[["u64",15]],["u256",3]],[[["u256",3]],["u512",3]],[[["u128",15]],["u512",3]],[[["str",15]],["u512",3]],[[["u32",15]],["u512",3]],[[["i64",15]],["u512",3]],[[["u256",3]],["u512",3]],[[["u128",3]],["u512",3]],[[["isize",15]],["u512",3]],[[["i8",15]],["u512",3]],[[],["u512",3]],[[["u64",15]],["u512",3]],[[["u16",15]],["u512",3]],[[]],[[],["u512",3]],[[["u512",3]],["u512",3]],[[["usize",15]],["u512",3]],[[["i128",15]],["u512",3]],[[["u8",15]],["u512",3]],[[["i32",15]],["u512",3]],[[["i16",15]],["u512",3]],[[],["u512",3]],[[],["h160",3]],[[],["h160",3]],[[]],[[],["h160",3]],[[["h256",3]],["h160",3]],[[["public",3]]],[[["public",3]],["h256",3]],[[],["h256",3]],[[],["h256",3]],[[["h160",3]],["h256",3]],[[],["h256",3]],[[]],[[["signature",3]],["h512",3]],[[["signature",3]],["h512",3]],[[]],[[],["h512",3]],[[],["h512",3]],[[],["h512",3]],[[],["u256",3]],[[],["u512",3]],[[["str",15]],[["result",4,["u256","fromdecstrerr"]],["u256",3],["fromdecstrerr",4]]],[[["str",15]],[["fromdecstrerr",4],["result",4,["u512","fromdecstrerr"]],["u512",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],[[],["u256",3]],[[],["u512",3]],[[["u64",15]],["h160",3]],[[["u64",15]],["h256",3]],[[["u64",15]],["h512",3]],[[["u64",15]],["h160",3]],[[["u64",15]],["h256",3]],[[["u64",15]],["h512",3]],[[["u64",15]],["h160",3]],[[["u64",15]],["h256",3]],[[["u64",15]],["h512",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],[[["str",15]],["result",4]],[[["str",15]],[["result",4,["u256"]],["u256",3]]],[[["str",15]],[["result",4,["u512"]],["u512",3]]],[[["str",15]],[["fromhexerror",4],["h160",3],["result",4,["h160","fromhexerror"]]]],[[["str",15]],[["fromhexerror",4],["result",4,["h256","fromhexerror"]],["h256",3]]],[[["str",15]],[["fromhexerror",4],["result",4,["h512","fromhexerror"]],["h512",3]]],[[["str",15],["u32",15]],[["result",4,["u256","fromstrradixerr"]],["u256",3],["fromstrradixerr",3]]],[[["str",15],["u32",15]],[["result",4,["u512","fromstrradixerr"]],["fromstrradixerr",3],["u512",3]]],[[["u256",3]],["u512",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u128",15]],[[],["u128",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],null,[[],["u32",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u256",3]],[[],["u512",3]],[[["i32",15]],["u256",3]],[[["u8",15]],["u256",3]],[[["usize",15]],["u256",3]],[[["i16",15]],["u256",3]],[[["isize",15]],["u256",3]],[[["isize",15]],["u256",3]],[[["u32",15]],["u256",3]],[[["u256",3]],["u256",3]],[[["i8",15]],["u256",3]],[[["u16",15]],["u256",3]],[[["u64",15]],["u256",3]],[[["i64",15]],["u256",3]],[[["i64",15]],["u256",3]],[[["u64",15]],["u256",3]],[[["u32",15]],["u256",3]],[[["usize",15]],["u256",3]],[[["i8",15]],["u256",3]],[[["i32",15]],["u256",3]],[[["i16",15]],["u256",3]],[[["u16",15]],["u256",3]],[[["u256",3]],["u256",3]],[[["u8",15]],["u256",3]],[[["u16",15]],["u512",3]],[[["u32",15]],["u512",3]],[[["i16",15]],["u512",3]],[[["i64",15]],["u512",3]],[[["usize",15]],["u512",3]],[[["i32",15]],["u512",3]],[[["u512",3]],["u512",3]],[[["u32",15]],["u512",3]],[[["isize",15]],["u512",3]],[[["i64",15]],["u512",3]],[[["i32",15]],["u512",3]],[[["u64",15]],["u512",3]],[[["usize",15]],["u512",3]],[[["u64",15]],["u512",3]],[[["u8",15]],["u512",3]],[[["i16",15]],["u512",3]],[[["u8",15]],["u512",3]],[[["u512",3]],["u512",3]],[[["i8",15]],["u512",3]],[[["u16",15]],["u512",3]],[[["i8",15]],["u512",3]],[[["isize",15]],["u512",3]],[[["i8",15]]],[[["u32",15]]],[[["u64",15]]],[[["i32",15]]],[[["u256",3]]],[[["i64",15]]],[[["usize",15]]],[[["i16",15]]],[[["u8",15]]],[[["u16",15]]],[[["isize",15]]],[[["i64",15]]],[[["u16",15]]],[[["i16",15]]],[[["isize",15]]],[[["i32",15]]],[[["u32",15]]],[[["usize",15]]],[[["u512",3]]],[[["i8",15]]],[[["u8",15]]],[[["u64",15]]],[[["changestrieconfiguration",3]],["bool",15]],[[["changestrieconfigurationrange",3]],["bool",15]],[[["bytes",3]],["bool",15]],[[["opaquemetadata",3]],["bool",15]],[[["opaquepeerid",3]],["bool",15]],[[["u256",3]],["bool",15]],[[["u512",3]],["bool",15]],[[["u32",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[],["option",4]],[[],["u256",3]],[[],["u512",3]],null,[[],["u256",3]],[[],["u512",3]],[[["u256",3]]],[[["u512",3]]],[[["u256",3]]],[[["u512",3]]],[[]],[[]],[[["u256",3]]],[[["u512",3]]],[[["u256",3]]],[[["u512",3]]],[[["bytes",3]],[["option",4,["ordering"]],["ordering",4]]],[[["opaquepeerid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u256",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u512",3]],[["option",4,["ordering"]],["ordering",4]]],[[["h160",3]],[["option",4,["ordering"]],["ordering",4]]],[[["h256",3]],[["option",4,["ordering"]],["ordering",4]]],[[["h512",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[],["option",4]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u256",3]],[[],["u512",3]],[[]],[[]],[[["u8",15]],["h160",3]],[[["u8",15]],["h256",3]],[[["u8",15]],["h512",3]],null,[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[["u256",3]],["u256",3]],[[["u512",3]],["u512",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["u256",3]],[[],["u512",3]],[[]],[[]],[[],["u256",3]],[[],["u512",3]],[[]],[[]],[[],["usize",15]],[[["mallocsizeofops",3]],["usize",15]],[[["mallocsizeofops",3]],["usize",15]],[[["mallocsizeofops",3]],["usize",15]],[[["mallocsizeofops",3]],["usize",15]],[[["mallocsizeofops",3]],["usize",15]],[[["mallocsizeofops",3]],["usize",15]],null,[[],["u256",3]],[[],["u512",3]],[[["u256",3]]],[[["u512",3]]],null,[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["u32",15]],[[],["u32",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["u512",3]],[["error",4],["result",4,["u256","error"]],["u256",3]]],[[],["result",4]],[[["u512",3]],[["error",4],["result",4,["u256","error"]],["u256",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u256",3]],[[],["u512",3]],[[],["h160",3]],[[],["h256",3]],[[],["h512",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[]],[[]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["secretstringerror",4]],[[],["derivejunction",4]],[[],["publicerror",4]],[[],["ss58addressformat",4]],[[],["parseerror",3]],[[],["accountid32",3]],[[],["dummy",3]],[[],["keytypeid",3]],[[],["cryptotypeid",3]],[[],["cryptotypepublicpair",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["accountid32",3]],["ordering",4]],[[["keytypeid",3]],["ordering",4]],[[["cryptotypeid",3]],["ordering",4]],[[["cryptotypepublicpair",3]],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[]],[[],["accountid32",3]],[[],["dummy",3]],[[],["keytypeid",3]],[[],["cryptotypeid",3]],[[],["cryptotypepublicpair",3]],[[["iterator",8],["option",4]],["result",4]],[[["iterator",8]],["option",4]],[[["iterator",8],["dummy",3],["option",4,["dummy"]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["secretstringerror",4]],["bool",15]],[[["derivejunction",4]],["bool",15]],[[["publicerror",4]],["bool",15]],[[["ss58addressformat",4]],["bool",15]],[[["parseerror",3]],["bool",15]],[[["accountid32",3]],["bool",15]],[[["dummy",3]],["bool",15]],[[["keytypeid",3]],["bool",15]],[[["cryptotypeid",3]],["bool",15]],[[["cryptotypepublicpair",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["ss58addressformat",4]],["bool",15]],[[]],[[]],[[],["derivejunction",4]],[[]],[[]],[[]],[[]],[[["public",3]]],[[]],[[]],[[["public",3]]],[[]],[[]],[[["u32",15]]],[[]],[[["public",3]]],[[["public",3]]],[[["public",3]]],[[["public",3]]],[[["public",3]]],[[["public",3]]],[[]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[["str",15],["option",4,["str"]]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[]],[[]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],[["result",4,["publicerror"]],["publicerror",4]]],[[["str",15],["option",4,["str"]]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15],["option",4,["str"]]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[]],[[["str",15],["option",4,["str"]]]],[[["str",15],["option",4,["str"]]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["encode",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["usize",15]],[[["derivejunction",4]],["bool",15]],[[["ss58addressformat",4]],["bool",15]],[[["accountid32",3]],["bool",15]],[[["keytypeid",3]],["bool",15]],[[["cryptotypeid",3]],["bool",15]],[[["cryptotypepublicpair",3]],["bool",15]],[[]],[[["accountid32",3]],[["option",4,["ordering"]],["ordering",4]]],[[["keytypeid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cryptotypeid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cryptotypepublicpair",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["ss58addressformat",4]]],[[]],[[]],[[["encode",8]]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],["cryptotypepublicpair",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[["ss58addressformat",4]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],[["result",4,["ss58addressformat"]],["ss58addressformat",4]]],[[],["result",4]],[[["u16",15]],[["ss58addressformat",4],["result",4,["ss58addressformat"]]]],[[["u8",15]],[["ss58addressformat",4],["result",4,["ss58addressformat"]]]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["accountid32"]],["accountid32",3]]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["h256",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["asref",8]],["bool",15]],[[["asref",8]],["bool",15]],[[["asref",8]],["bool",15]],[[["asref",8]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[],["publicerror",4]],[[]],[[],["pair",3]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[["iterator",8],["option",4]],[["result",4,["deriveerror"]],["deriveerror",4]]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["publicerror",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["pair",3]]],[[]],[[]],[[],["signature",3]],[[]],[[]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[],["result",4]],[[]],[[]],[[["str",15],["option",4,["str"]]],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["result",4,["secretstringerror"]],["secretstringerror",4]]],[[]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[],["pair",3]],[[],[["result",4,["pair","secretstringerror"]],["pair",3],["secretstringerror",4]]],[[]],[[]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15],["option",4,["str"]]]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[],["usize",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["public",3]],[[["asref",8]],[["option",4,["public"]],["public",3]]],[[],[["option",4,["public"]],["public",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["signature",3]],[[],["signature",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["asref",8]],["bool",15]],[[["signature",3],["public",3]],["bool",15]],[[["asref",8]],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[]],[[],["localizedsignature",3]],[[],["publicerror",4]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["public",3]],[[]],[[]],[[["iterator",8],["option",4]],[["result",4,["deriveerror"]],["deriveerror",4]]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["bool",15]],[[],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["publicerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["pair",3]]],[[]],[[]],[[]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["h256",3]]],[[["h512",3]],["signature",3]],[[]],[[]],[[["str",15],["option",4,["str"]]],["pair",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pair",3]],[[],[["pair",3],["secretstringerror",4],["result",4,["pair","secretstringerror"]]]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15],["option",4,["str"]]]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[],["usize",15]],[[["public",3]],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["public",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["signature",3]],null,null,[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["h256",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["asref",8]],["bool",15]],[[["asref",8]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],[["default",8],["asmut",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[],["string",3]],[[]],[[]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["duration",3]],["timestamp",3]],[[]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["storagekind",4]],[[],["httprequestid",3]],[[],["httperror",4]],[[],["httprequeststatus",4]],[[],["opaquenetworkstate",3]],[[],["opaquemultiaddr",3]],[[],["timestamp",3]],[[],["duration",3]],[[],["capability",4]],[[],["capabilities",3]],[[],["offchainoverlayedchange",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["httprequestid",3]],["ordering",4]],[[["timestamp",3]],["ordering",4]],[[["duration",3]],["ordering",4]],[[["option",4]],["bool",15]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["opaquenetworkstate",3]],[[],["timestamp",3]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["duration",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["storagekind",4]],["bool",15]],[[["httprequestid",3]],["bool",15]],[[["httperror",4]],["bool",15]],[[["httprequeststatus",4]],["bool",15]],[[["opaquenetworkstate",3]],["bool",15]],[[["opaquemultiaddr",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["capability",4]],["bool",15]],[[["capabilities",3]],["bool",15]],[[["offchainoverlayedchange",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["externalities"]],["externalities",8]]],[[]],[[["dbexternalities",8],["box",3,["dbexternalities"]]]],[[["box",3,["transactionpool"]],["transactionpool",8]]],[[]],[[]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],["u64",15]],[[],["u64",15]],[[["capability",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[["str",15],["httprequestid",3]],["result",4]],[[["str",15],["httprequestid",3]],["result",4]],[[["str",15]],[["result",4,["httprequestid"]],["httprequestid",3]]],[[["str",15]],[["result",4,["httprequestid"]],["httprequestid",3]]],[[["timestamp",3],["option",4,["timestamp"]],["httprequestid",3]],[["httperror",4],["result",4,["httperror"]]]],[[["timestamp",3],["option",4,["timestamp"]],["httprequestid",3]],[["httperror",4],["result",4,["httperror"]]]],[[["httprequestid",3]],["vec",3]],[[["httprequestid",3]],["vec",3]],[[["timestamp",3],["option",4,["timestamp"]],["httprequestid",3]],[["usize",15],["httperror",4],["result",4,["usize","httperror"]]]],[[["timestamp",3],["option",4,["timestamp"]],["httprequestid",3]],[["usize",15],["httperror",4],["result",4,["usize","httperror"]]]],[[["timestamp",3],["option",4,["timestamp"]]],[["vec",3,["httprequeststatus"]],["httprequeststatus",4]]],[[["timestamp",3],["option",4,["timestamp"]]],[["vec",3,["httprequeststatus"]],["httprequeststatus",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["storagekind",4]]],[[["storagekind",4]]],[[["option",4],["storagekind",4]],["bool",15]],[[["option",4],["storagekind",4]],["bool",15]],[[["storagekind",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["storagekind",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["storagekind",4]]],[[["storagekind",4]]],[[],["u64",15]],[[["httprequestid",3]],["bool",15]],[[["httprequeststatus",4]],["bool",15]],[[["opaquenetworkstate",3]],["bool",15]],[[["opaquemultiaddr",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["capabilities",3]],["bool",15]],[[["offchainoverlayedchange",4]],["bool",15]],[[],[["result",4,["opaquenetworkstate"]],["opaquenetworkstate",3]]],[[],[["result",4,["opaquenetworkstate"]],["opaquenetworkstate",3]]],[[["capabilities",3]]],[[["vec",3,["u8"]],["u8",15]]],[[["externalities",8]]],[[["dbexternalities",8]]],[[["transactionpool",8],["send",8]]],[[]],[[["httprequestid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["timestamp",3]],[["option",4,["ordering"]],["ordering",4]]],[[["duration",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[["vec",3,["opaquepeerid"]],["opaquepeerid",3],["bool",15]]],[[["vec",3,["opaquepeerid"]],["opaquepeerid",3],["bool",15]]],[[["timestamp",3]]],[[["timestamp",3]]],null,[[["duration",3]],["timestamp",3]],[[["vec",3,["u8"]],["u8",15]],["result",4]],null,[[],["timestamp",3]],[[],["timestamp",3]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["u32",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["u32",15]],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["private",3]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["inmemoffchainstorage",3]],[[]],[[["option",4]],["bool",15]],[[],["inmemoffchainstorage",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["testpersistentoffchaindb",3]],[[],["testoffchainext",3]],[[]],[[]],[[["option",4]],["bool",15]],[[],["pendingrequest",3]],[[],["testpersistentoffchaindb",3]],[[],["offchainstate",3]],[[],["testoffchainext",3]],[[],["poolstate",3]],[[],["testtransactionpoolext",3]],[[]],[[["pendingrequest",3]],["bool",15]],[[["pendingrequest",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15],["pendingrequest",3]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],null,[[["requestid",3],["str",15]],["result",4]],[[["str",15]],[["requestid",3],["result",4,["requestid"]]]],[[["timestamp",3],["option",4,["timestamp"]],["requestid",3]],[["httperror",4],["result",4,["httperror"]]]],[[["requestid",3]],["vec",3]],[[["timestamp",3],["option",4,["timestamp"]],["requestid",3]],[["usize",15],["httperror",4],["result",4,["usize","httperror"]]]],[[["timestamp",3],["option",4,["timestamp"]]],[["requeststatus",4],["vec",3,["requeststatus"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],null,[[["storagekind",4]]],[[["option",4],["storagekind",4]],["bool",15]],[[["storagekind",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["storagekind",4]]],null,null,[[["pendingrequest",3]],["bool",15]],[[],[["result",4,["opaquenetworkstate"]],["opaquenetworkstate",3]]],[[]],[[]],[[]],null,[[]],null,[[]],null,null,null,null,null,[[]],[[["vec",3,["opaquepeerid"]],["opaquepeerid",3],["bool",15]]],[[["timestamp",3]]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["timestamp",3]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["testpersistentoffchaindb",3]]],null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["externentity",4]],[[],["entry",3]],[[],["environmentdefinition",3]],[[]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],null,null,[[["externentity",4]],["bool",15]],[[["entry",3]],["bool",15]],[[["environmentdefinition",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,[[["externentity",4]],["bool",15]],[[["entry",3]],["bool",15]],[[["environmentdefinition",3]],["bool",15]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",4],["result",4,["error"]]]],[[],[["error",4],["result",4,["error"]]]],[[],["keypair",3]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["public",3]],[[]],[[],["localizedsignature",3]],[[]],[[]],[[]],[[]],[[["public",3]],["ordering",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["public",3]],[[]],[[]],[[["iterator",8],["option",4]],["result",4]],[[["iterator",8]],[["public",3],["option",4,["public"]]]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["public",3]],["bool",15]],[[],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["secretkey",3]],["pair",3]],[[["minisecretkey",3]],["pair",3]],[[["keypair",3]],["pair",3]],[[]],[[]],[[["signature",3]],["signature",3]],[[]],[[["str",15],["option",4,["str"]]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["h256",3]]],[[["h512",3]],["signature",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["option",4,["str"]]],[["secretstringerror",4],["result",4,["secretstringerror"]]]],[[]],[[],["signature",3]],[[]],[[]],[[]],[[]],[[],["pair",3]],[[],[["secretstringerror",4],["result",4,["pair","secretstringerror"]],["pair",3]]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15]],[["publicerror",4],["result",4,["publicerror"]]]],[[["str",15],["option",4,["str"]]]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[],["usize",15]],[[["public",3]],["bool",15]],[[["localizedsignature",3]],["bool",15]],[[["public",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["public",3]],[[],["result",4]],[[],["result",4]],[[],["signature",3]],null,null,[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[],["cryptotypepublicpair",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["h256",3]]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["asref",8]],["bool",15]],[[["vec",3,["public"]],["public",3],["vec",3],["signature",3],["vec",3,["signature"]]],["bool",15]],[[["asref",8],["public",3],["signature",3]],["bool",15]],[[["asref",8]],["bool",15]],[[]],[[]],[[]],[[]],null,null,null,null,[[["private",3]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["taskexecutor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[["boxfuture",6],["str",15]]],[[["boxfuture",6],["str",15]]],[[["boxfuture",6],["str",15]]],[[["boxfuture",6],["str",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["runtimecode",3],["option",4],["fnonce",8],["str",15],["unwindsafe",8],["bool",15],["externalities",8]]],[[["childinfo",4]],[["vec",3,["u8","global"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8","global"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[["u32",15],["option",4,["u32"]],["childinfo",4]]],[[["childinfo",4]]],[[["option",4,["u32"]],["u32",15]]],[[]],[[],["runtimecode",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[],["bool",15]],[[["childinfo",4]],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],[["cow",4],["option",4,["cow"]]]],[[],[["cow",4],["option",4,["cow"]]]],[[],[["cow",4],["option",4,["cow"]]]],[[],[["cow",4],["option",4,["cow"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[["readruntimeversion",8],["box",3,["readruntimeversion"]]]],[[]],[[["box",3,["spawnnamed"]],["spawnnamed",8]]],[[]],[[["runtimespawn",8],["box",3,["runtimespawn"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["global"]],["global",3]]],[[],[["trackedstoragekey",3],["global",3],["vec",3,["trackedstoragekey","global"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["u64",15]],[["vec",3,["u8"]],["u8",15]]],[[["u32",15],["option",4,["u32"]],["childinfo",4]]],[[["readruntimeversion",8]]],[[]],[[["childinfo",4]],[["vec",3,["u8","global"]],["option",4,["vec"]]]],[[],[["vec",3,["u8","global"]],["option",4,["vec"]]]],[[["option",4,["vec"]],["u8",15],["vec",3,["u8","global"]],["global",3],["childinfo",4]]],[[["u8",15],["vec",3,["u8","global"]],["global",3],["option",4,["vec"]]]],[[],[["option",4,["u32"]],["u32",15]]],[[["externalities",8]],[["vec",3,["u8"]],["result",4,["vec","string"]],["string",3]]],[[]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[]],[[["u8",15],["vec",3,["u8","global"]],["global",3],["childinfo",4]]],[[["option",4]]],[[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[["vec",3,["trackedstoragekey","global"]],["global",3],["trackedstoragekey",3]]],[[["boxfuture",6],["str",15]]],[[["boxfuture",6],["str",15]]],[[["vec",3,["u8"]],["u8",15],["u32",15]],["u64",15]],[[["boxfuture",6],["str",15]]],[[["boxfuture",6],["str",15]]],[[],[["vec",3,["u8","global"]],["option",4,["vec"]]]],[[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["result",4,["option"]],["option",4,["vec"]]]],[[],["result",4]],[[],[["vec",3,["u8","global"]],["option",4,["vec"]]]],[[["u32",15]]],[[["u32",15]]],[[],["result",4]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["anybox",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeidnull,null,null,null],"p":[[3,"Bytes"],[3,"OpaquePeerId"],[3,"U256"],[3,"U512"],[3,"H160"],[3,"H256"],[3,"H512"],[4,"ExecutionContext"],[4,"LogLevel"],[4,"LogLevelFilter"],[4,"NativeOrEncoded"],[8,"Hasher"],[8,"TypeId"],[3,"ChangesTrieConfiguration"],[3,"ChangesTrieConfigurationRange"],[4,"Void"],[3,"Blake2Hasher"],[3,"KeccakHasher"],[3,"OpaqueMetadata"],[4,"NeverNativeValue"],[3,"KeyTypeId"],[3,"CryptoTypeId"],[3,"CryptoTypePublicPair"],[4,"Ss58AddressFormat"],[4,"PublicError"],[8,"Pair"],[4,"DeriveJunction"],[8,"Wraps"],[4,"SecretStringError"],[8,"CryptoType"],[3,"ParseError"],[3,"AccountId32"],[3,"Dummy"],[4,"Infallible"],[8,"Public"],[8,"Derive"],[8,"ExposeSecret"],[8,"Ss58Codec"],[8,"IsWrappedBy"],[8,"UncheckedFrom"],[8,"UncheckedInto"],[8,"Zeroize"],[3,"Public"],[3,"Signature"],[4,"PublicError"],[4,"DeriveError"],[3,"Pair"],[3,"Public"],[3,"Signature"],[4,"PublicError"],[4,"DeriveError"],[3,"Pair"],[3,"LocalizedSignature"],[3,"HexDisplay"],[8,"AsBytesRef"],[3,"HttpRequestId"],[3,"OpaqueMultiaddr"],[3,"OffchainWorkerExt"],[3,"OffchainDbExt"],[3,"TransactionPoolExt"],[4,"HttpError"],[4,"HttpRequestStatus"],[4,"Capability"],[4,"StorageKind"],[4,"OffchainOverlayedChange"],[3,"OpaqueNetworkState"],[3,"Timestamp"],[3,"Duration"],[3,"Capabilities"],[3,"LimitedExternalities"],[8,"OffchainStorage"],[8,"Externalities"],[8,"DbExternalities"],[8,"TransactionPool"],[3,"InMemOffchainStorage"],[3,"TestOffchainExt"],[3,"TestPersistentOffchainDB"],[3,"PendingRequest"],[3,"OffchainState"],[3,"PoolState"],[3,"TestTransactionPoolExt"],[4,"ExternEntity"],[3,"Entry"],[3,"EnvironmentDefinition"],[3,"HostError"],[3,"Public"],[3,"Signature"],[3,"Pair"],[3,"LocalizedSignature"],[3,"TaskExecutor"],[3,"WrappedRuntimeCode"],[3,"ReadRuntimeVersionExt"],[3,"TaskExecutorExt"],[3,"RuntimeSpawnExt"],[8,"CodeExecutor"],[3,"RuntimeCode"],[3,"NoneFetchRuntimeCode"],[3,"CodeNotFound"],[8,"Externalities"],[8,"ExternalitiesExt"],[8,"FetchRuntimeCode"],[8,"RuntimeSpawn"],[8,"ReadRuntimeVersion"],[8,"SpawnNamed"],[8,"SpawnEssentialNamed"],[8,"Value"],[3,"_0"],[3,"_1"],[3,"_2"],[3,"_3"],[3,"_4"],[3,"_5"],[3,"_6"],[3,"_7"],[3,"_8"],[3,"_9"],[3,"_10"],[3,"_11"],[3,"_12"],[3,"_13"],[3,"_14"],[3,"_15"],[3,"_16"],[3,"_17"],[3,"_18"],[3,"_19"],[3,"_20"],[3,"_21"],[3,"_22"],[3,"_23"],[3,"_24"],[3,"_25"],[3,"_26"],[3,"_27"],[3,"_28"],[3,"_29"],[3,"_30"],[3,"_31"],[3,"_32"],[3,"_33"],[3,"_34"],[3,"_35"],[3,"_36"],[3,"_37"],[3,"_38"],[3,"_39"],[3,"_40"],[3,"_41"],[3,"_42"],[3,"_43"],[3,"_44"],[3,"_45"],[3,"_46"],[3,"_47"],[3,"_48"],[3,"_49"],[3,"_50"],[3,"_51"],[3,"_52"],[3,"_53"],[3,"_54"],[3,"_55"],[3,"_56"],[3,"_57"],[3,"_58"],[3,"_59"],[3,"_60"],[3,"_61"],[3,"_62"],[3,"_63"],[3,"_64"],[3,"_65"],[3,"_66"],[3,"_67"],[3,"_68"],[3,"_69"],[3,"_70"],[3,"_71"],[3,"_72"],[3,"_73"],[3,"_74"],[3,"_75"],[3,"_76"],[3,"_77"],[3,"_78"],[3,"_79"],[3,"_80"],[3,"_81"],[3,"_82"],[3,"_83"],[3,"_84"],[3,"_85"],[3,"_86"],[3,"_87"],[3,"_88"],[3,"_89"],[3,"_90"],[3,"_91"],[3,"_92"],[3,"_93"],[3,"_94"],[3,"_95"],[3,"_96"],[3,"_97"],[3,"_98"],[3,"_99"],[3,"_100"],[3,"_112"],[3,"_128"],[3,"_160"],[3,"_192"],[3,"_224"],[3,"_256"],[3,"_384"],[3,"_512"]]},\
"sp_database":{"doc":"The main database trait, allowing Substrate to store data …","t":[12,4,6,8,3,13,13,13,13,13,3,5,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,3,6,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Change","ColumnId","Database","MemDb","Reference","Release","Remove","Set","Store","Transaction","as_database","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commit","commit","contains","count","default","default","error","fmt","from","from","from","get","get","into","into","into","new","new","reference","release","remove","set","set_from_vec","store","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_size","vzip","vzip","vzip","with_get","with_get","0","DatabaseError","Result","borrow","borrow_mut","fmt","fmt","from","into","source","to_string","try_from","try_into","type_id","vzip"],"q":["sp_database","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_database::error","","","","","","","","","","","","","",""],"d":["","An alteration to the database.","An identifier for a column.","","This implements <code>Database</code> as an in-memory hash map. <code>commit</code> …","","","","","","A series of changes to the database that can be committed …","Wrap RocksDb database into a trait object that implements …","","","","","","","","","","","Commit the <code>transaction</code> to the database atomically. Any …","","Check if the value exists in the database without …","Count number of values in a column","","","","","","","","Retrieve the value previously stored against <code>key</code> or <code>None</code> …","","","","","Create a new instance","Create a new transaction to be prepared and committed …","Increase the number of references for <code>hash</code> in the …","Release the preimage of <code>hash</code> from the database. An equal …","Remove the value of <code>key</code> in <code>col</code>.","Set the value of <code>key</code> in <code>col</code> to <code>value</code>, replacing anything …","Set the value of <code>key</code> in <code>col</code> to <code>value</code>, replacing anything …","Store the <code>preimage</code> of <code>hash</code> into the database, so that it …","","","","","","","","","","","","Check value size in the database possibly without …","","","","Call <code>f</code> with the value previously stored against <code>key</code> and …","Call <code>f</code> with the value previously stored against <code>key</code>.","","The error type for database operations.","A specialized <code>Result</code> type for database operations.","","","","","","","","","","","",""],"i":[1,0,0,0,0,2,2,2,2,2,0,0,3,2,1,3,2,1,2,1,2,1,4,3,4,3,3,1,0,4,3,2,1,4,3,3,2,1,3,1,1,1,1,1,1,1,2,1,3,2,1,3,2,1,3,2,1,4,3,2,1,0,4,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],[["arc",3,["database"]],["database",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["change",4]],[[],["transaction",3]],[[]],[[]],[[["transaction",3]],["result",6]],[[["transaction",3]],["result",6]],[[["columnid",6]],["bool",15]],[[["columnid",6]],["usize",15]],[[],["memdb",3]],[[],["transaction",3]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["columnid",6]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["columnid",6]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[]],[[]],[[]],[[]],[[]],[[["columnid",6]]],[[["columnid",6]]],[[["columnid",6]]],[[["columnid",6]]],[[["u8",15],["vec",3,["u8"]],["columnid",6]]],[[["vec",3,["u8"]],["u8",15],["columnid",6]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["columnid",6]],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[["columnid",6],["database",8]],["option",4]],[[["fnmut",8],["columnid",6]]],null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"Transaction"],[4,"Change"],[3,"MemDb"],[8,"Database"],[3,"DatabaseError"]]},\
"sp_debug_derive":{"doc":"Macros to derive runtime debug implementation.","t":[24],"n":["RuntimeDebug"],"q":["sp_debug_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"sp_externalities":{"doc":"Substrate externalities abstraction","t":[4,8,13,13,8,3,13,8,8,13,10,11,11,11,11,10,10,10,10,11,10,11,10,14,11,11,10,11,10,11,11,10,11,10,11,11,11,11,11,10,10,11,11,11,10,11,10,10,10,10,11,10,11,10,11,10,11,10,5,11,10,11,10,10,10,10,10,10,11,11,10,10,10,11,11,11,11,11,11,10,5],"n":["Error","Extension","ExtensionAlreadyRegistered","ExtensionIsNotRegistered","ExtensionStore","Extensions","ExtensionsAreNotSupported","Externalities","ExternalitiesExt","StorageUpdateFailed","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","child_storage","child_storage_hash","child_storage_root","clear_child_prefix","clear_child_storage","clear_prefix","clear_storage","commit","decl_extension","default","deregister","deregister_extension","deregister_extension","deregister_extension_by_type_id","exists_child_storage","exists_storage","extension","extension","extension_by_type_id","fmt","fmt","from","from","get_mut","get_read_and_written_keys","get_whitelist","into","into","iter_mut","kill_child_storage","new","next_child_storage_key","next_storage_key","place_child_storage","place_storage","proof_size","read_write_count","register","register_extension","register_extension","register_extension_with_type_id","register_with_type_id","reset_read_write_count","set_and_run_with_externalities","set_child_storage","set_offchain_storage","set_storage","set_whitelist","storage","storage_append","storage_changes_root","storage_commit_transaction","storage_hash","storage_index_transaction","storage_renew_transaction_index","storage_rollback_transaction","storage_root","storage_start_transaction","try_from","try_from","try_into","try_into","type_id","type_id","wipe","with_externalities"],"q":["sp_externalities","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Externalities error.","Marker trait for types that should be registered as …","Same extension cannot be registered twice.","Extension <code>TypeId</code> is not registered.","Something that provides access to the <code>Extensions</code> store.","Stores extensions that should be made available through …","Extensions are not supported.","The Substrate externalities.","Extension for the <code>Externalities</code> trait.","Failed to update storage,","Return the extension as <code>&mut dyn Any</code>.","","","","","Read child runtime storage.","Get child storage value hash.","Get the trie root of a child storage map.","Clear child storage entries which keys are start with the …","Clear a child storage entry (<code>key</code>) of current contract …","Clear storage entries which keys are start with the given …","Clear a storage entry (<code>key</code>) of current contract being …","…","Macro for declaring an extension that usable with …","","Deregister extension for the given <code>type_id</code>.","Deregister and drop extension of <code>T</code> type.","","Deregister extension with speicifed ‘type_id’ and …","Whether a child storage entry exists.","Whether a storage entry exists.","Tries to find a registered extension and returns a …","","Tries to find a registered extension by the given <code>type_id</code> …","","","","","Return a mutable reference to the requested extension.","…","…","","","Returns a mutable iterator over all extensions.","Clear an entire child storage.","Create new instance of <code>Self</code>.","Returns the key immediately following the given key, if …","Returns the key immediately following the given key, if …","Set or clear a child storage entry.","Set or clear a storage entry (<code>key</code>) of current contract …","…","…","Register the given extension.","Register extension <code>ext</code>.","","Register extension <code>extension</code> with specified <code>type_id</code>.","Register extension <code>extension</code> using the given <code>type_id</code>.","…","Set the given externalities while executing the given …","Set child storage entry <code>key</code> of current contract being …","Write a key value pair to the offchain storage database.","Set storage entry <code>key</code> of current contract being called …","…","Read runtime storage.","Append storage item.","Get the changes trie root of the current storage overlay …","Commit the last transaction started by …","Get storage value hash.","Index specified transaction slice and store it.","Renew existing piece of transaction storage.","Rollback the last transaction started by …","Get the trie root of the current storage map.","Start a new nested transaction.","","","","","","","…","Execute the given closure with the currently set …"],"i":[0,0,1,1,0,0,1,0,0,1,2,3,1,3,1,4,4,4,4,4,4,4,4,0,3,3,5,4,6,4,4,5,4,6,3,1,3,1,3,4,4,3,1,3,4,3,4,4,4,4,4,4,3,5,4,6,3,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,1,3,1,3,1,4,0],"f":[null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[]],[[]],[[]],[[]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["u8",15]]],[[["u32",15],["childinfo",4],["option",4,["u32"]]]],[[["childinfo",4]]],[[["option",4,["u32"]],["u32",15]]],[[]],[[]],null,[[],["extensions",3]],[[["typeid",3]],["bool",15]],[[],[["result",4,["error"]],["error",4]]],[[],[["result",4,["error"]],["error",4]]],[[["typeid",3]],[["result",4,["error"]],["error",4]]],[[["childinfo",4]],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[],["vec",3]],[[],[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[]],[[]],[[]],[[["childinfo",4],["option",4,["u32"]],["u32",15]]],[[]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["u8",15],["option",4,["vec"]],["childinfo",4],["vec",3,["u8"]]]],[[["vec",3,["u8"]],["u8",15],["option",4,["vec"]]]],[[],[["option",4,["u32"]],["u32",15]]],[[]],[[["extension",8]]],[[["extension",8]],[["result",4,["error"]],["error",4]]],[[["extension",8]],[["result",4,["error"]],["error",4]]],[[["extension",8],["typeid",3],["box",3,["extension"]]],[["result",4,["error"]],["error",4]]],[[["extension",8],["typeid",3],["box",3,["extension"]]],[["result",4,["error"]],["error",4]]],[[]],[[["externalities",8]]],[[["u8",15],["childinfo",4],["vec",3,["u8"]]]],[[["option",4]]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["vec",3,["u8"]],["u8",15]]],[[],[["result",4,["option"]],["option",4,["vec"]]]],[[],["result",4]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["u32",15]]],[[["u32",15]]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["fnonce",8]],["option",4]]],"p":[[4,"Error"],[8,"Extension"],[3,"Extensions"],[8,"Externalities"],[8,"ExternalitiesExt"],[8,"ExtensionStore"]]},\
"sp_io":{"doc":"I/O host interface for substrate runtime.","t":[12,13,13,13,13,3,4,4,13,6,6,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,11,3,11,11,11,11,5,5,5,11,11,11,5,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,3,11,11,5,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,5,5,5,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,3,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,11,11,11,11,5,5,5,5,5,11,11,11,5,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,3,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","AllRemoved","BadRS","BadSignature","BadV","Crossing","EcdsaVerifyError","KillStorageResult","SomeRemaining","SubstrateHostFunctions","TestExternalities","VerificationExt","allocator","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","crypto","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default_child_storage","deref","deref_mut","encode","encode_to","encode_to","encode_to","from","from","from","from","from_ffi_value","from_ffi_value","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","hashing","init_tracing","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_inner","logging","misc","offchain","offchain_index","runtime_tasks","sandbox","storage","to_keyed_vec","to_keyed_vec","to_keyed_vec","transaction_index","trie","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","vzip","vzip","vzip","vzip","wasm_tracing","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","ecdsa_batch_verify","ecdsa_generate","ecdsa_public_keys","ecdsa_sign","ecdsa_verify","ed25519_batch_verify","ed25519_generate","ed25519_public_keys","ed25519_sign","ed25519_verify","finish_batch_verify","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","secp256k1_ecdsa_recover","secp256k1_ecdsa_recover_compressed","sr25519_batch_verify","sr25519_generate","sr25519_public_keys","sr25519_sign","sr25519_verify","start_batch_verify","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","clear","clear_prefix","exists","from","from_mut","from_ref","get","host_functions","into","into_any","into_any_arc","into_any_rc","next_key","read","root","set","storage_kill","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","blake2_128","blake2_256","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","keccak_256","keccak_512","sha2_256","try_from","try_into","twox_128","twox_256","twox_64","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","log","max_level","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","print_hex","print_num","print_utf8","runtime_version","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","http_request_add_header","http_request_start","http_request_write_body","http_response_headers","http_response_read_body","http_response_wait","into","into_any","into_any_arc","into_any_rc","is_validator","local_storage_clear","local_storage_compare_and_set","local_storage_get","local_storage_set","network_state","random_seed","set_authorized_nodes","sleep_until","submit_transaction","timestamp","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","clear","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","set","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","append","as_any","as_any_mut","borrow","borrow_mut","changes_root","clear","clear_prefix","commit_transaction","exists","from","from_mut","from_ref","get","host_functions","into","into_any","into_any_arc","into_any_rc","next_key","read","rollback_transaction","root","set","start_transaction","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","index","into","into_any","into_any_arc","into_any_rc","renew","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","blake2_256_ordered_root","blake2_256_root","blake2_256_verify_proof","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","keccak_256_ordered_root","keccak_256_root","keccak_256_verify_proof","try_from","try_into","type_id","unchecked_into","vzip","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","try_from","try_into","type_id","unchecked_into","vzip"],"q":["sp_io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_io::allocator","","","","","","","","","","","","","","","","","","sp_io::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_io::default_child_storage","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_io::hashing","","","","","","","","","","","","","","","","","","","","","","","","","","sp_io::logging","","","","","","","","","","","","","","","","","","","","sp_io::misc","","","","","","","","","","","","","","","","","","","","","","sp_io::offchain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_io::offchain_index","","","","","","","","","","","","","","","","","","","","sp_io::runtime_tasks","","","","","","","","","","","","","","","","","","sp_io::sandbox","","","","","","","","","","","","","","","","","","sp_io::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_io::transaction_index","","","","","","","","","","","","","","","","","","","","sp_io::trie","","","","","","","","","","","","","","","","","","","","","","","","sp_io::wasm_tracing","","","","","","","","","","","","","","","","",""],"d":["","No key remains in the child trie.","Incorrect value of R or S","Invalid signature","Incorrect value of V","Crossing is a helper wrapping any Encode-Decodeable type …","Error verifying ECDSA signature","The outcome of calling <code>storage_kill</code>. Returned value is …","At least one key still resides in the child trie due to …","The host functions Substrate provides for the Wasm …","Type alias for Externalities implementation used in tests.","Batch verification extension to register/retrieve from …","Wasm only interface that provides functions for calling …","","","","","","","","","","","","","","","","","","Interfaces for working with crypto related types from …","","","","","","","","","","","","","","Interface for accessing the child storage for default …","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Interface that provides functions for hashing with …","Initialize tracing of sp_tracing not necessary – noop. …","","","","","","","","","","","","","","","","","","","Convert into the inner type","Interface that provides functions for logging from within …","Interface that provides miscellaneous functions for …","Interface that provides functions to access the offchain …","Interface that provides functions to access the Offchain …","Wasm host functions for managing tasks.","Wasm-only interface that provides functions for …","Interface for accessing the storage from within the …","","","","Interface that provides transaction indexing API.","Interface that provides trie related functionality.","","","","","","","","","","","","","","","","","","","","","","Interface to provide tracing facilities for wasm. …","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","Provides implementations for the extern host functions.","","","","","Register a <code>ecdsa</code> signature for batch verification.","Generate an <code>ecdsa</code> key for the given key type using an …","Returns all <code>ecdsa</code> public keys for the given key id from …","Sign the given <code>msg</code> with the <code>ecdsa</code> key that corresponds to …","Verify <code>ecdsa</code> signature.","Register a <code>ed25519</code> signature for batch verification.","Generate an <code>ed22519</code> key for the given key type using an …","Returns all <code>ed25519</code> public keys for the given key id from …","Sign the given <code>msg</code> with the <code>ed25519</code> key that corresponds …","Verify <code>ed25519</code> signature.","Finish batch-verification of signatures.","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","Verify and recover a SECP256k1 ECDSA signature.","Verify and recover a SECP256k1 ECDSA signature.","Register a <code>sr25519</code> signature for batch verification.","Generate an <code>sr22519</code> key for the given key type using an …","Returns all <code>sr25519</code> public keys for the given key id from …","Sign the given <code>msg</code> with the <code>sr25519</code> key that corresponds …","Verify <code>sr25519</code> signature.","Start verification extension.","","","","","","Provides implementations for the extern host functions.","","","","","Clear a child storage key.","Clear the child storage of each key-value pair where the …","Check a child storage key.","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a default child storage value for a given key.","","","","","","Child storage key iteration.","Allocation efficient variant of <code>get</code>.","Default child root calculation.","Set a child storage value.","Clear a child storage key.","","","","","","Provides implementations for the extern host functions.","","","Conduct a 128-bit Blake2 hash.","Conduct a 256-bit Blake2 hash.","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","Conduct a 256-bit Keccak hash.","Conduct a 512-bit Keccak hash.","Conduct a 256-bit Sha2 hash.","","","Conduct two XX hashes to give a 128-bit result.","Conduct four XX hashes to give a 256-bit result.","Conduct two XX hashes to give a 64-bit result.","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","Request to print a log message on the host.","Returns the max log level used by the host.","","","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","Print any <code>u8</code> slice as hex.","Print a number.","Print any valid <code>utf8</code> buffer.","Extract the runtime version of the given wasm blob by …","","","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","Append header to the request.","Initiates a http request given HTTP verb and the URL.","Write a chunk of request body.","Read all response headers.","Read a chunk of body response to given buffer.","Block and wait for the responses for given requests.","","","","","Returns if the local node is a potential validator.","Remove a value from the local storage.","Sets a value in the local storage if it matches current …","Gets a value from the local storage.","Sets a value in the local storage.","Returns information about the local node’s network …","Returns a random seed.","Set the authorized nodes and authorized_only flag.","Pause the execution until <code>deadline</code> is reached.","Submit an encoded transaction to the pool.","Returns current UNIX timestamp (in millis)","","","","","","Provides implementations for the extern host functions.","","","","","Remove a key and its associated value from the Offchain …","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","Write a key value pair to the Offchain DB database in a …","","","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","Provides implementations for the extern host functions.","Append the encoded <code>value</code> to the storage item at <code>key</code>.","","","","","“Commit” all existing operations and get the …","Clear the storage of the given <code>key</code> and its value.","Clear the storage of each key-value pair where the key …","Commit the last transaction started by <code>start_transaction</code>.","Check whether the given <code>key</code> exists in storage.","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Returns the data for <code>key</code> in the storage or <code>None</code> if the …","","","","","","Get the next key in storage after the given one in …","Get <code>key</code> from storage, placing the value into <code>value_out</code> …","Rollback the last transaction started by <code>start_transaction</code>…","“Commit” all existing operations and compute the …","Set <code>key</code> to <code>value</code> in the storage.","Start a new nested transaction.","","","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","Add transaction index. Returns indexed content hash.","","","","","Conduct a 512-bit Keccak hash.","","","","","","Provides implementations for the extern host functions.","","","A trie root formed from the enumerated items.","A trie root formed from the iterated items.","Verify trie proof","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","A trie root formed from the enumerated items.","A trie root formed from the iterated items.","Verify trie proof","","","","","","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","",""],"i":[1,2,3,3,3,0,0,0,2,0,0,0,0,3,2,1,4,3,2,1,4,1,3,2,1,4,3,2,1,4,0,3,2,4,3,2,4,3,2,4,3,2,4,4,0,1,1,4,3,2,4,3,2,1,4,2,4,3,2,1,4,3,2,1,4,0,0,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,2,4,4,0,0,0,0,0,0,0,3,2,4,0,0,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,4,3,2,1,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,0,7,7,7,7,0,0,0,7,7,7,0,7,7,7,7,7,0,0,0,0,0,7,7,7,7,7,0,8,8,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,8,8,0,0,0,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,10,10,10,10,10,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,0,12,12,12,12,0,12,12,12,12,12,12,12,12,0,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,15,15,15,15,0,0,0,0,0,15,15,15,0,15,15,15,15,15,0,0,0,0,0,0,15,15,15,15,15,0,16,16,16,16,16,16,16,16,0,16,16,16,16,0,16,16,16,16,16,0,17,17,0,0,0,17,17,17,17,17,17,17,17,17,17,0,0,0,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[]],null,[[]],[[]],[[],[["u8",15],["vec",3,["u8"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],null,null,null,null,null,null,null,[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["public",3],["signature",3]],["bool",15]],[[["vec",3,["u8"]],["option",4,["vec"]],["keytypeid",3]],["public",3]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["public",3],["keytypeid",3]],[["signature",3],["option",4,["signature"]]]],[[["public",3],["signature",3]],["bool",15]],[[["signature",3],["public",3]],["bool",15]],[[["vec",3,["u8"]],["option",4,["vec"]],["keytypeid",3]],["public",3]],[[["keytypeid",3]],[["vec",3,["public"]],["public",3]]],[[["public",3],["keytypeid",3]],[["option",4,["signature"]],["signature",3]]],[[["signature",3],["public",3]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["result",4,["ecdsaverifyerror"]],["ecdsaverifyerror",4]]],[[],[["result",4,["ecdsaverifyerror"]],["ecdsaverifyerror",4]]],[[["public",3],["signature",3]],["bool",15]],[[["vec",3,["u8"]],["option",4,["vec"]],["keytypeid",3]],["public",3]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["public",3],["keytypeid",3]],[["signature",3],["option",4,["signature"]]]],[[["public",3],["signature",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[["option",4,["u32"]],["u32",15]],["killstorageresult",4]],[[],["bool",15]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["u32",15]],[["option",4,["u32"]],["u32",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[["option",4,["u32"]],["u32",15]],["killstorageresult",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["loglevel",4],["str",15]]],[[],["loglevelfilter",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[["u64",15]]],[[]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[["httprequestid",3],["str",15]],["result",4]],[[["str",15]],[["result",4,["httprequestid"]],["httprequestid",3]]],[[["httprequestid",3],["option",4,["timestamp"]],["timestamp",3]],[["httperror",4],["result",4,["httperror"]]]],[[["httprequestid",3]],["vec",3]],[[["httprequestid",3],["option",4,["timestamp"]],["timestamp",3]],[["result",4,["u32","httperror"]],["u32",15],["httperror",4]]],[[["option",4,["timestamp"]],["timestamp",3]],[["httprequeststatus",4],["vec",3,["httprequeststatus"]]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["bool",15]],[[["storagekind",4]]],[[["option",4,["vec"]],["vec",3,["u8"]],["storagekind",4]],["bool",15]],[[["storagekind",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["storagekind",4]]],[[],[["opaquenetworkstate",3],["result",4,["opaquenetworkstate"]]]],[[]],[[["bool",15],["opaquepeerid",3],["vec",3,["opaquepeerid"]]]],[[["timestamp",3]]],[[["vec",3,["u8"]],["u8",15]],["result",4]],[[],["timestamp",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[["vec",3,["u8"]],["u8",15]]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[]],[[["option",4,["u32"]],["u32",15]],["killstorageresult",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["u32",15]],[["option",4,["u32"]],["u32",15]]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[["u32",15]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[["vec",3,["u8"]],["vec",3,["vec"]]],["h256",3]],[[["vec",3]],["h256",3]],[[["h256",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["vec",3,["u8"]],["vec",3,["vec"]]],["h256",3]],[[["vec",3]],["h256",3]],[[["h256",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"VerificationExt"],[4,"KillStorageResult"],[4,"EcdsaVerifyError"],[3,"Crossing"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"]]},\
"sp_keystore":{"doc":"Keystore traits","t":[12,8,4,13,3,13,8,6,13,13,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,0,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","CryptoStore","Error","KeyNotSupported","KeystoreExt","Other","SyncCryptoStore","SyncCryptoStorePtr","Unavailable","ValidationError","as_any","as_any","as_any_mut","as_any_mut","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","ecdsa_generate_new","ecdsa_generate_new","ecdsa_public_keys","ecdsa_public_keys","ecdsa_sign_prehashed","ecdsa_sign_prehashed","ed25519_generate_new","ed25519_generate_new","ed25519_public_keys","ed25519_public_keys","fmt","fmt","from","from","from","from_mut","from_mut","from_ref","from_ref","has_keys","has_keys","insert_unknown","insert_unknown","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","keys","keys","sign_with","sign_with","sign_with_all","sign_with_all","sign_with_any","sign_with_any","sr25519_generate_new","sr25519_generate_new","sr25519_public_keys","sr25519_public_keys","sr25519_vrf_sign","sr25519_vrf_sign","supported_keys","supported_keys","testing","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vrf","vzip","vzip","KeyStore","as_any","as_any_mut","borrow","borrow_mut","default","ecdsa_generate_new","ecdsa_generate_new","ecdsa_public_keys","ecdsa_public_keys","ecdsa_sign_prehashed","ecdsa_sign_prehashed","ed25519_generate_new","ed25519_generate_new","ed25519_public_keys","ed25519_public_keys","from","from_mut","from_ref","has_keys","has_keys","insert_unknown","insert_unknown","into","into","into","into_any","into_any_arc","into_any_rc","keys","keys","new","sign_with","sign_with","sr25519_generate_new","sr25519_generate_new","sr25519_public_keys","sr25519_public_keys","sr25519_vrf_sign","sr25519_vrf_sign","supported_keys","supported_keys","try_from","try_into","type_id","unchecked_into","vzip","Bytes","U64","VRFSignature","VRFTranscriptData","VRFTranscriptValue","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","encode_to","encode_to","from","from","from","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","items","label","make_transcript","output","proof","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","vzip","vzip","vzip"],"q":["sp_keystore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_keystore::testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_keystore::vrf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Something that generates, stores and provides access to …","CryptoStore error","Public key type is not supported","The keystore extension to register/retrieve from the …","Programming errors","Sync version of the CryptoStore","A pointer to a keystore.","Keystore unavailable","Validation error","","","","","","","","","","","","Generate a new ecdsa key pair for the given key type and …","Generate a new ecdsa key pair for the given key type and …","Returns all ecdsa public keys for the given key type.","Returns all ecdsa public keys for the given key type.","Generate an ECDSA signature for a given pre-hashed …","Generate an ECDSA signature for a given pre-hashed …","Generate a new ed25519 key pair for the given key type …","Generate a new ed25519 key pair for the given key type …","Returns all ed25519 public keys for the given key type.","Returns all ed25519 public keys for the given key type.","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Checks if the private keys for the given public key and …","Checks if the private keys for the given public key and …","Insert a new key. This doesn’t require any known of the …","Insert a new key. This doesn’t require any known of the …","","","","","","","","","List all supported keys","List all supported keys","Sign with key","Sign with key","Sign with all keys","Sign with all keys","Sign with any key","Sign with any key","Generate a new sr25519 key pair for the given key type …","Generate a new sr25519 key pair for the given key type …","Returns all sr25519 public keys for the given key type.","Returns all sr25519 public keys for the given key type.","Generate VRF signature for given transcript data.","Generate VRF signature for given transcript data.","Find intersection between provided keys and supported keys","Find intersection between provided keys and supported keys","Types that should only be used for testing!","","","","","","","","","","VRF-specifc data types and helpers","","","A keystore implementation usable in tests.","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","Creates a new instance of <code>Self</code>.","","","","","","","","","","","","","","","","Value is an array of bytes","Value is a u64 integer","VRF signature data","VRF Transcript data","An enum whose variants represent possible accepted values …","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","Additional data to be registered into the transcript","The transcript’s label","Construct a <code>Transcript</code> object from data.","The VRFOutput serialized","The calculated VRFProof","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,2,0,2,0,0,2,2,2,1,2,1,1,2,1,2,1,1,1,3,4,3,4,3,4,3,4,3,4,2,2,2,1,1,2,1,2,1,3,4,3,4,2,1,2,1,2,1,2,1,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,2,2,1,2,1,2,1,2,1,0,2,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,0,0,0,6,7,8,6,7,8,6,7,8,6,7,8,6,7,6,7,6,7,6,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,7,7,0,8,8,6,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7],"f":[null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["result",4,["public","error"]],["public",3],["error",4]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3],["public",3]],[["option",4,["signature"]],["result",4,["option","error"]],["error",4]]],[[["keytypeid",3],["public",3]],[["box",3,["future"]],["pin",3,["box"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["error",4],["result",4,["public","error"]],["public",3]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["box",3,["future"]],["pin",3,["box"]]]],[[["keytypeid",3]],[["vec",3,["public"]],["public",3]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["synccryptostoreptr",6]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["box",3,["future"]],["pin",3,["box"]]]],[[["str",15],["keytypeid",3]],["result",4]],[[["str",15],["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[]],[[["global",3],["box",3,["global"]]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["global",3],["box",3,["global"]]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["result",4,["vec","error"]],["vec",3,["cryptotypepublicpair"]],["error",4]]],[[["keytypeid",3],["cryptotypepublicpair",3]],[["result",4,["option","error"]],["error",4],["option",4,["vec"]]]],[[["keytypeid",3],["cryptotypepublicpair",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["cryptotypepublicpair",3],["keytypeid",3],["vec",3,["cryptotypepublicpair"]]],[["vec",3,["result"]],["result",4,["vec"]]]],[[["cryptotypepublicpair",3],["keytypeid",3],["vec",3,["cryptotypepublicpair"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["cryptotypepublicpair",3],["keytypeid",3],["vec",3,["cryptotypepublicpair"]]],[["error",4],["option",4],["result",4,["option","error"]]]],[[["cryptotypepublicpair",3],["keytypeid",3],["vec",3,["cryptotypepublicpair"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["error",4],["public",3],["result",4,["public","error"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["public",3],["keytypeid",3],["vrftranscriptdata",3]],[["error",4],["result",4,["option","error"]],["option",4,["vrfsignature"]]]],[[["vrftranscriptdata",3],["keytypeid",3],["public",3]],[["box",3,["future"]],["pin",3,["box"]]]],[[["vec",3,["cryptotypepublicpair"]],["keytypeid",3],["cryptotypepublicpair",3]],[["result",4,["vec","error"]],["vec",3,["cryptotypepublicpair"]],["error",4]]],[[["vec",3,["cryptotypepublicpair"]],["keytypeid",3],["cryptotypepublicpair",3]],[["pin",3,["box"]],["box",3,["future"]]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["keystore",3]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["result",4,["public","error"]],["public",3],["error",4]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["keytypeid",3],["public",3]],[["box",3,["future"]],["pin",3,["box"]]]],[[["keytypeid",3],["public",3]],[["option",4,["signature"]],["result",4,["option","error"]],["error",4]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["box",3,["future"]],["pin",3,["box"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["error",4],["result",4,["public","error"]],["public",3]]],[[["keytypeid",3]],[["vec",3,["public"]],["public",3]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[]],[[]],[[],[["box",3,["future"]],["pin",3,["box"]]]],[[],["bool",15]],[[["str",15],["keytypeid",3]],["result",4]],[[["str",15],["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[],["synccryptostoreptr",6]],[[],[["cryptostore",8],["arc",3,["cryptostore"]]]],[[["global",3],["box",3,["global"]]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["keytypeid",3]],[["result",4,["vec","error"]],["vec",3,["cryptotypepublicpair"]],["error",4]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[["keytypeid",3],["cryptotypepublicpair",3]],[["result",4,["option","error"]],["error",4],["option",4,["vec"]]]],[[["keytypeid",3],["cryptotypepublicpair",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["error",4],["public",3],["result",4,["public","error"]]]],[[["str",15],["keytypeid",3],["option",4,["str"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["keytypeid",3]],[["public",3],["vec",3,["public"]]]],[[["keytypeid",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["public",3],["keytypeid",3],["vrftranscriptdata",3]],[["error",4],["result",4,["option","error"]],["option",4,["vrfsignature"]]]],[[["vrftranscriptdata",3],["keytypeid",3],["public",3]],[["box",3,["future"]],["pin",3,["box"]]]],[[["vec",3,["cryptotypepublicpair"]],["keytypeid",3],["cryptotypepublicpair",3]],[["error",4],["vec",3,["cryptotypepublicpair"]],["result",4,["vec","error"]]]],[[["vec",3,["cryptotypepublicpair"]],["keytypeid",3],["cryptotypepublicpair",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vrftranscriptvalue",4]],[[],["vrftranscriptdata",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["global",3],["box",3,["global"]]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["global",3],["box",3,["global"]]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["global",3],["box",3,["global"]]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,[[["vrftranscriptdata",3]],["transcript",3]],null,null,[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"KeystoreExt"],[4,"Error"],[8,"SyncCryptoStore"],[8,"CryptoStore"],[3,"KeyStore"],[4,"VRFTranscriptValue"],[3,"VRFTranscriptData"],[3,"VRFSignature"]]},\
"sp_maybe_compressed_blob":{"doc":"Handling of blobs that may be compressed, based on an …","t":[17,4,13,13,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11],"n":["CODE_BLOB_BOMB_LIMIT","Error","Invalid","PossibleBomb","borrow","borrow_mut","clone","clone_into","compress","decompress","eq","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id"],"q":["sp_maybe_compressed_blob","","","","","","","","","","","","","","","","","","",""],"d":["A recommendation for the bomb limit for code blobs.","A possible bomb was encountered.","The compressed value had an invalid format.","Decoded size was too large, and the code payload may be a …","","","","","Encode a blob as compressed. If the blob’s size is over …","Decode a blob, if it indicates that it is compressed. …","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["usize",15]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["usize",15]],[["result",4,["cow","error"]],["cow",4],["error",4]]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Error"]]},\
"sp_npos_elections":{"doc":"A set of election algorithms to be used with a substrate …","t":[16,13,3,3,6,13,8,13,13,3,3,6,4,8,6,8,8,3,6,13,18,8,3,3,6,6,16,8,6,3,16,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,11,0,0,0,0,0,10,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["Accuracy","ArithmeticError","Assignment","Candidate","CandidatePtr","CompactInvalidIndex","CompactSolution","CompactStakeOverflow","CompactTargetOverflow","Edge","ElectionResult","ElectionScore","Error","EvaluateSupport","ExtendedBalance","FlattenSupportMap","IdentifierT","IndexAssignment","IndexAssignmentOf","InvalidSupportEdge","LIMIT","PerThing128","StakedAssignment","Support","SupportMap","Supports","Target","TupleRef","VoteWeight","Voter","Voter","WithApprovalOf","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assignments","average_edge_count","balancing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","budget","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","deserialize","distribution","distribution","distribution","edge_count","encode_to","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","evaluate","extract","flatten","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_assignment","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","generate_solution_type","helpers","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_assignment","into_assignment","into_assignment","into_staked","is_score_better","ne","ne","ne","ne","ne","new","new","node","phragmen","phragmms","pjr","reduce","remove_voter","score","serialize","setup_inputs","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_support_map","to_supports","total","total","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize_elected","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_targets","voter_count","voters","votes_for","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","who","who","who","winners","balance","assignment_ratio_to_staked","assignment_ratio_to_staked_normalized","assignment_staked_to_ratio","assignment_staked_to_ratio_normalized","to_without_backing","seq_phragmen","seq_phragmen_core","phragmms","pjr_check","pjr_check_core","standard_threshold","t_pjr_check","validate_pjr_challenge","validate_t_pjr_challenge","reduce"],"q":["sp_npos_electionssp_npos_elections::balancing","sp_npos_elections::helpers","","","","","sp_npos_elections::phragmen","","sp_npos_elections::phragmms","sp_npos_elections::pjr","","","","","","sp_npos_elections::reduce"],"d":["The weight/accuracy type of each vote.","An error occurred in some arithmetic operation.","A voter’s stake assignment among a set of targets, …","A candidate entity for the election.","A pointer to a candidate struct with interior mutability.","One of the index functions returned none.","A common interface for all compact solutions.","While going from compact to staked, the stake of all the …","The compact type has a voter who’s number of targets is …","A vote being casted by a <code>Voter</code> to a <code>Candidate</code> is an <code>Edge</code>.","Final result of the election.","The score of an assignment. This can be computed from the …","The errors that might occur in the this crate and compact.","Extension trait for evaluating a support map or vector.","A type in which performing operations on vote weights are …","Helper trait to convert from a support map to a flat …","an aggregator trait for a generic type of a voter/target …","The <code>IndexAssignment</code> type is an intermediate between the …","A type alias for <code>IndexAssignment</code> made from …","The data provided to create support map was invalid.","The maximum number of votes that are allowed.","Aggregator trait for a PerThing that can be multiplied by …","A voter’s stake assignment among a set of targets, …","A structure to demonstrate the election result from the …","Linkage from a winner to their <code>Support</code>.","A target-major representation of the the election outcome.","The target type. Needs to be an index (convert to usize).","A common wrapper trait for both (&A, &B) and &(A, B).","A type which is used in the API of this crate as a …","A voter entity.","The voter type. Needs to be an index (convert to usize).","A winner, with their respective approval stake.","","","","","","","","","","","","","","","","","","","","","","","","","","Individual assignments. for each tuple, the first …","Get the average edge count.","Balancing algorithm implementation.","","","","","","","","","","","","","","","","","","","This voter’s budget","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The distribution of the voter’s stake.","The distribution of the voter’s stake.","The distribution of the voter’s stake among winning …","Get the total count of edges.","","","","","","","","","","Evaluate a support map. The returned tuple contains:","","Flatten the support.","","","","","","","","","","","","","","","","","","","","Build self from a list of assignments.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Generates a struct to store the election result in a …","Helper methods for npos-elections.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert self into a <code>Vec<Assignment<A, Self::Accuracy>></code>","Converts self into the normal <code>Assignment</code> type.","Returns none if this voter does not have any non-zero …","Convert from a ratio assignment into one with absolute …","Compares two sets of election scores based on …","","","","","","","Create a new <code>Voter</code>.","(very) Basic implementation of a graph node used in the …","Implementation of the sequential-phragmen election method.","Implementation of the PhragMMS method.","Implements functions and interfaces to check solutions …","Rust implementation of the Phragmén reduce algorithm. …","Remove a certain voter.","Compute the score of this compact solution type.","","Converts raw inputs to types used in this crate.","","","","","","","","","","","","","Build the support map from the winners and assignments.","Same as <code>to_support_map</code> except it calls <code>FlattenSupportMap</code> …","Get the total stake of this assignment (aka voter budget).","Total support.","","","","","","","","","","","","","","","","","","","Try and normalize this assignment.","Try and normalize this assignment.","Try and normalize the votes of self.","Same as <code>Self::try_normalize</code> but the normalization is only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the number of unique targets in the whole struct.","Get the length of all the voters that this type is …","Support from voters.","Returns <code>true</code> if <code>self</code> votes for <code>target</code>.","","","","","","","","","","Voter’s identifier.","Voter’s identifier","Index of the voter among the voters list.","Just winners zipped with their approval stake. Note that …","Balance the weight distribution of a given <code>voters</code> at most …","Converts a vector of ratio assignments into ones with …","Same as <code>assignment_ratio_to_staked</code> and try and do …","Converts a vector of staked assignments into ones with …","Same as <code>assignment_staked_to_ratio</code> and try and do …","consumes a vector of winners with backing stake to just …","Execute sequential phragmen with potentially some rounds …","Core implementation of seq-phragmen.","Execute the phragmms method.","Check a solution to be PJR.","The internal implementation of the PJR check after having …","Compute the threshold corresponding to the standard PJR …","Check a solution to be t-PJR.","Validate a challenge to an election result.","Validate a challenge to an election result.","Reduce the given <code>Vec<StakedAssignment<IdentifierT>></code>. This …"],"i":[1,2,0,0,0,2,0,2,2,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,1,0,0,0,1,0,3,4,5,6,7,8,9,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,10,1,0,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,8,3,4,5,6,7,8,9,3,4,5,6,7,8,9,3,4,5,9,3,4,5,9,3,4,5,9,3,4,5,9,3,4,5,6,7,8,9,9,3,4,5,1,3,4,5,9,3,4,5,2,9,11,12,13,14,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,1,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,0,0,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,3,4,5,2,6,10,9,3,4,5,2,6,7,8,10,9,1,4,8,3,0,3,4,5,2,9,5,8,0,0,0,0,0,1,1,9,0,3,4,5,9,3,4,5,6,7,8,9,6,0,0,4,9,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,3,4,8,8,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,3,4,5,2,6,7,8,10,9,1,1,9,8,3,4,5,2,6,7,8,10,9,3,4,5,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedbalance",6]],[[],["assignment",3]],[[],["stakedassignment",3]],[[],["indexassignment",3]],[[],["candidate",3]],[[],["edge",3]],[[],["voter",3]],[[],["support",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[],["assignment",3]],[[],["stakedassignment",3]],[[],["indexassignment",3]],[[],["candidate",3]],[[],["edge",3]],[[],["voter",3]],[[],["support",3]],[[],["result",4]],null,null,null,[[],["usize",15]],[[]],[[]],[[]],[[]],[[["assignment",3]],["bool",15]],[[["stakedassignment",3]],["bool",15]],[[["indexassignment",3]],["bool",15]],[[["error",4]],["bool",15]],[[["support",3]],["bool",15]],[[],["electionscore",6]],[[]],[[],["supports",6]],[[],["supports",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["box",3,["global"]],["global",3]],[["global",3],["any",8],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["result",4,["vec","error"]],["vec",3,["assignment"]],["error",4]]],[[],[["assignment",3],["perthing",8]]],[[],[["assignment",3],["option",4,["assignment"]]]],[[["extendedbalance",6]],["stakedassignment",3]],[[["perthing",8],["electionscore",6]],["bool",15]],[[["assignment",3]],["bool",15]],[[["stakedassignment",3]],["bool",15]],[[["indexassignment",3]],["bool",15]],[[["error",4]],["bool",15]],[[["support",3]],["bool",15]],[[["assignment",3]],[["result",4,["error"]],["error",4]]],[[]],null,null,null,null,null,[[],["bool",15]],[[],[["electionscore",6],["error",4],["result",4,["electionscore","error"]]]],[[],["result",4]],[[["identifiert",8],["vec",3],["vec",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[],[["u8",15],["vec",3,["u8","global"]],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["candidateptr",6]],[[],[["supportmap",6],["error",4],["result",4,["supportmap","error"]]]],[[],[["supports",6],["result",4,["supports","error"]],["error",4]]],[[],["extendedbalance",6]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["str"]],["str",15]]],[[["extendedbalance",6]],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],[[],[["result",4,["str"]],["str",15]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["usize",15]],null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["usize",15],["extendedbalance",6],["vec",3]],["usize",15]],[[["vec",3,["assignment"]],["assignment",3]],[["vec",3,["stakedassignment"]],["stakedassignment",3]]],[[["vec",3,["assignment"]],["assignment",3]],[["result",4,["vec","error"]],["vec",3,["stakedassignment"]],["error",4]]],[[["vec",3,["stakedassignment"]],["stakedassignment",3]],[["vec",3,["assignment"]],["assignment",3]]],[[["vec",3,["stakedassignment"]],["stakedassignment",3]],[["result",4,["vec","error"]],["vec",3,["assignment"]],["error",4]]],[[["vec",3,["withapprovalof"]],["withapprovalof",6]],[["vec",3],["identifiert",8]]],[[["usize",15],["identifiert",8],["option",4],["vec",3],["vec",3]],[["error",4],["electionresult",3],["result",4,["electionresult","error"]]]],[[["usize",15],["voter",3],["vec",3,["candidateptr"]],["vec",3,["voter"]],["candidateptr",6]],[["result",4,["error"]],["error",4]]],[[["usize",15],["identifiert",8],["option",4],["vec",3],["vec",3]],[["str",15],["result",4,["electionresult","str"]],["electionresult",3]]],[[["identifiert",8],["vec",3],["supports",6],["vec",3]],[["result",4],["identifiert",8]]],[[["extendedbalance",6]],[["result",4],["identifiert",8]]],[[["usize",15]],["extendedbalance",6]],[[["extendedbalance",6],["identifiert",8],["vec",3],["supports",6],["vec",3]],[["result",4],["identifiert",8]]],[[["identifiert",8],["vec",3],["supports",6],["vec",3]],["bool",15]],[[["extendedbalance",6],["identifiert",8],["vec",3],["supports",6],["vec",3]],["bool",15]],[[["vec",3]],["u32",15]]],"p":[[8,"CompactSolution"],[4,"Error"],[3,"Assignment"],[3,"StakedAssignment"],[3,"IndexAssignment"],[3,"Candidate"],[3,"Edge"],[3,"Voter"],[3,"Support"],[3,"ElectionResult"],[8,"EvaluateSupport"],[8,"TupleRef"],[8,"FlattenSupportMap"],[6,"SupportMap"]]},\
"sp_npos_elections_compact":{"doc":"Proc macro for a npos compact assignment.","t":[14],"n":["generate_solution_type"],"q":["sp_npos_elections_compact"],"d":["Generates a struct to store the election result in a …"],"i":[0],"f":[null],"p":[]},\
"sp_panic_handler":{"doc":"Custom panic hook with bug report link","t":[3,11,11,11,11,11,11,11,11,5,11,11,11],"n":["AbortGuard","borrow","borrow_mut","drop","force_abort","force_unwind","from","into","never_abort","set","try_from","try_into","type_id"],"q":["sp_panic_handler","","","","","","","","","","","",""],"d":["RAII guard for whether panics in the current thread …","","","","Create a new guard. While the guard is alive, panics that …","Create a new guard. While the guard is alive, panics that …","","","Create a new guard. While the guard is alive, panics that …","Set the panic hook.","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1,1],"f":[null,[[]],[[]],[[]],[[],["abortguard",3]],[[],["abortguard",3]],[[]],[[]],[[],["abortguard",3]],[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"AbortGuard"]]},\
"sp_rpc":{"doc":"Substrate RPC primitives and utilities.","t":[0,0,0,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,3,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["list","number","tracing","List","ListOrValue","Value","as_any","as_any_mut","borrow","borrow_mut","deserialize","eq","fmt","from","from","from","from","from_mut","from_ref","into","into_any","into_any_arc","into_any_rc","map","ne","serialize","try_from","try_into","type_id","unchecked_into","vzip","Hex","Number","NumberOrHex","TryFromIntError","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deserialize","eq","fmt","from","from","from","from","from","from","from_mut","from_mut","from_ref","from_ref","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_u256","ne","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vzip","vzip","BlockTrace","BlockTrace","Data","Event","Span","TraceBlockResponse","TraceError","TraceError","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","block_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","error","events","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","id","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","name","parent_hash","parent_id","parent_id","serialize","serialize","serialize","serialize","serialize","serialize","spans","storage_keys","string_values","target","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tracing_targets","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","vzip","vzip","vzip","vzip","vzip","vzip","wasm"],"q":["sp_rpc","","","sp_rpc::list","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_rpc::number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_rpc::tracing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["RPC a lenient list or value type.","A number type that can be serialized both as a number or …","Types for working with tracing data","A list of values of given type.","RPC list or value wrapper.","A single value of given type.","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","Map every contained value using function <code>F</code>.","","","","","","","","Hex representation of the number.","The number represented directly.","A number type that can be serialized both as a number or …","An error type that signals an out-of-range conversion …","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","Converts this number into an U256.","","","","","","","","","","","","","","Container for all related spans and events for the block …","Successful block tracing response","Holds associated values for a tracing span.","Represents a tracing event, complete with recorded data.","Represents a single instance of a tracing span.","Response for the <code>state_traceBlock</code> RPC.","Error response for the <code>state_traceBlock</code> RPC.","Error block tracing response","","","","","","","","","","","","","","","","","","","Hash of the block being traced","","","","","","","","","","","","","","","","","","","","","","","","","Associated data","","","","","","","","","Error message","Vec of tracing events","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","id for this span","","","","","","","","","","","","","","","","","","","","","","","","","Name of this span","Parent hash","Parent id, if it exists","id of the parent span, if any","","","","","","","Vec of tracing spans","Storage key targets used to filter out events that do not …","HashMap of <code>String</code> values recorded while tracing","Event target","Target, typically module","","","","","","","Module targets that were recorded by the tracing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Indicates if the span is from wasm"],"i":[0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,2,3,2,3,2,3,2,3,2,2,2,2,2,2,2,3,2,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,2,2,3,2,3,2,3,2,3,2,3,2,0,4,0,0,0,0,0,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,6,8,9,5,6,7,8,9,4,9,5,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,7,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,7,5,6,7,5,6,7,8,9,4,5,5,8,6,7,5,6,7,8,9,4,5,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,7],"f":[null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["result",4]],[[["listorvalue",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["fn",8]],["listorvalue",4]],[[["listorvalue",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["numberorhex",4]],[[]],[[]],[[],["result",4]],[[["numberorhex",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]]],[[["u32",15]]],[[["u256",3]]],[[["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["u256",3]],[[["numberorhex",4]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blocktrace",3]],[[],["event",3]],[[],["span",3]],[[],["data",3]],[[],["traceerror",3]],[[],["traceblockresponse",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["data",3]],[[],["traceerror",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["box",3,["global"]],["global",3]],[["global",3],["box",3,["any","global"]],["any",8]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null],"p":[[4,"ListOrValue"],[4,"NumberOrHex"],[3,"TryFromIntError"],[4,"TraceBlockResponse"],[3,"BlockTrace"],[3,"Event"],[3,"Span"],[3,"Data"],[3,"TraceError"]]},\
"sp_runtime_interface":{"doc":"Substrate runtime interface","t":[16,6,8,11,0,11,5,0,23,5,0,8,8,8,16,16,10,10,10,3,3,3,16,8,16,24,24,8,8,24,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,16,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FFIType","Pointer","RIType","from_ffi_value","host","into_ffi_value","pack_ptr_and_len","pass_by","runtime_interface","unpack_ptr_and_len","wasm","FromFFIValue","IntoFFIValue","IntoPreallocatedFFIValue","SelfInstance","SelfInstance","from_ffi_value","into_ffi_value","into_preallocated_ffi_value","Codec","Enum","Inner","Inner","PassBy","PassBy","PassByCodec","PassByEnum","PassByImpl","PassByInner","PassByInner","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from_ffi_value","from_ffi_value","from_ffi_value","from_ffi_value","from_inner","inner","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","into_ffi_value","into_ffi_value","into_ffi_value","into_inner","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ExchangeableFunction","FromFFIValue","IntoFFIValue","Owned","RestoreImplementation","Wrapped","WrappedAndOwned","WrappedFFIValue","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","from","from","from","from","from","from","from_ffi_value","get","get","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","new","replace_implementation","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["sp_runtime_interface","","","","","","","","","","","sp_runtime_interface::host","","","","","","","","sp_runtime_interface::pass_by","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_runtime_interface::wasm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The ffi type that is used to represent <code>Self</code>.","A pointer that can be used in a runtime interface …","Something that can be used by the runtime interface as …","","Traits required by the runtime interface from the host …","","Pack a pointer and length into an <code>u64</code>.","Provides the <code>PassBy</code> trait to simplify the implementation …","Attribute macro for transforming a trait declaration into …","Unpacks an <code>u64</code> into the pointer and length.","Traits required by the runtime interface from the wasm …","Something that can be created from a ffi value. …","Something that can be converted into a ffi value.","Something that can be converted into a preallocated ffi …","As <code>Self</code> can be an unsized type, it needs to be …","As <code>Self</code> can be an unsized type, it needs to be …","Create <code>SelfInstance</code> from the given","Convert <code>self</code> into a ffi value.","Convert <code>self_instance</code> into the given preallocated ffi …","The implementation of the pass by codec strategy. This …","The implementation of the pass by enum strategy. This …","The implementation of the pass by inner type strategy. …","The inner type that is wrapped by <code>Self</code>.","Something that should be passed between wasm and the host …","The strategy that should be used to pass the type.","Derive macro for implementing <code>PassBy</code> with the <code>Codec</code> …","Derive macro for implementing <code>PassBy</code> with the <code>Enum</code> …","Something that provides a strategy for passing a type …","Trait that needs to be implemented by a type that should …","Derive macro for implementing <code>PassBy</code> with the <code>Inner</code> …","","","","","","","","","","","","","","","","Create <code>T</code> from the given ffi value.","","","","Construct <code>Self</code> from the given <code>inner</code>.","Returns the reference to the inner type.","","","","","","","","","","","","","Convert the given instance to the ffi value.","","","","Consumes <code>self</code> and returns the inner type.","","","","","","","","","","","","","A function which implementation can be exchanged.","Something that can be created from a ffi value.","Something that can be converted into a ffi value.","The owned rust type that is stored with the ffi value in …","Restores a function implementation on drop.","","","Represents a wrapped ffi value.","","","","","","","","","","","","","","","","","","","","Create <code>Self</code> from the given ffi value.","Returns the wrapped ffi value.","Returns the internal function pointer.","","","","","","","","","","","","","Convert <code>self</code> into a <code>WrappedFFIValue</code>.","Create a new instance of <code>ExchangeableFunction</code>.","Replace the implementation with <code>new_impl</code>.","","","","","","","","","","","",""],"i":[1,0,0,2,0,2,0,0,0,0,0,0,0,0,3,4,4,5,3,0,0,0,6,0,7,0,0,0,0,0,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,11,8,9,10,6,6,8,9,10,8,9,10,8,9,10,8,9,10,11,8,9,10,6,8,9,10,8,9,10,8,9,10,8,9,10,0,0,0,12,0,13,13,0,13,14,15,13,14,15,13,14,15,13,14,15,15,13,13,13,13,14,15,16,13,14,13,14,15,13,14,15,13,14,15,13,14,15,12,14,14,13,14,15,13,14,15,13,14,15,13,14,15],"f":[null,null,null,[[["functioncontext",8],["u32",15]],["result",6]],null,[[["functioncontext",8]],[["result",6,["u32"]],["u32",15]]],[[["u32",15]],["u64",15]],null,null,[[["u64",15]]],null,null,null,null,null,null,[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[["functioncontext",8]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["wrappedffivalue",4]],[[]],[[],["restoreimplementation",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[8,"RIType"],[6,"Pointer"],[8,"IntoPreallocatedFFIValue"],[8,"FromFFIValue"],[8,"IntoFFIValue"],[8,"PassByInner"],[8,"PassBy"],[3,"Codec"],[3,"Inner"],[3,"Enum"],[8,"PassByImpl"],[8,"IntoFFIValue"],[4,"WrappedFFIValue"],[3,"ExchangeableFunction"],[3,"RestoreImplementation"],[8,"FromFFIValue"]]},\
"sp_runtime_interface_proc_macro":{"doc":"This crate provides procedural macros for usage within …","t":[24,24,24,23],"n":["PassByCodec","PassByEnum","PassByInner","runtime_interface"],"q":["sp_runtime_interface_proc_macro","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"sp_runtime_interface_test_wasm":{"doc":"Tests for the runtime interface traits and proc macros.","t":[17,17,5,0,5,3,5,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11],"n":["WASM_BINARY","WASM_BINARY_BLOATY","import_sp_io","test_api","wasm_binary_unwrap","HostFunctions","array_as_mutable_reference","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","get_and_return_array","get_and_return_i128","get_and_return_u128","host_functions","into","into_any","into_any_arc","into_any_rc","invalid_utf8_data","overwrite_native_function_implementation","return_16kb","return_input","return_input_as_tuple","return_input_public_key","return_option_input","return_value_into_mutable_reference","set_storage","test_versionning","try_from","try_into","type_id","unchecked_into","vzip"],"q":["sp_runtime_interface_test_wasm","","","","","sp_runtime_interface_test_wasm::test_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","This function is not used, but we require it for the …","","Wasm binary unwrapped. If built with <code>SKIP_WASM_BUILD</code>, the …","Provides implementations for the extern host functions.","Take and fill mutable array.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get an array as input and returns a subset of this array.","Gets an <code>i128</code> and returns this value","Gets an <code>u128</code> and returns this value","","","","","","A function that is called with invalid utf8 data from the …","Overwrite the native implementation in wasm. The native …","Returns 16kb data.","Returns the input data as result.","Returns the input values as tuple.","Returns the given public key as result.","Returns the input data wrapped in an <code>Option</code> as result.","Copy <code>hello</code> into the given mutable reference","Set the storage at key with value.","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],"f":[null,null,[[]],null,[[]],null,[[]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i128",15]],["i128",15]],[[["u128",15]],["u128",15]],[[],[["vec",3,["function"]],["function",8]]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["str",15]]],[[],["bool",15]],[[],[["u32",15],["vec",3,["u32"]]]],[[["vec",3,["u8"]],["u8",15]],[["vec",3,["u8"]],["u8",15]]],[[["u8",15],["u32",15],["vec",3,["u8"]],["option",4,["vec"]],["vec",3,["u32"]]]],[[["public",3]],["public",3]],[[["vec",3,["u8"]],["u8",15]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[]],[[]],[[["u32",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"HostFunctions"]]},\
"sp_runtime_interface_test_wasm_deprecated":{"doc":"Tests for the runtime interface traits and proc macros.","t":[17,17,0,5,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["WASM_BINARY","WASM_BINARY_BLOATY","test_api","wasm_binary_unwrap","HostFunctions","as_any","as_any_mut","borrow","borrow_mut","from","from_mut","from_ref","host_functions","into","into_any","into_any_arc","into_any_rc","test_versionning","try_from","try_into","type_id","unchecked_into","vzip"],"q":["sp_runtime_interface_test_wasm_deprecated","","","","sp_runtime_interface_test_wasm_deprecated::test_api","","","","","","","","","","","","","","","","","",""],"d":["","","","Wasm binary unwrapped. If built with <code>SKIP_WASM_BUILD</code>, the …","Provides implementations for the extern host functions.","","","","","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[null,null,null,[[]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[],[["function",8],["vec",3,["function"]]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["global",3],["box",3,["any","global"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["u32",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"HostFunctions"]]},\
"sp_sandbox":{"doc":"This crate provides means to instantiate and execute wasm …","t":[18,3,4,13,13,13,3,6,13,13,3,3,13,13,4,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ENCODED_MAX_SIZE","EnvironmentDefinitionBuilder","Error","Execution","F32","F64","HostError","HostFuncType","I32","I64","Instance","Memory","Module","OutOfBounds","ReturnValue","Unit","Value","Value","__clone_box","__clone_box","__clone_box","add_host_func","add_memory","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_i32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","encode_to","encode_to","encode_to","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ffi_value","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","get","get_global_val","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_ffi_value","invoke","ne","ne","new","new","new","set","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","value_type","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["sp_sandboxd":["Maximum number of bytes <code>ReturnValue</code> might occupy when …","Struct that can be used for defining an environment for a …","Error that can occur while using this crate.","Failed to invoke the start function or an exported …","A 32-bit floating-point number stored as raw bit pattern.","A 64-bit floating-point number stored as raw bit pattern.","Error error that can be returned from host function.","Function pointer for specifying functions by the …","A 32-bit integer.","A 64-bit integer.","Sandboxed instance of a wasm module.","Reference to a sandboxed linear memory, that will be used …","Module is not valid, couldn’t be instantiated.","Access to a memory or table was made with an address or …","Typed value that can be returned from a function.","For returning nothing.","Values supported by Substrate on the boundary between …","For returning some concrete value.","","","","Register a host function in this environment definition.","Register a memory in this environment definition.","","","","","","","","","","","","","","","Return <code>Self</code> as <code>i32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Read a memory area at the address <code>ptr</code> with the size of …","Get the value from a global with the given <code>name</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invoke an exported function with the given name.","","","Construct a new <code>EnvironmentDefinitionBuilder</code>.","Instantiate a module with the given …","Construct a new linear memory instance.","Write a memory area at the address <code>ptr</code> with contents of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of this value.","","","","","","",""],"i":[1,0,0,2,3,3,0,0,3,3,0,0,2,2,0,1,0,1,4,3,1,5,5,5,6,2,4,7,3,1,5,6,2,4,7,3,1,3,5,6,2,4,7,3,1,5,6,2,4,7,3,1,4,3,1,4,3,1,7,3,1,7,3,1,7,3,1,7,3,1,7,3,1,3,1,2,7,3,1,5,6,2,4,7,7,3,3,1,1,3,5,6,2,4,7,3,1,5,6,2,4,7,3,1,4,6,5,6,2,4,7,3,1,5,6,2,4,7,3,1,2,4,7,3,1,5,6,2,4,7,3,1,3,6,3,1,5,6,4,4,7,3,1,4,3,1,5,6,2,4,7,3,1,5,6,2,4,7,3,1,5,6,2,4,7,3,1,5,6,2,4,7,3,1,3,5,6,2,4,7,3,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["hostfunctype",6]]],[[["memory",3]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],[["option",4,["i32"]],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["memory",3]],[[],["value",4]],[[],["returnvalue",4]],[[]],[[]],[[]],[[],[["result",4,["hosterror","error"]],["hosterror",3],["error",3]]],[[],[["value",4],["error",3],["result",4,["value","error"]]]],[[],[["result",4,["returnvalue","error"]],["returnvalue",4],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["value",4]],["bool",15]],[[["returnvalue",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["error",4]],["hosterror",3]],[[]],[[["runtimevalue",4]],["value",4]],[[]],[[["value",4]],["returnvalue",4]],[[["functioncontext",8]],[["result",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["result",4,["error"]],["error",4]]],[[["str",15]],[["value",4],["option",4,["value"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["functioncontext",8]],[["string",3],["result",4,["string"]]]],[[["str",15]],[["returnvalue",4],["result",4,["returnvalue","error"]],["error",4]]],[[["value",4]],["bool",15]],[[["returnvalue",4]],["bool",15]],[[],["environmentdefinitionbuilder",3]],[[["environmentdefinitionbuilder",3]],[["result",4,["instance","error"]],["instance",3],["error",4]]],[[["u32",15],["option",4,["u32"]]],[["error",4],["memory",3],["result",4,["memory","error"]]]],[[["u32",15]],[["result",4,["error"]],["error",4]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["valuetype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"ReturnValue"],[4,"Error"],[4,"Value"],[3,"Memory"],[3,"EnvironmentDefinitionBuilder"],[3,"Instance"],[3,"HostError"]]},\
"sp_serializer":{"doc":"Substrate customizable serde serializer.","t":[3,6,11,11,11,11,11,11,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,5,5,11,11,11],"n":["Error","Result","borrow","borrow_mut","classify","column","custom","custom","encode","fmt","fmt","from","from_reader","from_slice","from_str","into","invalid_type","is_data","is_eof","is_io","is_syntax","line","source","to_string","to_string_pretty","to_writer","try_from","try_into","type_id"],"q":["sp_serializer","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This type represents all possible errors that can occur …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","","","Categorizes the cause of this error.","One-based column number at which the error was detected.","","","Serialize the given data structure as a JSON byte vector.","","","","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to …","Returns true if this error was caused by input that was …","One-based line number at which the error was detected.","","","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1],"f":[null,null,[[]],[[]],[[],["category",4]],[[],["usize",15]],[[],["error",3]],[[],["error",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["str",15]],[["error",3],["result",4,["error"]]]],[[]],[[["expected",8],["unexpected",4]],["error",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],[["option",4,["error"]],["error",8]]],[[],["string",3]],[[],["string",3]],[[["write",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Error"]]},\
"sp_state_machine":{"doc":"Substrate state machine implementation.","t":[13,13,13,13,4,3,13,13,13,3,8,3,4,3,8,3,8,6,6,13,13,13,6,6,6,8,8,4,4,4,4,3,6,3,4,13,8,13,13,6,6,13,13,13,13,6,3,16,3,3,3,3,3,13,3,3,8,3,6,6,3,3,6,3,3,8,6,8,13,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,5,5,5,5,11,11,11,11,11,14,12,12,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,10,11,11,11,11,11,12,12,12,12,12,12,12,12,12,8,3,8,16,16,16,10,10,11,11,11,11,11,11,10,11,10,11,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,10,11,11,11,10,11,10,11,11,11,11,10,11,11],"n":["AlwaysWasm","AlwaysWasm","Backend","Backend","BackendTrustLevel","BasicExternalities","Both","Both","CacheBuildData","ChangesTrieAnchorBlockId","ChangesTrieBlockNumber","ChangesTrieBuildCache","ChangesTrieCacheAction","ChangesTrieConfigurationRange","ChangesTrieRootsStorage","ChangesTrieState","ChangesTrieStorage","ChangesTrieTransaction","ChildStorageCollection","Clear","CodeEntryDoesNotExist","CodeEntryDoesNotExist","DBValue","DefaultError","DefaultHandler","Error","Error","ExecutionError","ExecutionError","ExecutionManager","ExecutionStrategy","Ext","InMemoryBackend","InMemoryChangesTrieStorage","IndexOperation","Insert","InspectState","InvalidProof","InvalidProof","Layout","MemoryDB","NativeElseWasm","NativeElseWasm","NativeWhenPossible","NativeWhenPossible","OffchainChangesCollection","OffchainOverlayedChanges","Overlay","OverlayedChanges","ProofRecorder","ProvingBackend","ProvingBackendRecorder","ReadOnlyExternalities","Renew","StateMachine","StateMachineStats","Storage","StorageChanges","StorageCollection","StorageKey","StorageProof","StorageTransactionCache","StorageValue","TestExternalities","TrieBackend","TrieBackendStorage","TrieDBMut","TrieMut","Trusted","UnableToGenerateProof","UnableToGenerateProof","Untrusted","UsageInfo","UsageUnit","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add_transaction_index","apply_to_key_values_while","apply_to_key_values_while","apply_to_keys_while","apply_to_keys_while","apply_transaction","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_roots_storage","as_roots_storage","as_trie_backend","backend","backend","backend_storage","backend_storage_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_anchor","build_anchor","bytes","bytes_read_modified","bytes_writes_overlay","cache_mut","cache_reads","changes","changes_trie_root","changes_trie_storage","changes_trie_transaction","child_changes","child_iter_after","child_keys","child_storage","child_storage","child_storage","child_storage","child_storage","child_storage","child_storage","child_storage_changes","child_storage_hash","child_storage_hash","child_storage_hash","child_storage_root","child_storage_root","child_storage_root","child_storage_root","child_storage_root","children","clear_child_prefix","clear_child_prefix","clear_child_prefix","clear_prefix","clear_prefix","clear_prefix","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","commit","commit_all","commit_transaction","config","config","contains","contains","create_proof_check_backend","debug","decode","decode_all","decode_all_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","default","default","default","deregister_extension","deregister_extension_by_type_id","deregister_extension_by_type_id","deregister_extension_by_type_id","deregister_extension_by_type_id","disabled_changes_trie_state","drain","drain_storage_changes","drop","empty","empty","encode","encode_to","encoded_compact_size","end","enter_runtime","eq","eq","eq","eq","eq","eq","eq","essence","estimate_encoded_size","estimate_encoded_size","execute","execute_using_consensus_failure_handler","execute_with","execute_with","execute_with","execute_with_safe","execute_with_storage","execution_proof_check","execution_proof_check_on_trie_backend","exists_child_storage","exists_storage","exit_runtime","ext","extension","extension_by_type_id","extension_by_type_id","extension_by_type_id","extension_by_type_id","extensions","extensions","extract_proof","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_child_keys_with_prefix","for_child_keys_with_prefix","for_key_values_with_prefix","for_key_values_with_prefix","for_keys_with_prefix","for_keys_with_prefix","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","get","get","get","get","get","get","get","get","get","get_manager","get_read_and_written_keys","get_read_and_written_keys","get_read_and_written_keys","get_whitelist","get_whitelist","get_whitelist","hash","id","include_state_machine_states","insert","insert","insert","insert","insert","inspect_state","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_compact_proof","into_inner","into_iter","into_memory_db","into_nodes","into_storage","into_storage_changes","into_storages","is_empty","is_empty","is_empty","iter","iter_after","iter_nodes","key_changes","key_changes_proof","key_changes_proof_check","key_changes_proof_check_with_db","keys","keys","kill_child_storage","kill_child_storage","kill_child_storage","log_error","main_storage_changes","memory","merge","modified_reads","native_else_wasm","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new_empty","new_empty","new_in_mem","new_with_code","new_with_recorder","next_child_storage_key","next_child_storage_key","next_child_storage_key","next_child_storage_key","next_child_storage_key","next_storage_key","next_storage_key","next_storage_key","next_storage_key","next_storage_key","nodes_writes","number","offchain","offchain_db","offchain_drain_committed","offchain_storage_changes","ops","overlay","overlay_mut","overlay_writes","overlayed_changes","pairs","pairs","perform","persist_offchain_overlay","place_child_storage","place_child_storage","place_child_storage","place_storage","place_storage","place_storage","proof_size","prove_child_read","prove_child_read_on_trie_backend","prove_execution","prove_execution_on_trie_backend","prove_range_read_with_size","prove_range_read_with_size_on_trie_backend","prove_read","prove_read_on_trie_backend","prune_changes_tries","read_child_proof_check","read_child_proof_check_on_proving_backend","read_proof_check","read_proof_check_on_proving_backend","read_range_proof_check","read_range_proof_check_on_proving_backend","read_write_count","read_write_count","read_write_count","reads","reads_modified","record","record_all_keys","register_extension","register_extension","register_extension","register_extension_with_type_id","register_extension_with_type_id","register_extension_with_type_id","register_extension_with_type_id","register_overlay_stats","register_overlay_stats","remove","remove","removed_nodes","reset","reset","reset_read_write_count","reset_read_write_count","reset_read_write_count","rollback_transaction","root","root","root","root","set","set_collect_extrinsics","set_offchain_storage","set_offchain_storage","set_offchain_storage","set_offchain_storage","set_parent_hash","set_storage","set_whitelist","set_whitelist","set_whitelist","span","start_transaction","started","storage","storage","storage","storage","storage","storage","storage","storage","storage_append","storage_append","storage_append","storage_changes_root","storage_changes_root","storage_changes_root","storage_commit_transaction","storage_commit_transaction","storage_commit_transaction","storage_hash","storage_hash","storage_hash","storage_index_transaction","storage_renew_transaction_index","storage_rollback_transaction","storage_rollback_transaction","storage_rollback_transaction","storage_root","storage_root","storage_root","storage_root","storage_root","storage_root","storage_start_transaction","storage_start_transaction","storage_start_transaction","tally_read_modified","tally_write_overlay","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_storage_proof","to_string","trace","transaction","transaction_depth","transaction_index_changes","transaction_index_ops","transaction_storage_root","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","update","update_backend","usage_info","usage_info","using_encoded","value_mut_or_insert_with","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","warn","wipe","wipe","wipe","wipe","with_blocks","with_cached_changed_keys","with_cached_changed_keys","with_changed_keys","with_db","with_proof","with_storage_transaction_cache","writes","writes_overlay","zero","zero","extrinsic","extrinsic","hash","hash","size","Backend","BackendRuntimeCode","Consolidate","Error","Transaction","TrieBackendStorage","apply_to_key_values_while","apply_to_keys_while","as_any","as_any_mut","as_trie_backend","borrow","borrow_mut","child_keys","child_storage","child_storage_hash","child_storage_root","commit","consolidate","exists_child_storage","exists_storage","fetch_runtime_code","for_child_keys_with_prefix","for_key_values_with_prefix","for_keys_with_prefix","from","from_mut","from_ref","full_storage_root","get_read_and_written_keys","get_whitelist","into","into_any","into_any_arc","into_any_rc","keys","new","next_child_storage_key","next_storage_key","pairs","proof_size","read_write_count","register_overlay_stats","reset_read_write_count","runtime_code","set_whitelist","storage","storage_hash","storage_root","try_from","try_into","type_id","unchecked_into","usage_info","vzip","wipe"],"q":["sp_state_machinesp_state_machine::IndexOperation","","","","","sp_state_machine::backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Use the given wasm module.","Use the given wasm module. The backend on which code is …","","","Storage backend trust level.","Simple Map-based Externalities impl.","Run with both the wasm and the native variant (if …","Run with both the wasm and the native variant (if …","Cache data that has been collected when CT has been built.","Block identifier that could be used to determine fork of …","Requirements for block number that can be used with …","Changes trie build cache.","The action to perform when block-with-changes-trie is …","Blocks range where configuration has been constant.","Changes trie storage. Provides access to trie roots and …","Changes tries state at some block.","Changes trie storage. Provides access to trie roots and …","Type of changes trie transaction.","In memory arrays of storage values for multiple child …","Clear cache from all existing entries.","","","Database value","Default error type to use with state machine trie backend.","Default handler of the execution manager.","State Machine Error bound.","State Machine Error bound.","Externalities Error.","Externalities Error.","Like <code>ExecutionStrategy</code> only it also stores a handler in …","Strategy for executing a call into the runtime.","Wraps a read-only backend, call executor, and current …","Trie backend with in-memory storage.","In-memory implementation of changes trie storage.","Transcation index operation.","Insert transaction into index.","Trait for inspecting state in any backend.","","","","Reexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …","First native, then if that fails or is not possible, wasm.","First native, then if that fails or is not possible, wasm.","Execute with the native equivalent if it is compatible …","Execute with the native equivalent if it is compatible …","In memory array of storage values.","In-memory storage for offchain workers recoding changes …","Type of in-memory overlay.","The set of changes that are overlaid onto the backend.","Global proof recorder, act as a layer over a hash db for …","Patricia trie-based backend which also tracks all touched …","Patricia trie-based backend specialized in get value …","Simple read-only externalities for any backend.","Renew existing transaction storage.","The substrate state machine.","Accumulated usage statistics specific to state machine …","Patricia trie-based storage trait.","A storage changes structure that can be generated by the …","In memory array of storage values.","Storage key.","A proof that some set of key-value pairs are included in …","The storage transaction are calculated as part of the …","Storage value.","Simple HashMap-based Externalities impl.","Patricia trie-based backend. Transaction type is an …","Key-value pairs storage that is used by trie backend …","Persistent trie database write-access interface for the a …","A key-value datastore implemented as a database-backed …","Panics from trusted backends are considered justified, …","","","Panics from untrusted backend are caught and interpreted …","Usage statistics for state backend.","Measured count of operations and total bytes.","","","","","","","","","","","","","","","Accumulates some registered stats.","Add transaction index operation.","","","","","Apply the given transaction to this backend and set the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts from self reference to RootsStorage reference.","","","State machine backends. These manage the code and storage …","Storage backend.","Get backend storage reference.","Get backend storage reference.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Resolve hash of the block into anchor.","","Number of bytes.","Size in byte of read queries that hit a modified value.","Size in bytes of the writes overlay operation.","Get mutable cache reference.","Cache read statistics.","Get an iterator over all top changes as been by the …","Generate the changes trie root.","Get mutable reference to changes trie storage.","Contains the transaction for the backend for the changes …","Get an optional iterator over all child changes stored …","Returns an iterator over the keys (in lexicographic …","","","Produce proof for a child key query.","","","","Returns a double-Option: None if the key is unknown (i.e. …","","All changes to the child storages.","","","","","","","","","Get an iterator over all child changes as seen by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Commit all pending changes to the underlying backend.","Commit the last transaction started by <code>start_transaction</code>.","Configuration that is active at given block.","Active configuration.","Does the trie contain a given key?","Does the trie contain a given key?","Create proof check backend.","Logs a message at the debug level.","","","","","","","","","","","","","","","","","","","","Create state where changes tries are disabled.","Drain all elements of changeset.","Drain all changes into a <code>StorageChanges</code> instance. Leave …","","Empty statistics.","Returns a new empty proof.","","","Returns the estimated encoded size of the compact proof.","End block of this configuration. It is the last block …","Call this before transfering control to the runtime.","This doesn’t test if they are in the same state, only …","Compare with another in-memory backend.","","","","","","Get backend essence reference.","Returns the estimated encoded size of the proof.","Returns the estimated encoded size of the proof.","Execute a call using the given state backend, overlayed …","Execute a call using the given state backend, overlayed …","Execute the given closure while <code>self</code> is set as …","Execute the given closure while <code>self</code> is set as …","Execute the given closure while <code>self</code> is set as …","Execute the given closure while <code>self</code> is set as …","Execute the given closure <code>f</code> with the externalities set …","Check execution proof, generated by <code>prove_execution</code> call.","Check execution proof on proving backend, generated by …","","","Call this when control returns from the runtime.","Get externalities implementation.","","","","","","List of active extensions.","Extensions.","Extracting the gathered unordered proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a trie node.","Get a trie node.","Get the value stored at key.","What is the value of the given key in this trie?","Get cached changed keys for changes trie with given root.","","Obtain a associated value to the given key in storage …","Returns the value at the given <code>key</code>.","","Gets the corresponding manager for the execution strategy.","","","","","","","Hash of this block.","Pseudo-unique id used for tracing.","Add collected state machine to this state.","Insert a <code>key</code>/<code>value</code> pair into the trie. An empty value is …","Insert changes trie for given block.","Insert key/value into backend","Insert values into backend trie.","Insert key/value","Inspect state with a closure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode as a compact proof with default trie layout.","Deconstruct into the inner values","Consume the offchain storage and iterate over all key …","Creates a <code>MemoryDB</code> from <code>Self</code>.","Convert into plain node vector.","Consumes self and returns underlying storage.","Convert this instance with all changes into a …","Consume self and returns inner storages","Is the trie empty?","Whether no changes are contained in the top nor in any of …","Returns whether this is an empty proof.","Iterate over all key value pairs by reference.","Returns an iterator over the keys (in lexicographic …","Create an iterator over trie nodes constructed from the …","Return changes of given key at given blocks range. <code>max</code> is …","Returns proof of changes of given key at given blocks …","Check key changes proof and return changes of the key at …","Similar to the <code>key_changes_proof_check</code> function, but …","","","","","","Logs a message at the error level.","All changes to the main storage.","Memory used.","Merges multiple storage proofs covering potentially …","Modified value read statistics.","Evaluate to ExecutionManager::NativeElseWasm, without …","","","","Create new changes trie build cache.","Creates storage with empty database.","Create state with given config and storage.","Create a new <code>Ext</code> from overlayed changes and read-only …","Create new proving backend.","Create a new instance of <code>TestExternalities</code> with storage.","Create new trie-based backend.","Creates new substrate state machine.","Create a new instance of <code>BasicExternalities</code>","Constructs a storage proof from a subset of encoded trie …","New empty test externalities.","New basic externalities with empty storage.","Create a new empty instance of in-memory backend.","Create a new instance of <code>TestExternalities</code> with code and …","Create new proving backend with the given recorder.","","","","","","","","","","","Write trie nodes statistics.","Number of this block.","Read only access ot offchain overlay.","A shared reference type around the offchain worker …","Consume all changes (top + children) and return them.","Offchain state changes to write to the offchain database.","Number of operations.","Reference to inner change set.","Mutable reference to inner change set.","Write into cached state machine change overlay.","Returns the overlayed changes.","","","Insert data into cache.","Move offchain changes from overlay to the persistent …","","","","","","","","Generate child storage read proof.","Generate storage read proof on pre-created trie backend.","Prove execution using the given state backend, overlayed …","Prove execution using the given trie backend, overlayed …","Generate range storage read proof.","Generate range storage read proof on an existing trie …","Generate storage read proof.","Generate storage read proof on pre-created trie backend.","Prune obsolete changes tries. Pruning happens at the same …","Check child storage read proof, generated by …","Check child storage read proof on pre-created proving …","Check storage read proof, generated by <code>prove_read</code> call.","Check storage read proof on pre-created proving backend.","Check child storage range proof, generated by …","Check storage range proof on pre-created proving backend.","","","","Read statistics (total).","Number of read query from runtime that hit a modified …","Record the given <code>key</code> => <code>val</code> combination.","Produce proof for the whole backend.","","Registers the given extension for this instance.","Register an extension.","","","","","","","Remove a <code>key</code> from the trie. Equivalent to making it equal …","Remove a key and its associated value from the offchain …","Removed trie nodes statistics.","Reset the cached transactions.","Reset the internal state.","","","","Rollback the last transaction started by <code>start_transaction</code>…","Get changes trie root for the block with given number …","Return the root of the trie.","","Get trie root.","Set the value associated with a key under a prefix to the …","Ask to collect/not to collect extrinsics indices where …","","","Write a key value pair to the offchain storage overlay.","","Set the given <code>parent_hash</code> as the hash of the parent block.","Set a new value for the specified key.","","","","Timespan of the statistics.","Start a new nested transaction.","Moment at which current statistics has been started being …","","Produce proof for a key query.","","","","Returns a double-Option: None if the key is unknown (i.e. …","","Underlying changes tries storage reference.","","","","","","","","","","","","","","Renew existing piece of data storage.","","","","","","","","Generate the storage root using <code>backend</code> and all changes …","","","","","Tally one read modified operation, of some length.","Tally one write overlay operation, of some length.","","","","","","","","","","","","","","","","Convert into a <code>StorageProof</code>.","","Constructs an event at the trace level.","A transaction for the backend that contains all changes …","Returns the current nesting depth of the transaction …","Changes to the transaction index,","Get an list of all index operations.","The storage root after applying the transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copy the state, with applied updates","Merge trie nodes into this backend.","","","","Returns mutable reference to current value. If there is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level.","","","","","Create the storage with given blocks.","Execute given functor with cached entry for given trie …","","Execute given functor with cached entry for given block. …","Creates storage from given in-memory database.","Creates storage with given proof.","Use given <code>cache</code> as storage transaction cache.","Write statistics (total).","Number of time a write operation occurs into the state …","Configuration activation block number. Zero if it is the …","Zero block of this configuration. The configuration is …","Extrinsic index in the current block.","Extrinsic index in the current block.","Data content hash.","Referenced index hash.","Indexed data size.","A state backend is used to read state data and can have …","Wrapper to create a <code>RuntimeCode</code> from a type that …","Trait that allows consolidate two transactions together.","An error type when fetching data is not possible.","Storage changes to be applied if committing","Type of trie backend storage.","Iterate over storage starting at key, for a given prefix …","Retrieve all entries keys of storage and call <code>f</code> for each …","","","Try convert into trie backend.","","","Get all keys of child storage with given prefix","Get keyed child storage or None if there is nothing …","Get child keyed storage value hash or None if there is …","Calculate the child storage root, with given delta over …","Commit given transaction to storage.","Consolidate two transactions into one.","true if a key exists in child storage.","true if a key exists in storage.","","Retrieve all child entries keys which start with the …","Retrieve all entries keys and values of which start with …","Retrieve all entries keys which start with the given …","","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Calculate the storage root, with given delta over what is …","Extend storage info for benchmarking db","Get the whitelist for tracking db reads/writes","","","","","Get all keys with given prefix","Create a new instance.","Return the next key in child storage in lexicographic …","Return the next key in storage in lexicographic order or …","Get all key/value pairs into a Vec.","Estimate proof size","Get the read/write count of the db","Register stats from overlay of state machine.","Get the read/write count of the db","Return the <code>RuntimeCode</code> build from the wrapped <code>backend</code>.","Update the whitelist for tracking db reads/writes","Get keyed storage or None if there is nothing associated.","Get keyed storage value hash or None if there is nothing …","Calculate the storage root, with given delta over what is …","","","","","Query backend usage statistics (i/o, memory)","","Wipe the state database."],"i":[1,2,3,3,0,0,1,2,4,0,0,0,0,0,0,0,0,0,0,4,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,3,3,0,0,1,2,1,2,0,0,6,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,7,0,0,8,9,10,11,12,5,13,14,15,16,1,7,2,17,16,12,18,9,18,9,9,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,30,20,9,0,25,9,9,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,31,20,14,16,16,20,15,12,12,25,22,12,12,18,21,24,18,9,27,12,29,22,21,27,29,21,18,9,27,29,12,21,27,29,21,27,29,8,9,10,11,12,5,13,14,15,16,1,7,2,17,8,9,10,11,12,5,13,14,15,16,1,7,2,17,21,27,29,25,12,8,10,32,32,0,0,17,17,17,17,22,23,25,9,27,11,12,13,14,16,25,21,25,27,29,0,11,12,26,15,17,17,17,17,10,12,25,9,27,4,3,1,17,9,18,13,26,26,25,27,29,25,27,0,0,21,21,12,25,25,21,25,27,29,27,25,18,18,25,9,27,4,28,3,3,11,12,5,29,14,15,16,1,7,17,18,9,18,9,18,9,19,20,8,21,22,23,24,18,25,25,9,9,9,9,9,26,27,27,4,28,10,3,11,12,5,13,29,29,14,15,16,1,1,7,2,17,27,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,30,33,6,32,19,20,11,13,34,1,21,27,29,21,27,29,28,21,15,32,20,25,9,27,35,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,17,22,11,17,17,9,12,27,32,12,17,11,12,17,0,0,0,0,18,9,21,27,29,0,22,15,17,15,0,4,3,17,19,20,8,21,18,25,9,26,27,17,25,27,0,25,18,21,18,9,27,29,21,18,9,27,29,15,28,12,25,12,22,14,11,11,15,25,18,9,19,25,21,27,29,21,27,29,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,27,29,15,16,13,24,25,25,27,21,25,27,29,18,9,32,11,15,23,13,21,27,29,12,31,32,20,9,11,12,21,27,12,29,26,12,21,27,29,15,12,15,21,24,18,9,27,12,29,8,21,27,29,21,27,29,21,27,29,21,27,29,21,21,21,27,29,21,18,9,27,12,29,21,27,29,16,16,17,8,9,10,11,12,5,13,14,15,16,1,7,2,17,13,3,0,22,12,22,12,22,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,9,9,18,9,17,12,19,20,8,21,22,23,24,18,25,9,26,27,4,28,10,3,11,12,5,13,29,14,15,16,1,7,2,17,0,21,9,27,29,20,30,20,19,20,20,26,15,16,8,10,36,37,36,37,36,0,0,0,38,38,38,38,38,39,39,38,39,39,38,38,38,38,38,40,38,38,39,38,38,38,39,39,39,38,38,38,39,39,39,39,38,39,38,38,38,38,38,38,38,39,38,38,38,38,39,39,39,39,38,39,38],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["statemachinestats",3]]],[[["indexoperation",4]]],[[["option",4],["bool",15],["option",4,["childinfo"]],["childinfo",4],["fnmut",8]],[["result",4,["bool"]],["bool",15]]],[[["option",4],["bool",15],["option",4,["childinfo"]],["childinfo",4],["fnmut",8]],[["result",4,["bool"]],["bool",15]]],[[["option",4],["fnmut",8],["option",4,["childinfo"]],["childinfo",4]]],[[["option",4],["fnmut",8],["option",4,["childinfo"]],["childinfo",4]]],[[["memorydb",6]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["rootsstorage",8]],[[],["rootsstorage",8]],[[],[["option",4,["triebackend"]],["triebackend",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["anchorblockid","string"]],["string",3],["anchorblockid",3]]],[[],[["result",4,["anchorblockid","string"]],["string",3],["anchorblockid",3]]],null,null,null,[[],["buildcache",3]],null,[[]],[[["bool",15],["option",4,["changestriestate"]],["storagetransactioncache",3],["changestriestate",3]],[["result",4,["option"]],["option",4]]],[[],["changestrieinmemorystorage",3]],null,[[],["option",4]],[[]],[[["childinfo",4]],[["vec",3,["u8"]],["vec",3,["vec"]]]],[[["childinfo",4]],[["option",4,["storagevalue"]],["storagevalue",6]]],[[["childinfo",4]],[["result",4,["option","string"]],["string",3],["option",4,["vec"]]]],[[["childinfo",4]],[["option",4,["vec"]],["result",4,["option"]]]],[[["childinfo",4]],[["option",4,["storagevalue"]],["result",4,["option"]]]],[[["childinfo",4]],[["option",4,["storagevalue"]],["storagevalue",6]]],[[["childinfo",4]],[["option",4],["option",4,["option"]]]],[[["childinfo",4]],[["option",4,["storagevalue"]],["storagevalue",6]]],null,[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["u8",15]]],[[["childinfo",4]]],[[["childinfo",4]]],[[["childinfo",4]],[["vec",3,["u8"]],["u8",15]]],[[["childinfo",4]],[["vec",3,["u8"]],["u8",15]]],[[]],[[["u32",15],["childinfo",4],["option",4,["u32"]]]],[[["u32",15],["childinfo",4],["option",4,["u32"]]]],[[["u32",15],["childinfo",4],["option",4,["u32"]]]],[[["option",4,["u32"]],["u32",15]]],[[["option",4,["u32"]],["u32",15]]],[[["option",4,["u32"]],["u32",15]]],[[]],[[]],[[],["configurationrange",3]],[[],["offchainoverlayedchanges",3]],[[],["overlayedchanges",3]],[[],["indexoperation",4]],[[],["proofrecorder",3]],[[],["usageunit",3]],[[],["usageinfo",3]],[[],["statemachinestats",3]],[[],["executionstrategy",4]],[[],["backendtrustlevel",4]],[[],["executionmanager",4]],[[],["storageproof",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["string"]],["string",3]]],[[],[["result",4,["noopentransaction"]],["noopentransaction",3]]],null,null,[[],[["box",3,["trieerror","global"]],["result",4,["bool","box"]],["bool",15]]],[[],[["box",3,["trieerror","global"]],["result",4,["bool","box"]],["bool",15]]],[[["storageproof",3]],[["result",4,["triebackend","box"]],["triebackend",3,["memorydb"]],["box",3,["error"]]]],null,[[],[["result",4,["storageproof","error"]],["error",3],["storageproof",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],["offchainoverlayedchanges",3]],[[],["overlayedchanges",3]],[[],["proofrecorder",3]],[[],["usageunit",3]],[[],["statemachinestats",3]],[[],[["error",4],["result",4,["error"]]]],[[["typeid",3]],[["error",4],["result",4,["error"]]]],[[["typeid",3]],[["error",4],["result",4,["error"]]]],[[["typeid",3]],[["error",4],["result",4,["error"]]]],[[["typeid",3]],[["error",4],["result",4,["error"]]]],[[],[["option",4,["state"]],["state",3]]],[[]],[[["storagetransactioncache",3],["changestriestate",3],["option",4,["changestriestate"]]],[["result",4,["storagechanges","defaulterror"]],["storagechanges",3],["defaulterror",6]]],[[]],[[]],[[],["storageproof",3]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[]],[[],[["usize",15],["option",4,["usize"]]]],null,[[],[["result",4,["alreadyinruntime"]],["alreadyinruntime",3]]],[[["testexternalities",3]],["bool",15]],[[],["bool",15]],[[["basicexternalities",3]],["bool",15]],[[["cacheaction",4]],["bool",15]],[[["executionerror",4]],["bool",15]],[[["executionstrategy",4]],["bool",15]],[[["storageproof",3]],["bool",15]],[[],["triebackendessence",3]],[[],["usize",15]],[[],["usize",15]],[[["executionstrategy",4]],[["vec",3,["u8"]],["result",4,["vec","box"]],["box",3,["error"]]]],[[["executionmanager",4],["option",4]],[["box",3,["error"]],["result",4,["nativeorencoded","box"]],["nativeorencoded",4]]],[[]],[[]],[[]],[[],[["result",4,["string"]],["string",3]]],[[["storage",3]]],[[["runtimecode",3],["str",15],["overlayedchanges",3],["storageproof",3]],[["vec",3,["u8"]],["result",4,["vec","box"]],["box",3,["error"]]]],[[["runtimecode",3],["str",15],["overlayedchanges",3],["triebackend",3]],[["vec",3,["u8"]],["result",4,["vec","box"]],["box",3,["error"]]]],[[["childinfo",4]],["bool",15]],[[],["bool",15]],[[],[["result",4,["notinruntime"]],["notinruntime",3]]],[[],[["ext",3,["inmemorybackend"]],["inmemorybackend",6]]],[[],["option",4]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[],["extensions",3]],null,[[],["storageproof",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["childinfo",4],["fnmut",8]]],[[["childinfo",4],["fnmut",8]]],[[["fnmut",8]]],[[["fnmut",8]]],[[["fnmut",8]]],[[["fnmut",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["storage",3]]],[[]],[[]],[[["storage",3]]],[[["vec",3]]],[[["option",4,["childinfo"]],["btreemap",3,["storagekey","storagevalue"]],["hashmap",3,["option","btreemap"]]]],[[["storagekey",6],["btreemap",3,["storagekey","storagevalue"]],["storagevalue",6]]],[[]],[[]],[[["storagekey",6],["btreemap",3,["storagekey","storagevalue"]],["storagevalue",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["executionmanager",4]]],[[]],[[]],[[]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prefix",6]],[["string",3],["result",4,["option","string"]],["option",4,["dbvalue"]]]],[[["prefix",6]],[["defaulterror",6],["option",4,["dbvalue"]],["result",4,["option","defaulterror"]]]],[[["prefix",6]],[["defaulterror",6],["option",4,["dbvalue"]],["result",4,["option","defaulterror"]]]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[],[["hashmap",3],["option",4,["hashmap"]]]],[[["prefix",6]],[["string",3],["result",4,["option","string"]],["option",4,["dbvalue"]]]],[[],[["option",4,["offchainoverlayedchange"]],["offchainoverlayedchange",4]]],[[],[["option",4,["option"]],["option",4,["dbvalue"]]]],[[["prefix",6]],[["defaulterror",6],["option",4,["dbvalue"]],["result",4,["option","defaulterror"]]]],[[],[["executionmanager",4,["defaulthandler"]],["defaulthandler",6]]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[],[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[],[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],null,null,[[["statemachinestats",3]]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[["memorydb",6]]],[[["storagekey",6],["storagevalue",6]]],[[["intoiterator",8]]],[[["storagekey",6],["storagevalue",6]],[["option",4,["storagevalue"]],["storagevalue",6]]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["error",4,["layout"]],["result",4,["compactproof","error"]],["compactproof",3]]],[[]],[[]],[[],[["hashkey",3],["memorydb",3,["hashkey","vec","memcounter"]],["memcounter",3,["vec"]],["vec",3,["u8","global"]]]],[[],[["vec",3,["vec","global"]],["global",3],["vec",3,["u8","global"]]]],[[]],[[["storagetransactioncache",3],["option",4,["changestriestate"]],["blocknumber",8],["changestriestate",3],["hasher",8]],[["result",4,["storagechanges","defaulterror"]],["storagechanges",3],["defaulterror",6]]],[[],["storage",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["storageproofnodeiterator",3]],[[["storage",8],["option",4,["prefixedstoragekey"]],["prefixedstoragekey",3],["blocknumber",8],["configurationrange",3],["anchorblockid",3]],[["result",4,["drilldowniterator","string"]],["string",3],["drilldowniterator",3]]],[[["prefixedstoragekey",3],["option",4,["prefixedstoragekey"]],["blocknumber",8],["configurationrange",3],["anchorblockid",3],["storage",8]],[["vec",3,["vec"]],["result",4,["vec","string"]],["string",3]]],[[["vec",3,["u8"]],["rootsstorage",8],["configurationrange",3],["option",4,["prefixedstoragekey"]],["blocknumber",8],["vec",3,["vec"]],["anchorblockid",3],["prefixedstoragekey",3]],[["string",3],["result",4,["vec","string"]],["vec",3]]],[[["rootsstorage",8],["configurationrange",3],["option",4,["prefixedstoragekey"]],["inmemorystorage",3],["blocknumber",8],["prefixedstoragekey",3],["anchorblockid",3]],[["string",3],["result",4,["vec","string"]],["vec",3]]],[[],[["vec",3,["u8"]],["vec",3,["vec"]]]],[[],[["storagekey",6],["vec",3,["storagekey"]]]],[[["childinfo",4],["option",4,["u32"]],["u32",15]]],[[["childinfo",4],["option",4,["u32"]],["u32",15]]],[[["childinfo",4],["option",4,["u32"]],["u32",15]]],null,null,null,[[],["storageproof",3]],null,[[],[["executionmanager",4,["defaulthandler"]],["defaulthandler",6]]],[[["cacheaction",4]],["bool",15]],[[["executionerror",4]],["bool",15]],[[["storageproof",3]],["bool",15]],[[]],[[]],[[["changestrieconfiguration",3],["storage",8]]],[[["overlayedchanges",3],["option",4,["changestriestate"]],["changestriestate",3],["option",4,["extensions"]],["extensions",3],["storagetransactioncache",3]]],[[["triebackend",3]]],[[["storage",3]]],[[]],[[["overlayedchanges",3],["option",4,["changestriestate"]],["changestriestate",3],["extensions",3],["runtimecode",3],["str",15]]],[[["storage",3]]],[[["vec",3,["vec","global"]],["global",3],["vec",3,["u8","global"]]],["storageproof",3]],[[]],[[]],[[],[["triebackend",3,["memorydb"]],["memorydb",6],["hasher",8]]],[[["storage",3]]],[[["triebackend",3],["proofrecorder",3]]],[[["childinfo",4]],[["storagekey",6],["option",4,["storagekey"]]]],[[["childinfo",4]],[["option",4,["vec"]],["result",4,["option"]]]],[[["childinfo",4]],[["option",4,["storagekey"]],["result",4,["option"]]]],[[["childinfo",4]],[["storagekey",6],["option",4,["storagekey"]]]],[[["childinfo",4]],[["storagekey",6],["option",4,["storagekey"]]]],[[],[["storagekey",6],["option",4,["storagekey"]]]],[[],[["option",4,["vec"]],["result",4,["option"]]]],[[],[["option",4,["storagekey"]],["result",4,["option"]]]],[[],[["storagekey",6],["option",4,["storagekey"]]]],[[],[["storagekey",6],["option",4,["storagekey"]]]],null,null,[[],["offchainoverlayedchanges",3]],[[],["testpersistentoffchaindb",3]],[[]],null,null,[[],["overlayedmap",3]],[[],["overlayedmap",3]],null,[[],["overlayedchanges",3]],[[],["vec",3]],[[],["vec",3]],[[["cacheaction",4]]],[[]],[[["storagekey",6],["childinfo",4],["option",4,["storagevalue"]],["storagevalue",6]]],[[["storagekey",6],["childinfo",4],["option",4,["storagevalue"]],["storagevalue",6]]],[[["storagekey",6],["childinfo",4],["option",4,["storagevalue"]],["storagevalue",6]]],[[["storagekey",6],["option",4,["storagevalue"]],["storagevalue",6]]],[[["storagekey",6],["option",4,["storagevalue"]],["storagevalue",6]]],[[["storagekey",6],["option",4,["storagevalue"]],["storagevalue",6]]],[[],[["option",4,["u32"]],["u32",15]]],[[["childinfo",4]],[["storageproof",3],["box",3,["error"]],["result",4,["storageproof","box"]]]],[[["childinfo",4],["triebackend",3]],[["storageproof",3],["box",3,["error"]],["result",4,["storageproof","box"]]]],[[["str",15],["overlayedchanges",3],["runtimecode",3]],[["box",3,["error"]],["result",4,["box"]]]],[[["triebackend",3],["str",15],["overlayedchanges",3],["runtimecode",3]],[["box",3,["error"]],["result",4,["box"]]]],[[["option",4],["usize",15],["option",4,["childinfo"]],["childinfo",4]],[["box",3,["error"]],["result",4,["box"]]]],[[["option",4],["usize",15],["triebackend",3],["option",4,["childinfo"]],["childinfo",4]],[["box",3,["error"]],["result",4,["box"]]]],[[],[["storageproof",3],["box",3,["error"]],["result",4,["storageproof","box"]]]],[[["triebackend",3]],[["storageproof",3],["box",3,["error"]],["result",4,["storageproof","box"]]]],[[["blocknumber",8],["fnmut",8],["anchorblockid",3],["storage",8]]],[[["childinfo",4],["storageproof",3]],[["result",4,["hashmap","box"]],["hashmap",3,["vec","option"]],["box",3,["error"]]]],[[["childinfo",4],["triebackend",3]],[["box",3,["error"]],["result",4,["option","box"]],["option",4,["vec"]]]],[[["storageproof",3]],[["result",4,["hashmap","box"]],["hashmap",3,["vec","option"]],["box",3,["error"]]]],[[["triebackend",3]],[["box",3,["error"]],["result",4,["option","box"]],["option",4,["vec"]]]],[[["option",4],["storageproof",3],["u32",15],["option",4,["childinfo"]],["childinfo",4],["option",4,["u32"]]],[["box",3,["error"]],["result",4,["box"]]]],[[["option",4],["triebackend",3],["u32",15],["option",4,["childinfo"]],["childinfo",4],["option",4,["u32"]]],[["box",3,["error"]],["result",4,["box"]]]],[[]],[[]],[[]],null,null,[[["option",4,["dbvalue"]],["dbvalue",6]]],[[]],[[["extension",8]],[["error",4],["result",4,["error"]]]],[[["extension",8],["any",8]]],[[]],[[["typeid",3],["box",3,["extension"]],["extension",8]],[["error",4],["result",4,["error"]]]],[[["typeid",3],["box",3,["extension"]],["extension",8]],[["error",4],["result",4,["error"]]]],[[["typeid",3],["extension",8],["box",3,["extension"]]],[["error",4],["result",4,["error"]]]],[[["typeid",3],["extension",8],["box",3,["extension"]]],[["error",4],["result",4,["error"]]]],[[["statemachinestats",3]]],[[["statemachinestats",3]]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["noopentransaction"]],["noopentransaction",3]]],[[["anchorblockid",3]],[["result",4,["option","string"]],["option",4],["string",3]]],[[]],[[["anchorblockid",3]],[["result",4,["option","string"]],["option",4],["string",3]]],[[]],[[]],[[["bool",15]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[]],[[["storagekey",6],["option",4,["storagevalue"]],["storagevalue",6]]],[[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],null,[[]],null,[[],[["option",4,["storagevalue"]],["storagevalue",6]]],[[],[["result",4,["option","string"]],["string",3],["option",4,["vec"]]]],[[],[["option",4,["vec"]],["result",4,["option"]]]],[[],[["option",4,["storagevalue"]],["result",4,["option"]]]],[[],[["option",4,["storagevalue"]],["storagevalue",6]]],[[],[["option",4],["option",4,["option"]]]],[[],[["option",4,["storagevalue"]],["storagevalue",6]]],null,[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[],[["result",4,["option"]],["option",4,["vec"]]]],[[],[["result",4,["option"]],["option",4,["vec"]]]],[[],[["result",4,["option"]],["option",4,["vec"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["u32",15]]],[[["u32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[["storagetransactioncache",3]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[],[["u8",15],["global",3],["vec",3,["u8","global"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["storageproof",3]],[[],["string",3]],null,null,[[],["usize",15]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["memorydb",6]]],[[],["usageinfo",3]],[[],["usageinfo",3]],[[]],[[],["storagevalue",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["result",4]],[[]],[[]],[[["vec",3]]],[[["fnmut",8]],["bool",15]],[[["fnmut",8]],["bool",15]],[[["fnmut",8]],["bool",15]],[[["memorydb",6]]],[[["vec",3,["u8"]],["vec",3,["vec"]]]],[[["storagetransactioncache",3],["option",4,["storagetransactioncache"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["option",4],["bool",15],["option",4,["childinfo"]],["childinfo",4],["fnmut",8]],[["result",4,["bool"]],["bool",15]]],[[["option",4],["fnmut",8],["option",4,["childinfo"]],["childinfo",4]]],[[],["any",8]],[[],["any",8]],[[],[["option",4,["triebackend"]],["triebackend",3]]],[[]],[[]],[[["childinfo",4]],[["storagekey",6],["vec",3,["storagekey"]]]],[[["childinfo",4]],[["option",4,["storagevalue"]],["result",4,["option"]]]],[[["childinfo",4]],[["option",4],["result",4,["option"]]]],[[["childinfo",4]]],[[["childstoragecollection",6],["storagecollection",6]],["result",4]],[[]],[[["childinfo",4]],[["result",4,["bool"]],["bool",15]]],[[],[["result",4,["bool"]],["bool",15]]],[[],[["option",4,["cow"]],["cow",4]]],[[["childinfo",4],["fnmut",8]]],[[["fnmut",8]]],[[["fnmut",8]]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[]],[[["box",3,["global"]],["global",3]],[["any",8],["box",3,["any","global"]],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["storagekey",6],["vec",3,["storagekey"]]]],[[]],[[["childinfo",4]],[["option",4,["storagekey"]],["result",4,["option"]]]],[[],[["option",4,["storagekey"]],["result",4,["option"]]]],[[],["vec",3]],[[],[["option",4,["u32"]],["u32",15]]],[[]],[[["statemachinestats",3]]],[[]],[[],[["runtimecode",3],["str",15],["result",4,["runtimecode","str"]]]],[[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[],[["option",4,["storagevalue"]],["result",4,["option"]]]],[[],[["option",4],["result",4,["option"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usageinfo",3]],[[]],[[],["result",4]]],"p":[[4,"ExecutionStrategy"],[4,"ExecutionManager"],[4,"ExecutionError"],[4,"ChangesTrieCacheAction"],[4,"IndexOperation"],[8,"TrieBackendStorage"],[4,"BackendTrustLevel"],[3,"ChangesTrieState"],[3,"TrieBackend"],[3,"ChangesTrieConfigurationRange"],[3,"OffchainOverlayedChanges"],[3,"OverlayedChanges"],[3,"ProofRecorder"],[3,"UsageUnit"],[3,"UsageInfo"],[3,"StateMachineStats"],[3,"StorageProof"],[3,"ProvingBackend"],[3,"ChangesTrieBuildCache"],[3,"InMemoryChangesTrieStorage"],[3,"Ext"],[3,"StorageChanges"],[3,"StorageTransactionCache"],[3,"ProvingBackendRecorder"],[3,"TestExternalities"],[3,"StateMachine"],[3,"BasicExternalities"],[3,"ChangesTrieAnchorBlockId"],[3,"ReadOnlyExternalities"],[8,"ChangesTrieStorage"],[8,"ChangesTrieRootsStorage"],[8,"TrieMut"],[8,"Storage"],[6,"MemoryDB"],[8,"InspectState"],[13,"Insert"],[13,"Renew"],[8,"Backend"],[3,"BackendRuntimeCode"],[8,"Consolidate"]]},\
"sp_std":{"doc":"Lowest-abstraction level for the Substrate runtime: just …","tn":["Writer","alloc","any","borrow","borrow","borrow_mut","boxed","cell","clone","cmp","collections","convert","default","default","fmt","from","hash","if_std","inner","into","into_inner","iter","map","marker","mem","num","ops","prelude","ptr","rc","result","slice","str","sync","thread","time","try_from","try_into","type_id","vec","vec","write_str","AllocError","Allocator","Global","GlobalAlloc","Layout","LayoutErr","LayoutError","System","align","align_to","alloc","alloc","alloc","alloc_zeroed","alloc_zeroed","alloc_zeroed","allocate","allocate","allocate","allocate_zeroed","allocate_zeroed","allocate_zeroed","array","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","dangling","dealloc","dealloc","dealloc","deallocate","deallocate","deallocate","default","default","eq","eq","eq","extend","extend_packed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_value","for_value_raw","from","from","from","from","from","from_size_align","from_size_align_unchecked","grow","grow","grow","grow_zeroed","grow_zeroed","grow_zeroed","handle_alloc_error","into","into","into","into","into","ne","new","pad_to_align","padding_needed_for","realloc","realloc","realloc","repeat","repeat_packed","set_alloc_error_hook","shrink","shrink","shrink","size","take_alloc_error_hook","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Any","TypeId","borrow","borrow_mut","clone","clone_into","cmp","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","eq","fmt","fmt","fmt","fmt","from","hash","into","is","is","is","ne","of","partial_cmp","to_owned","try_from","try_into","type_id","type_id","type_name","type_name_of_val","Borrow","BorrowMut","Borrowed","Cow","Owned","Owned","ToOwned","add","add","add_assign","add_assign","as_ref","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","clone_into","cmp","default","deref","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","hash","into","into_owned","is_borrowed","is_owned","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_mut","to_owned","to_owned","to_string","to_string","try_from","try_into","type_id","Box","allocator","as_mut","as_ref","assume_init","assume_init","borrow","borrow","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","consume","default","default","default","default","default","deref","deref_mut","description","downcast","downcast","downcast","drop","eq","fill_buf","finish","flush","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","initializer","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_read_vectored","is_suffix_of","is_write_vectored","last","le","leak","len","lt","ne","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","read","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","resume","seek","size_hint","size_hint","source","stream_position","strip_prefix_of","strip_suffix_of","to_owned","to_string","try_from","try_from","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","type_id","write","write","write_all","write_fmt","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","write_vectored","BorrowError","BorrowMutError","Cell","Ref","RefCell","RefMut","UnsafeCell","as_ptr","as_ptr","as_slice_of_cells","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_from","clone_into","clone_into","cmp","cmp","default","default","default","deref","deref","deref_mut","description","description","eq","eq","filter_map","filter_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","ge","ge","get","get","get_mut","get_mut","get_mut","gt","gt","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","le","le","leak","leak","lt","lt","map","map","map_split","map_split","new","new","new","partial_cmp","partial_cmp","raw_get","replace","replace","replace_with","set","swap","swap","take","take","to_owned","to_owned","to_string","to_string","to_string","to_string","try_borrow","try_borrow_mut","try_borrow_unguarded","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_leak","update","Clone","Clone","clone","clone_from","0","Eq","Eq","Equal","Greater","Less","Ord","Ord","Ordering","PartialEq","PartialEq","PartialOrd","PartialOrd","Reverse","borrow","borrow","borrow_mut","borrow_mut","clamp","clone","clone","clone_from","clone_into","clone_into","cmp","cmp","cmp","default","eq","eq","eq","fmt","fmt","from","from","ge","ge","gt","gt","hash","hash","into","into","is_eq","is_ge","is_gt","is_le","is_lt","is_ne","le","le","lt","lt","max","max","max_by","max_by_key","min","min","min_by","min_by_key","ne","ne","partial_cmp","partial_cmp","partial_cmp","reverse","then","then_with","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","btree_map","btree_set","vec_deque","BTreeMap","DrainFilter","Entry","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","OccupiedEntry","OccupiedError","Range","RangeMut","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_key","default","description","drain_filter","drop","drop","drop","entry","entry","eq","extend","extend","extend_one","extend_one","first_entry","first_key_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_key_value","get_mut","get_mut","hash","index","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last","last_entry","last_key_value","len","len","len","len","len","len","len","len","len","max","max","max","max","max","max","min","min","min","min","min","min","new","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","or_default","or_insert","or_insert_with","or_insert_with_key","partial_cmp","pop_first","pop_last","range","range_mut","remove","remove","remove_entry","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_off","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","BTreeSet","Difference","DrainFilter","Intersection","IntoIter","Iter","Range","SymmetricDifference","Union","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","difference","drain_filter","drop","eq","extend","extend","extend_one","extend_one","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_iter","get","hash","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","len","len","len","max","max","min","min","min","min","min","min","ne","new","next","next","next","next","next","next","next","next","next_back","next_back","next_back","partial_cmp","pop_first","pop_last","range","remove","replace","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_off","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","Drain","IntoIter","Iter","IterMut","VecDeque","append","as_mut_slices","as_slices","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cmp","contains","default","drain","drop","drop","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from_iter","front","front_mut","get","get_mut","hash","index","index_mut","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","iter","iter_mut","last","last","len","make_contiguous","new","next","next","next","next","next_back","next_back","next_back","next_back","nth","nth","partial_cmp","partition_point","pop_back","pop_front","push_back","push_front","range","range_mut","remove","reserve","reserve_exact","resize","resize_with","retain","rfold","rfold","rotate_left","rotate_right","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","split_off","swap","swap_remove_back","swap_remove_front","to_owned","to_owned","to_owned","truncate","try_fold","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","try_rfold","type_id","type_id","type_id","type_id","type_id","with_capacity","AsMut","AsRef","Error","Error","FloatToInt","From","Infallible","Into","TryFrom","TryInto","as_mut","as_ref","borrow","borrow_mut","clone","clone_into","cmp","description","eq","fmt","fmt","from","from","from","from","hash","identity","into","into","partial_cmp","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","Default","Default","default","default","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","BuildHasher","BuildHasherDefault","Hash","Hash","Hasher","Hasher","SipHasher","borrow","borrow","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","clone","clone_into","clone_into","default","default","eq","finish","finish","fmt","fmt","from","from","hash","hash_one","hash_slice","into","into","new","new_with_keys","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","Chain","Cloned","Copied","Cycle","DoubleEndedIterator","Empty","Enumerate","ExactSizeIterator","Extend","Filter","FilterMap","FlatMap","Flatten","FromFn","FromIterator","Fuse","FusedIterator","Inspect","Intersperse","IntersperseWith","IntoIter","IntoIterator","Item","Item","Iterator","Map","MapWhile","Once","OnceWith","Peekable","Product","Repeat","RepeatWith","Rev","Scan","Skip","SkipWhile","Step","StepBy","Successors","Sum","Take","TakeWhile","TrustedLen","TrustedStep","Zip","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","all","any","backward","backward_checked","backward_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp_by","collect","copied","count","count","count","count","count","count","count","count","count","cycle","default","empty","enumerate","eq","eq_by","extend","extend_one","extend_reserve","filter","filter_map","find","find","find","find","find_map","flat_map","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","for_each","forward","forward_checked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_iter","fuse","ge","gt","inspect","intersperse","intersperse_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","last","last","last","last","last","last","le","len","len","len","len","len","len","len","len","len","len","len","lt","map","map_while","max","max_by","max_by_key","min","min_by","min_by_key","ne","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_if","next_if_eq","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","once","once_with","partial_cmp","partial_cmp_by","partition","partition_in_place","peek","peek_mut","peekable","position","product","product","reduce","repeat","repeat_with","rev","rfind","rfind","rfind","rfind","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rposition","scan","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip_while","step_by","steps_between","successors","sum","sum","take","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_find","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unzip","zip","zip","Copy","Copy","Discriminant","DiscriminantKind","PhantomData","PhantomPinned","Send","Sized","StructuralEq","StructuralPartialEq","Sync","Unpin","Unsize","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","partial_cmp","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Discriminant","ManuallyDrop","MaybeUninit","align_of","align_of_val","align_of_val_raw","array_assume_init","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","deref","deref_mut","discriminant","drop","drop","eq","eq","fmt","fmt","fmt","forget","forget_unsized","from","from","from","hash","hash","into","into","into","into_inner","min_align_of","min_align_of_val","ne","needs_drop","new","new","partial_cmp","replace","size_of","size_of_val","size_of_val_raw","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","swap","take","take","to_owned","to_owned","to_owned","transmute","transmute_copy","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uninit","uninit_array","uninitialized","variant_count","write","write_slice","write_slice_cloned","zeroed","zeroed","0","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","Empty","FpCategory","Infinite","IntErrorKind","InvalidDigit","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","Nan","NegOverflow","NonZeroI128","NonZeroI16","NonZeroI32","NonZeroI64","NonZeroI8","NonZeroIsize","NonZeroU128","NonZeroU16","NonZeroU32","NonZeroU64","NonZeroU8","NonZeroUsize","Normal","ParseFloatError","ParseIntError","PosOverflow","Subnormal","TryFromIntError","Wrapping","Zero","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","default","description","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","get","get","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","kind","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","not","not","not","not","not","not","not","not","not","not","not","not","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signum","signum","signum","signum","signum","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","Add","AddAssign","BREAK","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CONTINUE","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Included","Index","IndexMut","Mul","MulAssign","Neg","Not","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","Target","Try","Unbounded","Yield","Yielded","add","add_assign","as_mut","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","contains","contains","contains","contains","contains","contains","default","default","deref","deref_mut","div","div_assign","drop","end","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from_output","from_output","from_residual","from_residual","get","get","get","get","get","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","is_break","is_continue","is_empty","is_empty","last","last","map","map_break","max","max","min","min","mul","mul_assign","ne","ne","ne","ne","ne","ne","ne","ne","neg","new","next","next","next","next_back","next_back","not","nth","nth","nth","nth_back","nth_back","partial_cmp","rem","rem_assign","resume","rfold","shl","shl_assign","shr","shr_assign","size_hint","size_hint","size_hint","start","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","Box","Clone","Clone","Eq","Eq","PartialEq","PartialEq","Reverse","Vec","clone","clone_from","eq","ne","DynMetadata","Metadata","NonNull","Pointee","addr_of","addr_of_mut","align_of","as_mut","as_mut_ptr","as_non_null_ptr","as_ptr","as_ref","as_uninit_mut","as_uninit_ref","as_uninit_slice","as_uninit_slice_mut","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","cmp","copy","copy_nonoverlapping","dangling","drop_in_place","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from_raw_parts","from_raw_parts","from_raw_parts_mut","get_unchecked_mut","hash","hash","hash","into","into","layout","len","metadata","new","new_unchecked","null","null_mut","partial_cmp","partial_cmp","read","read_unaligned","read_volatile","replace","size_of","slice_from_raw_parts","slice_from_raw_parts","slice_from_raw_parts_mut","swap","swap_nonoverlapping","to_owned","to_owned","to_raw_parts","try_from","try_from","try_into","try_into","type_id","type_id","write","write_bytes","write_unaligned","write_volatile","Rc","Weak","as_ptr","as_ptr","as_ref","assume_init","assume_init","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","decrement_strong_count","default","default","deref","downcast","downgrade","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw","ge","get_mut","get_mut_unchecked","gt","hash","increment_strong_count","into","into","into_raw","into_raw","le","lt","make_mut","ne","new","new","new_cyclic","new_uninit","new_uninit_slice","new_zeroed","new_zeroed_slice","partial_cmp","pin","ptr_eq","ptr_eq","strong_count","strong_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_new","try_new_uninit","try_new_zeroed","try_unwrap","type_id","type_id","upgrade","weak_count","weak_count","Err","IntoIter","Iter","IterMut","Ok","Result","and","and_then","as_deref","as_deref_mut","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cloned","cloned","cmp","contains","contains_err","copied","copied","eq","err","expect","expect_err","flatten","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","from_output","from_residual","hash","into","into","into","into","into_err","into_iter","into_iter","into_iter","into_iter","into_ok","into_ok_or_err","is_err","is_ok","iter","iter_mut","map","map_err","map_or","map_or_else","ne","next","next","next","next_back","next_back","next_back","ok","or","or_else","partial_cmp","product","report","report","size_hint","size_hint","size_hint","sum","to_owned","to_owned","to_owned","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Concat","GroupBy","GroupByMut","Iter","IterMut","Join","Output","Output","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","Split","SplitMut","SplitN","SplitNMut","Windows","all","all","any","any","as_ref","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat","count","count","count","count","count","count","count","count","count","count","count","count","count","count","find","find","find_map","find_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_slice","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_sorted_by","join","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","len","len","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","position","position","range","remainder","remainder","remainder","rposition","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Bytes","CharIndices","Chars","EncodeUtf16","Err","EscapeDebug","EscapeDefault","EscapeUnicode","FromStr","Lines","LinesAny","MatchIndices","Matches","ParseBoolError","RMatchIndices","RMatches","RSplit","RSplitN","RSplitTerminator","Split","SplitAsciiWhitespace","SplitInclusive","SplitN","SplitTerminator","SplitWhitespace","Utf8Error","all","any","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","description","description","eq","eq","error_len","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_boxed_utf8_unchecked","from_str","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","last","last","last","last","last","last","len","ne","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth_back","offset","pattern","position","rfind","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid_up_to","CharPredicateSearcher","CharSearcher","CharSliceSearcher","Done","DoubleEndedSearcher","Match","Pattern","Reject","ReverseSearcher","SearchStep","Searcher","Searcher","StrSearcher","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","haystack","haystack","haystack","haystack","haystack","into","into","into","into","into","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","ne","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_match","next_match","next_match","next_match","next_match","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_reject","next_reject","next_reject","next_reject_back","next_reject_back","next_reject_back","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Arc","Barrier","BarrierWaitResult","Condvar","LockResult","Mutex","MutexGuard","ONCE_INIT","Once","OnceState","PoisonError","Poisoned","RwLock","RwLockReadGuard","RwLockWriteGuard","TryLockError","TryLockResult","WaitTimeoutResult","Weak","WouldBlock","as_ptr","as_ptr","as_ref","assume_init","assume_init","atomic","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_once","call_once_force","cause","cause","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decrement_strong_count","default","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","description","description","description","downcast","downgrade","drop","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw","ge","get_mut","get_mut","get_mut","get_mut","get_mut_unchecked","get_ref","gt","hash","increment_strong_count","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_raw","into_raw","is_completed","is_leader","is_poisoned","is_poisoned","is_poisoned","le","lock","lt","make_mut","mpsc","ne","ne","new","new","new","new","new","new","new","new","new_cyclic","new_uninit","new_uninit_slice","new_zeroed","new_zeroed_slice","notify_all","notify_one","partial_cmp","pin","ptr_eq","ptr_eq","read","source","strong_count","strong_count","timed_out","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_new","try_new_uninit","try_new_zeroed","try_pin","try_read","try_unwrap","try_write","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","upgrade","wait","wait","wait_timeout","wait_timeout_ms","wait_timeout_while","wait_while","weak_count","weak_count","write","ATOMIC_BOOL_INIT","ATOMIC_I16_INIT","ATOMIC_I32_INIT","ATOMIC_I64_INIT","ATOMIC_I8_INIT","ATOMIC_ISIZE_INIT","ATOMIC_U16_INIT","ATOMIC_U32_INIT","ATOMIC_U64_INIT","ATOMIC_U8_INIT","ATOMIC_USIZE_INIT","AcqRel","Acquire","AtomicBool","AtomicI16","AtomicI32","AtomicI64","AtomicI8","AtomicIsize","AtomicPtr","AtomicU16","AtomicU32","AtomicU64","AtomicU8","AtomicUsize","Ordering","Relaxed","Release","SeqCst","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compiler_fence","default","default","default","default","default","default","default","default","default","default","default","default","eq","fence","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","load","load","load","load","load","load","load","load","load","load","load","load","new","new","new","new","new","new","new","new","new","new","new","new","spin_loop_hint","store","store","store","store","store","store","store","store","store","store","store","store","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","Receiver","RecvError","RecvTimeoutError","SendError","Sender","SyncSender","Timeout","TryIter","TryRecvError","TrySendError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","description","description","description","description","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","iter","ne","ne","next","next","next","recv","recv_deadline","recv_timeout","send","send","sync_channel","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_recv","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","panicking","Duration","FromSecsError","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","ZERO","add","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","eq","eq","fmt","fmt","fmt","from","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","hash","into","into","is_zero","mul","mul_assign","mul_f32","mul_f64","ne","ne","new","partial_cmp","saturating_add","saturating_mul","saturating_sub","sub","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","to_owned","to_owned","to_string","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","type_id","type_id","Drain","DrainFilter","IntoIter","Splice","Vec","allocator","allocator","allocator","allocator","append","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","count","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drain_filter","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","hash","index","index_mut","insert","into","into","into","into","into","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_empty","is_empty","is_write_vectored","leak","len","ne","ne","ne","ne","ne","ne","new","new_in","next","next","next","next","next_back","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","set_len","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write","write_all","write_vectored"],"q":["sp_std","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::alloc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::boxed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::cell","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::clone","","","","sp_std::cmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::collections","","","sp_std::collections::btree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::collections::btree_setsp_std::collections::vec_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::convert","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::default","","","","sp_std::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::itersp_std::marker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::numsp_std::opssp_std::prelude","","","","","","","","","","","","","","sp_std::ptr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::rc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::slicesp_std::strsp_std::str::pattern","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::syncsp_std::sync::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::sync::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::thread","sp_std::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_std::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A target for <code>core::write!</code> macro - constructs a string in …","Memory allocation APIs.","This module implements the <code>Any</code> trait, which enables …","A module for working with borrowed data.","","","A pointer type for heap allocation.","Shareable mutable containers.","The <code>Clone</code> trait for types that cannot be ‘implicitly …","Functionality for ordering and comparison.","","Traits for conversions between types.","The <code>Default</code> trait for types which may have meaningful …","","Utilities for formatting and printing <code>String</code>s.","","Generic hashing support.","Feature gate some code that should only be run when <code>std</code> …","Access the content of this <code>Writer</code> e.g. for printout","","Convert into the content of this <code>Writer</code>","Composable external iteration.","","Primitive traits and types representing basic properties …","Basic functions for dealing with memory.","Additional functionality for numerics.","Overloadable operators.","Prelude of common useful imports.","Manually manage memory through raw pointers.","Single-threaded reference-counting pointers. ‘Rc’ …","Error handling with the <code>Result</code> type.","A dynamically-sized view into a contiguous sequence, <code>[T]</code>.","Unicode string slices.","Useful synchronization primitives.","","Temporal quantification.","","","","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","","The <code>AllocError</code> error indicates an allocation failure that …","An implementation of <code>Allocator</code> can allocate, grow, …","The global memory allocator.","A memory allocator that can be registered as the standard …","Layout of a block of memory.","","The parameters given to <code>Layout::from_size_align</code> or some …","The default memory allocator provided by the operating …","The minimum byte alignment for a memory block of this …","Creates a layout describing the record that can hold a …","Allocate memory with the global allocator.","Allocate memory as described by the given <code>layout</code>.","","Allocate zero-initialized memory with the global …","","Behaves like <code>alloc</code>, but also ensures that the contents …","Attempts to allocate a block of memory.","","","","Behaves like <code>allocate</code>, but also ensures that the returned …","","Creates a layout describing the record for a <code>[T; n]</code>.","","","","","","","","","","","Creates a “by reference” adaptor for this instance of …","","","","","","","","","","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …","Deallocate memory with the global allocator.","Deallocate the block of memory at the given <code>ptr</code> pointer …","","Deallocates the memory referenced by <code>ptr</code>.","","","","","","","","Creates a layout describing the record for <code>self</code> followed …","Creates a layout describing the record for <code>self</code> followed …","","","","","","","","Produces layout describing a record that could be used to …","Produces layout describing a record that could be used to …","","","","","","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …","Creates a layout, bypassing all checks.","","Attempts to extend the memory block.","","","Behaves like <code>grow</code>, but also ensures that the new contents …","","Abort on memory allocation error or failure.","","","","","","","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>…","Creates a layout by rounding the size of this layout up …","Returns the amount of padding we must insert after <code>self</code> …","Reallocate memory with the global allocator.","","Shrink or grow a block of memory to the given <code>new_size</code>. …","Creates a layout describing the record for <code>n</code> instances of …","Creates a layout describing the record for <code>n</code> instances of …","Registers a custom allocation error hook, replacing any …","","Attempts to shrink the memory block.","","The minimum size in bytes for a memory block of this …","Unregisters the current allocation error hook, returning …","","","","","","","","","","","","","","","","","","","","","","","A trait to emulate dynamic typing.","A <code>TypeId</code> represents a globally unique identifier for a …","","","","","","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns some mutable reference to the boxed value if it …","Returns some reference to the boxed value if it is of …","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>Any</code>.","","","","","","","","","Returns <code>true</code> if the boxed type is the same as <code>T</code>.","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>Any</code>.","","Returns the <code>TypeId</code> of the type this generic function has …","","","","","Gets the <code>TypeId</code> of <code>self</code>.","","Returns the name of a type as a string slice.","Returns the name of the type of the pointed-to value as a …","A trait for borrowing data.","A trait for mutably borrowing data.","Borrowed data.","A clone-on-write smart pointer.","Owned data.","The resulting type after obtaining ownership.","A generalization of <code>Clone</code> to borrowed data.","","","","","","","Immutably borrows from an owned value.","","","Mutably borrows from an owned value.","","","","Uses borrowed data to replace owned data, usually by …","","","Creates an owned Cow<’a, B> with the default value for …","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>String</code> into an <code>Owned</code> variant. No heap …","Converts a <code>String</code> reference into a <code>Borrowed</code> variant. No …","","","","Creates a clone-on-write pointer from a reference to …","Creates a clone-on-write pointer from an owned instance …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.","Creates a clone-on-write pointer from a reference to <code>Path</code>.","Converts a string slice into a <code>Borrowed</code> variant. No heap …","","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.","Creates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …","","","","","","","Extracts the owned data.","Returns true if the data is borrowed, i.e. if <code>to_mut</code> …","Returns true if the data is owned, i.e. if <code>to_mut</code> would …","","","","","","","","","","","","","","","","","","","","Acquires a mutable reference to the owned form of the …","Creates owned data from borrowed data, usually by cloning.","","","","","","","A pointer type for heap allocation.","Returns a reference to the underlying allocator.","","","Converts to <code>Box<T, A></code>.","Converts to <code>Box<[T], A></code>.","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","","","Creates a <code>Box<T></code>, with the <code>Default</code> value for T.","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","","","","","","","","","Converts a <code>[T; N]</code> into a <code>Box<[T]></code>","","Creates a boxed <code>Path</code> from a clone-on-write pointer.","Converts a <code>T</code> into a <code>Box<T></code>","Converts a <code>OsString</code> into a <code>Box</code><code><OsStr></code> without copying or …","","","","Converts a <code>&str</code> into a <code>Box<str></code>","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Converts a <code>PathBuf</code> into a <code>Box<Path></code>","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Creates a boxed <code>Path</code> from a reference.","","","Converts a <code>Box<str></code> into a <code>Box<[u8]></code>","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Convert a vector into a boxed slice.","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a <code>&[T]</code> into a <code>Box<[T]></code>","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","","Converts a <code>CString</code> into a <code>Box</code><code><CStr></code> without copying or …","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given …","","","","","","Converts a <code>Box<T></code> into a <code>Box<[T]></code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box<T></code> into a <code>Pin<Box<T>></code>","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference,…","","","","Allocates memory on the heap and then places <code>x</code> into it.","Allocates memory in the given allocator then places <code>x</code> …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin<Box<T>></code>. If <code>T</code> does not implement …","Constructs a new <code>Pin<Box<T, A>></code>. If <code>T</code> does not implement …","","","","","","","","","","","","","","","","","","","","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new <code>Box</code> with uninitialized contents, with …","Constructs a new <code>Box</code> with uninitialized contents, with …","","","","","","","","","","","","","","","","","","","An error returned by <code>RefCell::try_borrow</code>.","An error returned by <code>RefCell::try_borrow_mut</code>.","A mutable memory location.","Wraps a borrowed reference to a value in a <code>RefCell</code> box. A …","A mutable memory location with dynamically checked borrow …","A wrapper type for a mutably borrowed value from a …","The core primitive for interior mutability in Rust.","Returns a raw pointer to the underlying data in this cell.","Returns a raw pointer to the underlying data in this cell.","Returns a <code>&[Cell<T>]</code> from a <code>&Cell<[T]></code>","","","Immutably borrows the wrapped value.","","","","","","","Mutably borrows the wrapped value.","","","","","","","","Panics","Copies a <code>Ref</code>.","Panics","","","","Panics","Creates a <code>Cell<T></code>, with the <code>Default</code> value for T.","Creates a <code>RefCell<T></code>, with the <code>Default</code> value for T.","Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.","","","","","","","Panics","Makes a new <code>Ref</code> for an optional component of the borrowed …","Makes a new <code>RefMut</code> for an optional component of the …","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>&Cell<T></code> from a <code>&mut T</code>","","Panics","Returns a copy of the contained value.","Gets a mutable pointer to the wrapped value.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","","Panics","","","","","","","","Unwraps the value.","Consumes the <code>RefCell</code>, returning the wrapped value.","Unwraps the value.","","Panics","Convert into a reference to the underlying data.","Convert into a mutable reference to the underlying data.","","Panics","Makes a new <code>Ref</code> for a component of the borrowed data.","Makes a new <code>RefMut</code> for a component of the borrowed data, …","Splits a <code>Ref</code> into multiple <code>Ref</code>s for different components …","Splits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …","Creates a new <code>Cell</code> containing the given value.","Creates a new <code>RefCell</code> containing <code>value</code>.","Constructs a new instance of <code>UnsafeCell</code> which will wrap …","","Panics","Gets a mutable pointer to the wrapped value. The …","Replaces the contained value with <code>val</code>, and returns the …","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>…","Sets the contained value.","Swaps the values of two Cells. Difference with …","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Takes the value of the cell, leaving <code>Default::default()</code> …","Takes the wrapped value, leaving <code>Default::default()</code> in …","","","","","","","Immutably borrows the wrapped value, returning an error …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error …","","","","","","","","","","","","","","","","","","","","","","Undo the effect of leaked guards on the borrow state of …","Updates the contained value using a function and returns …","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","An ordering where a compared value is equal to another.","An ordering where a compared value is greater than …","An ordering where a compared value is less than another.","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","An <code>Ordering</code> is the result of a comparison between two …","Trait for equality comparisons which are partial …","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for values that can be compared for a sort-order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","A helper struct for reverse ordering.","","","","","Restrict a value to a certain interval.","","","","","","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","","","","This method tests greater than or equal to (for <code>self</code> and …","","This method tests greater than (for <code>self</code> and <code>other</code>) and …","","","","","","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the ordering is either the <code>Greater</code> or …","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","This method tests less than or equal to (for <code>self</code> and …","","This method tests less than (for <code>self</code> and <code>other</code>) and is …","","Compares and returns the maximum of two values.","Compares and returns the maximum of two values.","Returns the maximum of two values with respect to the …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Compares and returns the minimum of two values.","Returns the minimum of two values with respect to the …","Returns the element that gives the minimum value from the …","This method tests for <code>!=</code>.","","This method returns an ordering between <code>self</code> and <code>other</code> …","","","Reverses the <code>Ordering</code>.","Chains two orderings.","Chains the ordering with the given function.","","","","","","","","","A map based on a B-Tree.","A set based on a B-Tree.","A double-ended queue implemented with a growable ring …","A map based on a B-Tree.","An iterator produced by calling <code>drain_filter</code> on BTreeMap.","A view into a single entry in a map, which may either be …","An owning iterator over the entries of a <code>BTreeMap</code>.","An owning iterator over the keys of a <code>BTreeMap</code>.","An owning iterator over the values of a <code>BTreeMap</code>.","An iterator over the entries of a <code>BTreeMap</code>.","A mutable iterator over the entries of a <code>BTreeMap</code>.","An iterator over the keys of a <code>BTreeMap</code>.","An occupied entry.","A view into an occupied entry in a <code>BTreeMap</code>. It is part …","The error returned by <code>try_insert</code> when the key already …","An iterator over a sub-range of entries in a <code>BTreeMap</code>.","A mutable iterator over a sub-range of entries in a …","A vacant entry.","A view into a vacant entry in a <code>BTreeMap</code>. It is part of …","An iterator over the values of a <code>BTreeMap</code>.","A mutable iterator over the values of a <code>BTreeMap</code>.","Provides in-place mutable access to an occupied entry …","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","","","","","","","","","","","","Returns <code>true</code> if the map contains a value for the …","Creates an empty <code>BTreeMap</code>.","","Creates an iterator that visits all elements (key-value …","","","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","","","","","","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a reference to the value in the entry.","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","","Returns a reference to the value corresponding to the …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Inserts a key-value pair into the map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Take ownership of the key.","Creates a consuming iterator visiting all the keys, in …","Converts the entry into a mutable reference to its value.","Creates a consuming iterator visiting all the values, in …","Returns <code>true</code> if the map contains no elements.","Gets an iterator over the entries of the map, sorted by …","Gets a mutable iterator over the entries of the map, …","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map, in sorted …","","","","","","","","","","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>BTreeMap</code>.","","","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting, if empty, …","","Removes and returns the first element in the map. The key …","Removes and returns the last element in the map. The key …","Constructs a double-ended iterator over a sub-range of …","Constructs a mutable double-ended iterator over a …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the value at the …","Take ownership of the key and value from the map.","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","Splits the collection into two at the given key. Returns …","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","Gets an iterator over the values of the map, in order by …","Gets a mutable iterator over the values of the map, in …","A set based on a B-Tree.","A lazy iterator producing elements in the difference of …","An iterator produced by calling <code>drain_filter</code> on BTreeSet.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>BTreeSet</code>.","An iterator over the items of a <code>BTreeSet</code>.","An iterator over a sub-range of items in a <code>BTreeSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of …","Moves all elements from <code>other</code> into <code>Self</code>, leaving <code>other</code> …","","","","","","","","","","","","","","","","","","","Clears the set, removing all values.","","","","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>BTreeSet</code>.","Visits the values representing the difference, i.e., the …","Creates an iterator that visits all values in ascending …","","","","","","","Returns a reference to the first value in the set, if any.…","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","","Adds a value to the set.","Visits the values representing the intersection, i.e., …","","","","","","","","","","","","","","","","Gets an iterator for moving out the <code>BTreeSet</code>’s contents.","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","Gets an iterator that visits the values in the <code>BTreeSet</code> …","","Returns a reference to the last value in the set, if any. …","","","Returns the number of elements in the set.","","","","","","","","","","","Makes a new, empty <code>BTreeSet</code>.","","","","","","","","","","","","","Removes the first value from the set and returns it, if …","Removes the last value from the set and returns it, if …","Constructs a double-ended iterator over a sub-range of …","Removes a value from the set. Returns whether the value …","Adds a value to the set, replacing the existing value, if …","Retains only the elements specified by the predicate.","","","","","","","","Splits the collection into two at the given value. …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","A draining iterator over the elements of a <code>VecDeque</code>.","An owning iterator over the elements of a <code>VecDeque</code>.","An iterator over the elements of a <code>VecDeque</code>.","A mutable iterator over the elements of a <code>VecDeque</code>.","A double-ended queue implemented with a growable ring …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns a pair of slices which contain, in order, the …","Returns a pair of slices which contain, in order, the …","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Binary searches this sorted <code>VecDeque</code> for a given element.","Binary searches this sorted <code>VecDeque</code> with a comparator …","Binary searches this sorted <code>VecDeque</code> with a key …","","","","","","","","","","","Returns the number of elements the <code>VecDeque</code> can hold …","Clears the <code>VecDeque</code>, removing all values.","","","","","","","","","Returns <code>true</code> if the <code>VecDeque</code> contains an element equal to …","Creates an empty <code>VecDeque<T></code>.","Creates a draining iterator that removes the specified …","","","","","","","","","","","","","","","","","","","","","","","","","","Turn a <code>Vec<T></code> into a <code>VecDeque<T></code>.","","","","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code>…","Provides a reference to the element at the given index.","Provides a mutable reference to the element at the given …","","","","Inserts an element at <code>index</code> within the <code>VecDeque</code>, shifting …","","","","","","","","","Consumes the <code>VecDeque</code> into a front-to-back iterator …","","","","Returns <code>true</code> if the <code>VecDeque</code> is empty.","","Returns a front-to-back iterator.","Returns a front-to-back iterator that returns mutable …","","","Returns the number of elements in the <code>VecDeque</code>.","Rearranges the internal storage of this deque so it is …","Creates an empty <code>VecDeque</code>.","","","","","","","","","","","","Returns the index of the partition point according to the …","Removes the last element from the <code>VecDeque</code> and returns …","Removes the first element and returns it, or <code>None</code> if the …","Appends an element to the back of the <code>VecDeque</code>.","Prepends an element to the <code>VecDeque</code>.","Creates an iterator that covers the specified range in …","Creates an iterator that covers the specified mutable …","Removes and returns the element at <code>index</code> from the <code>VecDeque</code>…","Reserves capacity for at least <code>additional</code> more elements …","Reserves the minimum capacity for exactly <code>additional</code> more …","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …","Modifies the <code>VecDeque</code> in-place so that <code>len()</code> is equal to …","Retains only the elements specified by the predicate.","","","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","Shrinks the capacity of the <code>VecDeque</code> with a lower bound.","Shrinks the capacity of the <code>VecDeque</code> as much as possible.","","","","","Splits the <code>VecDeque</code> into two at the given index.","Swaps elements at indices <code>i</code> and <code>j</code>.","Removes an element from anywhere in the <code>VecDeque</code> and …","Removes an element from anywhere in the <code>VecDeque</code> and …","","","","Shortens the <code>VecDeque</code>, keeping the first <code>len</code> elements and …","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for exactly …","","","","","","","Creates an empty <code>VecDeque</code> with space for at least <code>capacity</code>…","Used to do a cheap mutable-to-mutable reference …","Used to do a cheap reference-to-reference conversion.","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …","Used to do value-to-value conversions while consuming the …","The error type for errors that can never happen.","A value-to-value conversion that consumes the input …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Performs the conversion.","Performs the conversion.","","","","","","","","","","Performs the conversion.","","","","","The identity function.","Performs the conversion.","","","","","Performs the conversion.","","Performs the conversion.","","","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","Return the default value of a type according to the …","Returns the “default value” for a type.","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","","","","","","","","","","","","","","","","","","","","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an …","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","Writes some formatted information into this instance.","","Writes a string slice into this writer, returning whether …","","Writes some data to the underlying buffer contained …","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","An implementation of SipHash 2-4.","","","","","Creates a new hasher.","","","","","","","","","Returns the hash value for the values written so far.","","","","","","Feeds this value into the given <code>Hasher</code>.","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","","","Creates a new <code>SipHasher</code> with the two initial keys set to …","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","Writes some data into this <code>Hasher</code>.","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","An iterator that links two iterators together, in a chain.","An iterator that clones the elements of an underlying …","An iterator that copies the elements of an underlying …","An iterator that repeats endlessly.","An iterator able to yield elements from both ends.","An iterator that yields nothing.","An iterator that yields the current count and the element …","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","An iterator that filters the elements of <code>iter</code> with …","An iterator that uses <code>f</code> to both filter and map elements …","An iterator that maps each element to an iterator, and …","An iterator that flattens one level of nesting in an …","An iterator where each iteration calls the provided …","Conversion from an <code>Iterator</code>.","An iterator that yields <code>None</code> forever after the underlying …","An iterator that always continues to yield <code>None</code> when …","An iterator that calls a function with a reference to …","An iterator adapter that places a separator between all …","An iterator adapter that places a separator between all …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","An interface for dealing with iterators.","An iterator that maps the values of <code>iter</code> with <code>f</code>.","An iterator that only accepts elements while <code>predicate</code> …","An iterator that yields an element exactly once.","An iterator that yields a single element of type <code>A</code> by …","An iterator with a <code>peek()</code> that returns an optional …","Trait to represent types that can be created by …","An iterator that repeats an element endlessly.","An iterator that repeats elements of type <code>A</code> endlessly by …","A double-ended iterator with the direction inverted.","An iterator to maintain state while iterating another …","An iterator that skips over <code>n</code> elements of <code>iter</code>.","An iterator that rejects elements while <code>predicate</code> returns …","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …","An iterator for stepping iterators by a custom amount.","An new iterator where each successive item is computed …","Trait to represent types that can be created by summing …","An iterator that only iterates over the first <code>n</code> …","An iterator that only accepts elements while <code>predicate</code> …","An iterator that reports an accurate length using …","A type that upholds all invariants of <code>Step</code>.","An iterator that iterates two other iterators …","Advances the iterator from the back by <code>n</code> elements.","","","","Advances the iterator by <code>n</code> elements.","","","","Tests if every element of the iterator matches a …","Tests if any element of the iterator matches a predicate.","Returns the value that would be obtained by taking the <em>…","Returns the value that would be obtained by taking the <em>…","Returns the value that would be obtained by taking the <em>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Takes two iterators and creates a new iterator over both …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which <code>clone</code>s all of its elements.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","","","","","","","","","Repeats an iterator endlessly.","","Creates an iterator that yields nothing.","Creates an iterator which gives the current iteration …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","","","","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds every element into an accumulator by applying an …","","","","","","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","Returns the value that would be obtained by taking the <em>…","Returns the value that would be obtained by taking the <em>…","Returns the value that would be obtained by taking the <em>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new iterator where each iteration calls the …","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator from a value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the iterator is empty.","","","","","","","","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Consumes the iterator, returning the last element.","","","","","","","Determines if the elements of this <code>Iterator</code> are …","","Returns the exact length of the iterator.","","","","","","","","","","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Determines if the elements of this <code>Iterator</code> are unequal …","Advances the iterator and returns the next value.","","","","","","","","","Overflow Behavior","","","","","","","","","","","","","","","","","","","","","","","Removes and returns an element from the end of the …","","","","","","","","","","","","","","","","","","","","","","Consume and return the next value of this iterator if a …","Consume and return the next item if it is equal to …","Returns the <code>n</code>th element of the iterator.","","","","","","","","","","","","Returns the <code>n</code>th element from the end of the iterator.","","","","","","","","","Creates an iterator that yields an element exactly once.","Creates an iterator that lazily generates a value exactly …","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Returns a reference to the next() value without advancing …","Returns a mutable reference to the next() value without …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Method which takes an iterator and generates <code>Self</code> from …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Creates a new iterator that endlessly repeats a single …","Creates a new iterator that repeats elements of type <code>A</code> …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","","","","","","An iterator method that reduces the iterator’s elements …","","","","","","","","","","","","","","","Searches for an element in an iterator from the right, …","An iterator adaptor similar to <code>fold</code> that holds internal …","","","","","Returns the bounds on the remaining length of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Returns the number of <em>successor</em> steps required to get …","Creates a new iterator where each successive item is …","Method which takes an iterator and generates <code>Self</code> from …","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies function to the elements of iterator and returns …","","","An iterator method that applies a function as long as it …","","","","","","","","","","","","","","","","","","","","An iterator method that applies a fallible function to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is the reverse version of <code>Iterator::try_fold()</code>: it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an iterator of pairs into a pair of containers.","Converts the arguments to iterators and zips them.","‘Zips up’ two iterators into a single iterator of …","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","The type of the discriminant, which must satisfy the trait…","Compiler-internal trait used to indicate the type of enum …","Zero-sized type used to mark things that “act like” …","A marker type which does not implement <code>Unpin</code>.","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Required trait for constants used in pattern matches.","Required trait for constants used in pattern matches.","Types for which it is safe to share references between …","Types that can be safely moved after being pinned.","Types that can be “unsized” to a dynamically-sized …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Opaque type representing the discriminant of an enum.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Returns the ABI-required minimum alignment of a type.","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","Extracts the values from an array of <code>MaybeUninit</code> …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit<T></code> container. …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit<T></code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","","","","","","","","","Returns a value uniquely identifying the enum variant in <code>v</code>…","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","Takes ownership and “forgets” about the value <strong>without …","Like <code>forget</code>, but also accepts unsized values.","","","","","","","","","Extracts the value from the <code>ManuallyDrop</code> container.","Returns the ABI-required minimum alignment of a type.","Returns the ABI-required minimum alignment of the type of …","","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit<T></code> initialized with the given …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop<T></code> container out.","","","","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&U</code>, and then reads <code>src</code> …","","","","","","","","","","Creates a new <code>MaybeUninit<T></code> in an uninitialized state.","Create a new array of <code>MaybeUninit<T></code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","Returns the number of variants in the enum type <code>T</code>.","Sets the value of the <code>MaybeUninit<T></code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit<T></code> in an uninitialized state, …","","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Value being parsed is empty.","A classification of floating point numbers.","Positive or negative infinity.","Enum to store the various types of errors that can cause …","Contains an invalid digit in its context.","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","Returns the smallest value that can be represented by …","“Not a Number”, often obtained by dividing by zero.","Integer is too small to store in target integer type.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","A regular floating point number.","An error which can be returned when parsing a float.","An error which can be returned when parsing an integer.","Integer is too large to store in target integer type.","De-normalized floating point representation (less precise …","The error type returned when a checked integral type …","Provides intentionally-wrapped arithmetic on <code>T</code>.","Value was Zero","Positive or negative zero.","Computes the absolute value of self.","Computes the absolute value of self.","Computes the absolute value of self.","Computes the absolute value of self.","Computes the absolute value of self.","Computes the absolute value of self.","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …hecked absolute value. Check for overflow and returns …","Checked absolute value. Check for overflow and returns …","Checked absolute value. Check for overflow and returns …","Checked absolute value. Check for overflow and returns …","Checked absolute value. Check for overflow and returns …","Checked absolute value. Check for overflow and returns …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Add an unsigned integer to a non-zero value. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Multiply two non-zero integers together. Check for …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","Raise non-zero value to an integer power. Check for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>NonZeroU8</code> to <code>NonZeroU16</code> losslessly.","","Converts <code>NonZeroU16</code> to <code>NonZeroU32</code> losslessly.","","Converts <code>NonZeroU8</code> to <code>NonZeroU32</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroU64</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU64</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU64</code> losslessly.","","Converts <code>NonZeroU32</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU128</code> losslessly.","","Converts <code>NonZeroU64</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroUsize</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroUsize</code> losslessly.","","","Converts <code>NonZeroU8</code> to <code>NonZeroI16</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI16</code> losslessly.","","","Converts <code>NonZeroI8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI64</code> losslessly.","","Converts <code>NonZeroI32</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU64</code> to <code>NonZeroI128</code> losslessly.","","Converts <code>NonZeroU16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI64</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroIsize</code> losslessly.","","Converts <code>NonZeroU8</code> to <code>NonZeroIsize</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroIsize</code> losslessly.","","","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","","","","","","","","","","","","","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == (1 << k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 << k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 << k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 << k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 << k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 << k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Outputs the detailed cause of parsing an integer failing.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","Returns the smallest power of two greater than or equal …","","","","","","","","","","","","","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","","","","","","","","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating absolute value, see","Saturating absolute value, see","Saturating absolute value, see","Saturating absolute value, see","Saturating absolute value, see","Saturating absolute value, see","Add an unsigned integer to a non-zero value.","Add an unsigned integer to a non-zero value.","Add an unsigned integer to a non-zero value.","Add an unsigned integer to a non-zero value.","Add an unsigned integer to a non-zero value.","Add an unsigned integer to a non-zero value.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Multiply two non-zero integers together.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","Raise non-zero value to an integer power.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to big endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","","","","","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU8</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>u8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>u16</code> to <code>NonZeroU16</code>.","","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>u32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU32</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU64</code>.","","Attempts to convert <code>u64</code> to <code>NonZeroU64</code>.","Attempts to convert <code>u128</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU128</code>.","","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>usize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroUsize</code>.","","Attempts to convert <code>i8</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU8</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI8</code>.","","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI16</code>.","Attempts to convert <code>i16</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>i32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI32</code>.","","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI64</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>i64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI64</code>.","","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI128</code>.","Attempts to convert <code>i128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>isize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroIsize</code>.","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroIsize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Add an unsigned integer to a non-zero value, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Multiply two non-zero integers together, assuming …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Wrapping absolute value, see","Wrapping absolute value, see","Wrapping absolute value, see","Wrapping absolute value, see","Wrapping absolute value, see","Wrapping absolute value, see","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","APIs like <code>try_for_each</code> don’t need values with <code>Break</code>, so …","The bitwise AND operator <code>&</code>.","The bitwise AND assignment operator <code>&=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","It’s frequently the case that there’s no value needed …","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>…","This is used for object safety, to check that a method’…","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in …","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","The unary logical negation operator <code>!</code>.","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code><<</code> operator.","The resulting type after applying the <code>>></code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","The type of the value passed to …","The type of value this generator returns.","The left shift operator <code><<</code>. Note that because this trait …","The left shift assignment operator <code><<=</code>.","The right shift operator <code>>></code>. Note that because this trait …","The right shift assignment operator <code>>>=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","An infinite endpoint. Indicates that there is no bound in …","The type of value this generator yields.","The generator suspended with a value.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","Converts from <code>&mut Bound<T></code> to <code>Bound<&mut T></code>.","Converts from <code>&Bound<T></code> to <code>Bound<&T></code>.","Performs the <code>&</code> operation.","Performs the <code>&=</code> operation.","Performs the <code>|</code> operation.","Performs the <code>|=</code> operation.","Performs the <code>^</code> operation.","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","","","","","","","","","","","","","","","","","","","Map a <code>Bound<&T></code> to a <code>Bound<T></code> by cloning the contents of …","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","","","Dereferences the value.","Mutably dereferences the value.","Performs the <code>/</code> operation.","Performs the <code>/=</code> operation.","Executes the destructor for this type.","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs the type from its <code>Output</code> type.","","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) …","","","","","","","","","","","","","","","","","","","","","","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","","","","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","","","Maps a <code>Bound<T></code> to a <code>Bound<U></code> by applying a function to …","Maps <code>ControlFlow<B, C></code> to <code>ControlFlow<T, C></code> by applying a …","","","","","Performs the <code>*</code> operation.","Performs the <code>*=</code> operation.","","","","","","","","","Performs the unary <code>-</code> operation.","Creates a new inclusive range. Equivalent to writing …","","","","","","Performs the unary <code>!</code> operation.","","","","","","","Performs the <code>%</code> operation.","Performs the <code>%=</code> operation.","Resumes the execution of this generator.","","Performs the <code><<</code> operation.","Performs the <code><<=</code> operation.","Performs the <code>>></code> operation.","Performs the <code>>>=</code> operation.","","","","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","","","","","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A pointer type for heap allocation.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Trait for equality comparisons which are partial …","Derive macro generating an impl of the trait <code>PartialEq</code>.","A helper struct for reverse ordering.","A contiguous growable array type, written as <code>Vec<T></code> and …","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","This method tests for <code>!=</code>.","The metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.","The type for metadata in pointers and references to <code>Self</code>.","<code>*mut T</code> but non-zero and covariant.","Provides the pointer metadata type of any pointed-to type.","Create a <code>const</code> raw pointer to a place, without creating …","Create a <code>mut</code> raw pointer to a place, without creating an …","Returns the alignment of the type associated with this …","Returns a unique reference to the value. If the value may …","Returns a raw pointer to the slice’s buffer.","Returns a non-null pointer to the slice’s buffer.","Acquires the underlying <code>*mut</code> pointer.","Returns a shared reference to the value. If the value may …","Returns a unique references to the value. In contrast to …","Returns a shared references to the value. In contrast to …","Returns a shared reference to a slice of possibly …","Returns a unique reference to a slice of possibly …","","","","","Casts to a pointer of another type.","","","","","","","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies <code>count * size_of::<T>()</code> bytes from <code>src</code> to <code>dst</code>. The …","Creates a new <code>NonNull</code> that is dangling, but well-aligned.","Executes the destructor (if any) of the pointed-to value.","Compares raw pointers for equality.","","","","","","","","","","Forms a (possibly-wide) raw pointer from a data address …","Performs the same functionality as …","Performs the same functionality as <code>from_raw_parts</code>, except …","Returns a raw pointer to an element or subslice, without …","Hash a raw pointer.","","","","","Returns the size and alignment together as a <code>Layout</code>","Returns the length of a non-null raw slice.","Extract the metadata component of a pointer.","Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.","Creates a new <code>NonNull</code>.","Creates a null raw pointer.","Creates a null mutable raw pointer.","","","Reads the value from <code>src</code> without moving it. This leaves …","Reads the value from <code>src</code> without moving it. This leaves …","Performs a volatile read of the value from <code>src</code> without …","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code>…","Returns the size of the type associated with this vtable.","Forms a raw slice from a pointer and a length.","Creates a non-null raw slice from a thin pointer and a …","Performs the same functionality as <code>slice_from_raw_parts</code>, …","Swaps the values at two mutable locations of the same …","Swaps <code>count * size_of::<T>()</code> bytes between the two …","","","Decompose a (possibly wide) pointer into its address and …","","","","","","","Overwrites a memory location with the given value without …","Sets <code>count * size_of::<T>()</code> bytes of memory starting at …","Overwrites a memory location with the given value without …","Performs a volatile write of a memory location with the …","A single-threaded reference-counting pointer. ‘Rc’ …","<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …","Provides a raw pointer to the data.","Returns a raw pointer to the object <code>T</code> pointed to by this …","","Converts to <code>Rc<T></code>.","Converts to <code>Rc<[T]></code>.","","","","","","Makes a clone of the <code>Rc</code> pointer.","Makes a clone of the <code>Weak</code> pointer that points to the same …","","","Comparison for two <code>Rc</code>s.","Decrements the strong reference count on the <code>Rc<T></code> …","Creates a new <code>Rc<T></code>, with the <code>Default</code> value for <code>T</code>.","Constructs a new <code>Weak<T></code>, without allocating any memory. …","","Attempt to downcast the <code>Rc<dyn Any></code> to a concrete type.","Creates a new <code>Weak</code> pointer to this allocation.","Drops the <code>Rc</code>.","Drops the <code>Weak</code> pointer.","Equality for two <code>Rc</code>s.","","","","","","Allocate a reference-counted slice and fill it by cloning …","Converts a <code>OsString</code> into a <code>Rc</code><code><OsStr></code> without copying or …","","Converts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into …","Allocate a reference-counted slice and move <code>v</code>’s items …","Create a reference-counted pointer from a clone-on-write …","Allocate a reference-counted string slice and copy <code>v</code> into …","","Allocate a reference-counted string slice and copy <code>v</code> into …","Converts a <code>CString</code> into a <code>Rc</code><code><CStr></code> without copying or …","","Move a boxed object to a new, reference counted, …","Converts a generic type <code>T</code> into a <code>Rc<T></code>","Converts a <code>PathBuf</code> into an <code>Rc</code> by moving the <code>PathBuf</code> data …","","Takes each element in the <code>Iterator</code> and collects it into …","Constructs an <code>Rc<T></code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> …","‘Greater than or equal to’ comparison for two <code>Rc</code>s.","Returns a mutable reference into the given <code>Rc</code>, if there …","Returns a mutable reference into the given <code>Rc</code>, without …","Greater-than comparison for two <code>Rc</code>s.","","Increments the strong reference count on the <code>Rc<T></code> …","","","Consumes the <code>Rc</code>, returning the wrapped pointer.","Consumes the <code>Weak<T></code> and turns it into a raw pointer.","‘Less than or equal to’ comparison for two <code>Rc</code>s.","Less-than comparison for two <code>Rc</code>s.","Makes a mutable reference into the given <code>Rc</code>.","Inequality for two <code>Rc</code>s.","Constructs a new <code>Rc<T></code>.","Constructs a new <code>Weak<T></code>, without allocating any memory. …","Constructs a new <code>Rc<T></code> using a weak reference to itself. …","Constructs a new <code>Rc</code> with uninitialized contents.","Constructs a new reference-counted slice with …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new reference-counted slice with …","Partial comparison for two <code>Rc</code>s.","Constructs a new <code>Pin<Rc<T>></code>. If <code>T</code> does not implement <code>Unpin</code>…","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Weak</code>s point to the same …","Gets the number of strong (<code>Rc</code>) pointers to this …","Gets the number of strong (<code>Rc</code>) pointers pointing to this …","","","","","","","","","Constructs a new <code>Rc<T></code>, returning an error if the …","Constructs a new <code>Rc</code> with uninitialized contents, …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Returns the inner value, if the <code>Rc</code> has exactly one strong …","","","Attempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …","Gets the number of <code>Weak</code> pointers to this allocation.","Gets the number of <code>Weak</code> pointers pointing to this …","Contains the error value","An iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.","An iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>…","An iterator over a mutable reference to the <code>Ok</code> variant of …","Contains the success value","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code>…","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Converts from <code>Result<T, E></code> (or <code>&Result<T, E></code>) to …","Converts from <code>Result<T, E></code> (or <code>&mut Result<T, E></code>) to …","Converts from <code>&mut Result<T, E></code> to <code>Result<&mut T, &mut E></code>.","Converts from <code>&Result<T, E></code> to <code>Result<&T, &E></code>.","","","","","","","","","","","","","","","","","Maps a <code>Result<&mut T, E></code> to a <code>Result<T, E></code> by cloning the …","Maps a <code>Result<&T, E></code> to a <code>Result<T, E></code> by cloning the …","","Returns <code>true</code> if the result is an <code>Ok</code> value containing the …","Returns <code>true</code> if the result is an <code>Err</code> value containing the …","Maps a <code>Result<&T, E></code> to a <code>Result<T, E></code> by copying the …","Maps a <code>Result<&mut T, E></code> to a <code>Result<T, E></code> by copying the …","","Converts from <code>Result<T, E></code> to <code>Option<E></code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Converts from <code>Result<Result<T, E>, E></code> to <code>Result<T, E></code>","","","","","","","","","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","","","","Returns the contained <code>Err</code> value, but never panics.","Returns a consuming iterator over the possibly contained …","","","","Returns the contained <code>Ok</code> value, but never panics.","Returns the <code>Ok</code> value if <code>self</code> is <code>Ok</code>, and the <code>Err</code> value if …","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Ok</code>.","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps a <code>Result<T, E></code> to <code>Result<U, E></code> by applying a …","Maps a <code>Result<T, E></code> to <code>Result<T, F></code> by applying a …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result<T, E></code> to <code>U</code> by applying a fallback function …","","","","","","","","Converts from <code>Result<T, E></code> to <code>Option<T></code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code>…","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a …","","","","","","","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value,…","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","Helper trait for <code>[T]::concat</code>.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable …","Immutable slice iterator","Mutable slice iterator.","Helper trait for <code>[T]::join</code>","The output type returned by methods.","The resulting type after concatenation","The resulting type after concatenation","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","","","","","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of <code>[T]::concat</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a reference to T into a slice of length 1 …","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this …","Returns a mutable reference to the output at this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Views the underlying data as a subslice of the original …","","","","","","","","","","","Implementation of <code>[T]::join</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the bytes of a string slice.","An iterator over the <code>char</code>s of a string slice, and their …","An iterator over the <code>char</code>s of a string slice.","An iterator of <code>u16</code> over the string encoded as UTF-16.","The associated error which can be returned from parsing.","The return type of <code>str::escape_debug</code>.","The return type of <code>str::escape_default</code>.","The return type of <code>str::escape_unicode</code>.","Parse a value from a string","An iterator over the lines of a string, as string slices.","Created with the method <code>lines_any</code>.","Created with the method <code>match_indices</code>.","Created with the method <code>matches</code>.","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails","Created with the method <code>rmatch_indices</code>.","Created with the method <code>rmatches</code>.","Created with the method <code>rsplit</code>.","Created with the method <code>rsplitn</code>.","Created with the method <code>rsplit_terminator</code>.","Created with the method <code>split</code>.","An iterator over the non-ASCII-whitespace substrings of a …","An iterator over the substrings of a string, terminated …","Created with the method <code>splitn</code>.","Created with the method <code>split_terminator</code>.","An iterator over the non-whitespace substrings of a …","Errors which can occur when attempting to interpret a …","","","Returns remainder of the splitted string","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns remainder of the splitted string","Returns remainder of the splitted string","Returns remainder of the splitted string","Returns remainder of the splitted string","Returns remainder of the splitted string","Returns remainder of the splitted string","Returns remainder of the splitted string","Returns remainder of the splitted string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides more information about the failure:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a boxed slice of bytes to a boxed string slice …","Parses a string <code>s</code> to return a value of this type.","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the byte position of the next character, or the …","The string Pattern API.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the index in the given string up to which valid …","Associated type for <code><F as Pattern<\'a>>::Searcher</code>.","Associated type for <code><char as Pattern<\'a>>::Searcher</code>.","Associated type for <code><&[char] as Pattern<\'a>>::Searcher</code>.","Expresses that every byte of the haystack has been …","A marker trait to express that a <code>ReverseSearcher</code> can be …","Expresses that a match of the pattern has been found at …","A string pattern.","Expresses that <code>haystack[a..b]</code> has been rejected as a …","A reverse searcher for a string pattern.","Result of calling <code>Searcher::next()</code> or …","A searcher for a string pattern.","Associated searcher for this pattern","Associated type for <code><&str as Pattern<\'a>>::Searcher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Getter for the underlying string to be searched in","","","","","","","","","","Constructs the associated searcher from <code>self</code> and the …","Checks whether the pattern matches anywhere in the …","Checks whether the pattern matches at the front of the …","Checks whether the pattern matches at the back of the …","","Performs the next search step starting from the front.","","","","","Performs the next search step starting from the back.","","","","","Finds the next <code>Match</code> result. See <code>next()</code>.","","","","","Finds the next <code>Match</code> result. See <code>next_back()</code>.","","","","","Finds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.","","","Finds the next <code>Reject</code> result. See <code>next_back()</code>.","","","Removes the pattern from the front of haystack, if it …","Removes the pattern from the back of haystack, if it …","","","","","","","","","","","","","","","","","","","","","A thread-safe reference-counting pointer. ‘Arc’ …","A barrier enables multiple threads to synchronize the …","A <code>BarrierWaitResult</code> is returned by <code>Barrier::wait()</code> when …","A Condition Variable","A type alias for the result of a lock method which can be …","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Initialization value for static <code>Once</code> values.","A synchronization primitive which can be used to run a …","State yielded to <code>Once::call_once_force()</code>’s closure …","A type of error which can be returned whenever a lock is …","The lock could not be acquired because another thread …","A reader-writer lock","RAII structure used to release the shared read access of …","RAII structure used to release the exclusive write access …","An enumeration of possible errors associated with a …","A type alias for the result of a nonblocking locking …","A type indicating whether a timed wait on a condition …","<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning …","The lock could not be acquired at this time because the …","Provides a raw pointer to the data.","Returns a raw pointer to the object <code>T</code> pointed to by this …","","Converts to <code>Arc<[T]></code>.","Converts to <code>Arc<T></code>.","Atomic types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs an initialization routine once and only once. …","Performs the same function as <code>call_once()</code> except ignores …","","","","Makes a clone of the <code>Arc</code> pointer.","Makes a clone of the <code>Weak</code> pointer that points to the same …","","","","Comparison for two <code>Arc</code>s.","Decrements the strong reference count on the <code>Arc<T></code> …","Creates a <code>Condvar</code> which is ready to be waited on and …","Creates a <code>Mutex<T></code>, with the <code>Default</code> value for T.","Creates a new <code>RwLock<T></code>, with the <code>Default</code> value for T.","Creates a new <code>Arc<T></code>, with the <code>Default</code> value for <code>T</code>.","Constructs a new <code>Weak<T></code>, without allocating memory. …","","","","","","","","","","Attempt to downcast the <code>Arc<dyn Any + Send + Sync></code> to a …","Creates a new <code>Weak</code> pointer to this allocation.","","","","Drops the <code>Arc</code>.","Drops the <code>Weak</code> pointer.","","Equality for two <code>Arc</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new mutex in an unlocked state ready for use. …","","","","","","","","","","Creates a new instance of an <code>RwLock<T></code> which is unlocked. …","","","","","Converts a <code>PathBuf</code> into an <code>Arc</code> by moving the <code>PathBuf</code> data …","Converts a <code>T</code> into an <code>Arc<T></code>","","Allocate a reference-counted slice and fill it by cloning …","Allocate a reference-counted slice and move <code>v</code>’s items …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …","Create an atomically reference-counted pointer from a …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts a <code>OsString</code> into a <code>Arc</code><code><OsStr></code> without copying or …","","","Converts a <code>CString</code> into a <code>Arc</code><code><CStr></code> without copying or …","Move a boxed object to a new, reference-counted …","","Takes each element in the <code>Iterator</code> and collects it into …","Constructs an <code>Arc<T></code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> …","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a mutable reference to the underlying data.","Reaches into this error indicating that a lock is …","Returns a mutable reference to the underlying data.","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference into the given <code>Arc</code>, without …","Reaches into this error indicating that a lock is …","Greater-than comparison for two <code>Arc</code>s.","","Increments the strong reference count on the <code>Arc<T></code> …","","","","","","","","","","","","","","","","Consumes this mutex, returning the underlying data.","Consumes this error indicating that a lock is poisoned, …","Consumes this <code>RwLock</code>, returning the underlying data.","Consumes the <code>Arc</code>, returning the wrapped pointer.","Consumes the <code>Weak<T></code> and turns it into a raw pointer.","Returns <code>true</code> if some <code>call_once()</code> call has completed …","Returns <code>true</code> if this thread is the “leader thread” …","Determines whether the mutex is poisoned.","Determines whether the lock is poisoned.","Returns <code>true</code> if the associated <code>Once</code> was poisoned prior to …","‘Less than or equal to’ comparison for two <code>Arc</code>s.","Acquires a mutex, blocking the current thread until it is …","Less-than comparison for two <code>Arc</code>s.","Makes a mutable reference into the given <code>Arc</code>.","Multi-producer, single-consumer FIFO queue communication …","","Inequality for two <code>Arc</code>s.","Creates a new barrier that can block a given number of …","Creates a new condition variable which is ready to be …","Creates a new mutex in an unlocked state ready for use.","Creates a new <code>Once</code> value.","Creates a <code>PoisonError</code>.","Creates a new instance of an <code>RwLock<T></code> which is unlocked.","Constructs a new <code>Arc<T></code>.","Constructs a new <code>Weak<T></code>, without allocating any memory. …","Constructs a new <code>Arc<T></code> using a weak reference to itself. …","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Arc</code> with uninitialized contents, with …","Constructs a new atomically reference-counted slice with …","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","Partial comparison for two <code>Arc</code>s.","Constructs a new <code>Pin<Arc<T>></code>. If <code>T</code> does not implement …","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Weak</code>s point to the same …","Locks this rwlock with shared read access, blocking the …","","Gets the number of strong (<code>Arc</code>) pointers to this …","Gets the number of strong (<code>Arc</code>) pointers pointing to this …","Returns <code>true</code> if the wait was known to have timed out.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this lock.","Constructs a new <code>Arc<T></code>, returning an error if allocation …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Arc</code> with uninitialized contents, with …","Constructs a new <code>Pin<Arc<T>></code>, return an error if …","Attempts to acquire this rwlock with shared read access.","Returns the inner value, if the <code>Arc</code> has exactly one …","Attempts to lock this rwlock with exclusive write access.","","","","","","","","","","","","","","","","Immediately drops the guard, and consequently unlocks the …","Attempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …","Blocks the current thread until all threads have …","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Blocks the current thread until this condition variable …","Gets the number of <code>Weak</code> pointers to this allocation.","Gets an approximation of the number of <code>Weak</code> pointers …","Locks this rwlock with exclusive write access, blocking …","An <code>AtomicBool</code> initialized to <code>false</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","A boolean type which can be safely shared between threads.","An integer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","A raw pointer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","An integer type which can be safely shared between …","Atomic memory orderings","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","Returns a mutable pointer to the underlying <code>bool</code>.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","A compiler memory fence.","Creates an <code>AtomicBool</code> initialized to <code>false</code>.","Creates a null <code>AtomicPtr<T></code>.","","","","","","","","","","","","An atomic fence.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Logical “and” with a boolean value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Logical “nand” with a boolean value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Logical “or” with a boolean value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Logical “xor” with a boolean value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","","","","","","","","","","","","","","","","Converts a <code>bool</code> into an <code>AtomicBool</code>.","","","","Converts an <code>i8</code> into an <code>AtomicI8</code>.","","","Converts an <code>u8</code> into an <code>AtomicU8</code>.","","Converts an <code>i16</code> into an <code>AtomicI16</code>.","","Converts an <code>u16</code> into an <code>AtomicU16</code>.","Converts an <code>i32</code> into an <code>AtomicI32</code>.","","","Converts an <code>u32</code> into an <code>AtomicU32</code>.","Converts an <code>i64</code> into an <code>AtomicI64</code>.","","","Converts an <code>u64</code> into an <code>AtomicU64</code>.","Converts an <code>isize</code> into an <code>AtomicIsize</code>.","","","Converts an <code>usize</code> into an <code>AtomicUsize</code>.","Get atomic access to a <code>&mut bool</code>.","Get atomic access to a pointer.","Get atomic access to a <code>&mut i8</code>.","Get atomic access to a <code>&mut u8</code>.","Get atomic access to a <code>&mut i16</code>.","Get atomic access to a <code>&mut u16</code>.","Get atomic access to a <code>&mut i32</code>.","Get atomic access to a <code>&mut u32</code>.","Get atomic access to a <code>&mut i64</code>.","Get atomic access to a <code>&mut u64</code>.","Get atomic access to a <code>&mut isize</code>.","Get atomic access to a <code>&mut usize</code>.","Returns a mutable reference to the underlying <code>bool</code>.","Returns a mutable reference to the underlying pointer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","","","","","","","","","","","","","","","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Loads a value from the bool.","Loads a value from the pointer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Creates a new <code>AtomicBool</code>.","Creates a new <code>AtomicPtr</code>.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Signals the processor that it is inside a busy-wait …","Stores a value into the bool.","Stores a value into the pointer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the bool, returning the previous …","Stores a value into the pointer, returning the previous …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>channel</strong>’s sending half has become disconnected, and …","The <strong>channel</strong>’s sending half has become disconnected, and …","This <code>sync_channel</code>’s receiving half has disconnected, so …","This <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …","The data could not be sent on the <code>sync_channel</code> because it …","An owning iterator over messages on a <code>Receiver</code>, created …","An iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.","The receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …","An error returned from the <code>recv</code> function on a <code>Receiver</code>.","This enumeration is the list of possible errors that made …","An error returned from the <code>Sender::send</code> or …","The sending-half of Rust’s asynchronous <code>channel</code> type. …","The sending-half of Rust’s synchronous <code>sync_channel</code> …","This <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …","An iterator that attempts to yield all pending values for …","This enumeration is the list of the possible reasons that …","This enumeration is the list of the possible error …","","","","","","","","","","","","","","","","","","","","","","","Creates a new asynchronous channel, returning the …","Clone a sender to send to other threads.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>RecvError</code> into a <code>TryRecvError</code>.","","Converts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.","","","Converts a <code>SendError<T></code> into a <code>TrySendError<T></code>.","","","","","","","","","","","","","","","","Returns an iterator that will block waiting for messages, …","","","","","","Attempts to wait for a value on this receiver, returning …","Attempts to wait for a value on this receiver, returning …","Attempts to wait for a value on this receiver, returning …","Attempts to send a value on this channel, returning it …","Sends a value on this synchronous channel.","Creates a new synchronous, bounded channel. All data sent …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator that will attempt to yield all …","Attempts to return a pending value on this receiver …","Attempts to send a value on this channel without blocking.","","","","","","","","","","","","Determines whether the current thread is unwinding …","A <code>Duration</code> type to represent a span of time, typically …","An error which can be returned when converting a …","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","A duration of zero time.","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","","","","","","","","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","","","Returns true if this <code>Duration</code> spans no time.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","","","Creates a new <code>Duration</code> from the specified number of whole …","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>…","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","","","A draining iterator for <code>Vec<T></code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec<T></code> and …","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …","","","Returns an unsafe mutable pointer to the vector’s …","Returns the remaining items of this iterator as a mutable …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer.","","","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","Extracts a slice containing the entire vector.","","","","","","","","","","","","","Returns the number of elements the vector can hold without…","Clears the vector, removing all values.","","","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec<T></code>.","","","Creates a draining iterator that removes the specified …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","","","","","","","","","Allocate a <code>Vec<T></code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec<u8></code> and fill it with a UTF-8 string.","Allocate a <code>Vec<T></code> and fill it by cloning <code>s</code>’s items.","Convert a clone-on-write slice into a vector.","Converts a <code>CString</code> into a <code>Vec</code><code><u8></code>.","Turn a <code>VecDeque<T></code> into a <code>Vec<T></code>.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Converts a <code>BinaryHeap<T></code> into a <code>Vec<T></code>.","Convert a boxed slice into a vector by transferring …","","","","","","Creates a <code>Vec<T></code> directly from the raw components of …","Creates a <code>Vec<T, A></code> directly from the raw components of …","","","","Inserts an element at position <code>index</code> within the vector, …","","","","","","Converts the vector into <code>Box<[T]></code>.","","","Creates a consuming iterator, that is, one that moves …","","","Decomposes a <code>Vec<T></code> into its raw components.","Decomposes a <code>Vec<T></code> into its raw components.","","","Returns <code>true</code> if the vector contains no elements.","","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec<T></code>.","Constructs a new, empty <code>Vec<T, A></code>.","","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements …","Reserves the minimum capacity for exactly <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for exactly …","","","","","","Constructs a new, empty <code>Vec<T></code> with the specified …","Constructs a new, empty <code>Vec<T, A></code> with the specified …","","",""],"i":[0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,2,2,0,3,4,0,4,3,5,4,6,4,5,6,2,4,2,7,8,6,4,2,7,8,6,5,4,2,7,8,6,4,2,7,8,6,2,0,3,4,5,4,6,4,6,2,7,8,2,2,4,2,7,7,8,8,6,2,2,4,2,7,8,6,2,2,4,5,6,4,5,6,0,4,2,7,8,6,2,2,2,2,0,4,3,2,2,0,4,5,6,2,0,4,2,7,8,6,7,8,4,2,7,8,6,4,2,7,8,6,4,2,7,8,6,0,0,9,9,9,9,9,10,10,10,10,10,10,9,10,10,10,9,9,9,9,10,10,10,9,9,9,9,9,9,10,9,0,0,0,0,11,0,11,12,0,11,11,11,11,11,11,13,11,11,14,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,16,17,16,16,17,17,18,19,20,21,22,16,17,17,18,19,20,21,22,16,17,20,17,16,17,16,17,16,17,22,20,21,21,18,19,16,17,20,21,16,17,18,18,19,19,20,20,21,21,22,16,16,16,17,17,17,18,19,20,21,22,22,22,16,16,17,16,22,16,17,22,16,17,16,17,18,19,20,21,22,16,17,22,16,17,20,21,16,17,20,21,20,21,16,17,22,16,17,22,16,17,17,16,16,17,16,17,16,17,18,19,20,21,17,17,17,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,17,16,0,0,23,23,24,0,0,25,25,25,0,0,0,0,0,0,0,0,25,24,25,24,26,25,24,24,25,24,26,25,24,24,27,25,24,25,24,25,24,28,24,28,24,25,24,25,24,25,25,25,25,25,25,28,24,28,24,0,26,0,0,0,26,0,0,27,24,28,25,24,25,25,25,25,24,25,24,25,24,25,24,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,29,0,0,0,29,30,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,30,30,34,36,37,41,30,34,36,37,41,30,30,30,33,30,30,35,43,30,33,30,30,30,30,30,30,30,29,31,32,33,33,30,34,35,36,37,38,39,40,41,42,43,44,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,30,32,30,30,32,30,30,30,31,32,30,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,30,34,35,36,37,38,39,40,41,42,43,44,31,30,32,30,30,30,30,29,31,32,30,34,36,37,38,39,40,41,42,44,30,30,30,34,35,36,37,38,39,40,44,34,36,39,41,42,44,34,36,39,41,42,44,30,34,35,36,37,38,39,40,41,42,43,44,34,35,36,37,38,39,40,41,42,44,29,29,29,29,30,30,30,30,30,32,30,32,30,30,34,35,36,37,38,39,40,43,44,30,30,34,36,37,41,33,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,30,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,29,31,32,33,30,34,35,36,37,38,39,40,41,42,43,44,33,30,30,0,0,0,0,0,0,0,0,0,45,46,47,48,49,50,51,45,52,53,46,47,48,49,50,51,45,52,53,45,46,47,48,49,50,45,53,45,46,47,48,49,50,45,53,45,45,45,45,45,51,45,45,45,45,45,45,46,47,48,49,50,51,45,52,53,46,47,48,49,50,51,45,52,53,45,45,45,45,45,46,47,48,49,50,51,45,52,53,46,47,48,49,50,51,45,52,53,45,45,45,45,45,46,45,53,46,45,52,46,53,46,47,48,49,50,53,45,45,46,47,48,49,50,51,52,53,46,52,53,45,45,45,45,45,45,45,46,47,48,49,50,51,52,45,45,45,46,47,48,49,50,45,53,46,47,48,49,50,51,45,52,53,46,47,48,49,50,51,45,52,53,46,47,48,49,50,51,45,52,53,45,0,0,0,0,0,54,54,54,54,54,54,54,54,55,56,57,54,58,55,56,57,54,58,54,54,57,54,58,54,57,54,58,54,54,54,54,55,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,56,57,54,58,56,57,55,56,57,54,54,58,54,54,54,54,54,54,54,54,54,55,56,57,54,58,55,56,57,54,58,56,57,54,58,54,54,56,57,54,54,54,55,56,57,58,55,56,57,58,56,57,54,54,54,54,54,54,54,54,54,54,54,54,54,54,56,57,54,54,54,54,55,56,57,58,54,54,54,54,57,54,58,54,57,55,56,57,54,58,55,56,57,54,58,54,54,57,55,56,57,54,58,54,0,0,59,60,0,0,0,0,0,0,61,62,63,63,63,63,63,63,63,63,63,64,63,63,63,63,0,65,63,63,63,63,60,63,59,63,63,0,0,0,66,0,0,0,67,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,67,0,0,0,68,68,69,70,71,72,73,74,68,67,75,69,70,71,72,73,74,68,67,75,69,75,69,75,69,75,68,68,68,68,68,75,75,72,73,74,72,73,74,75,70,71,68,70,71,72,73,74,70,68,76,77,78,79,80,81,82,83,84,67,75,75,69,69,0,70,71,72,73,74,68,67,75,69,75,70,71,72,73,74,68,67,75,69,74,68,68,75,68,68,68,68,75,69,75,69,70,71,72,73,74,68,67,75,69,70,71,72,73,74,68,67,75,69,70,71,72,73,74,68,67,75,69,74,68,0,85,68,85,68,68,85,68,68,0,0,0,0,0,86,0,87,88,87,88,86,87,87,88,87,88,87,88,87,89,88,87,88,87,88,90,86,90,87,88,88,88,87,88,87,88,87,88,87,88,89,88,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,91,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,95,96,92,94,95,96,92,92,97,97,97,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,92,92,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,92,92,92,92,92,92,94,103,105,106,108,113,115,96,92,101,0,92,92,92,126,126,126,92,92,92,94,108,95,92,92,92,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,98,99,100,92,94,102,103,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,92,97,97,97,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,0,127,92,92,92,92,92,92,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,91,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,128,102,103,105,108,109,111,95,92,92,92,92,92,94,103,108,113,115,96,92,101,128,102,103,105,108,109,111,95,122,123,92,92,92,92,92,92,92,92,92,92,92,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,93,98,99,101,94,102,103,105,106,107,108,109,111,113,95,115,117,118,120,122,123,96,113,113,92,94,103,105,108,113,95,115,117,118,120,96,93,94,105,108,95,115,117,118,96,0,0,92,92,92,92,113,113,92,92,129,92,92,0,0,92,93,94,108,95,98,99,93,94,102,103,105,106,107,108,109,111,113,95,115,117,118,92,92,98,99,100,101,92,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,122,123,96,124,125,92,92,92,97,0,130,92,92,92,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,92,98,99,92,94,102,103,104,105,106,107,108,109,111,112,113,95,114,115,116,117,118,119,92,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,98,99,93,94,102,103,105,106,107,108,109,111,113,95,115,117,118,98,99,100,101,94,102,103,104,105,106,107,108,109,110,111,112,113,95,114,115,116,117,118,119,120,121,122,123,96,124,125,92,0,92,0,0,131,0,0,0,0,0,0,0,0,0,0,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,132,133,0,0,0,0,0,0,134,134,134,134,134,134,134,134,135,136,134,135,136,134,135,136,134,135,136,134,136,136,136,136,0,0,136,135,136,135,136,134,0,0,135,136,134,135,136,135,136,134,136,0,0,136,0,136,134,136,0,0,0,0,134,134,134,134,0,0,136,135,136,134,0,0,135,136,134,135,136,134,135,136,134,134,134,0,0,134,134,134,0,134,137,137,137,137,137,137,137,137,137,137,137,137,137,138,0,139,0,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,139,138,0,0,0,0,0,0,0,0,0,0,0,0,139,0,0,138,139,0,0,138,139,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,146,147,147,148,148,149,149,150,150,151,151,140,140,141,141,142,142,143,143,144,144,145,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,146,147,147,148,148,149,149,150,150,151,151,140,140,141,141,142,142,143,143,144,144,145,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,140,141,142,143,144,145,146,147,148,149,150,151,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,146,147,148,149,150,151,140,141,142,143,144,145,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,152,153,154,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,152,152,153,153,154,154,138,146,146,146,146,146,146,147,147,147,147,147,147,148,148,148,148,148,148,149,149,149,149,149,149,150,150,150,150,150,150,151,151,151,151,151,151,140,140,140,140,140,140,141,141,141,141,141,141,142,142,142,142,142,142,143,143,143,143,143,143,144,144,144,144,144,144,145,145,145,145,145,145,137,137,137,137,137,137,139,152,153,153,153,153,154,138,146,147,147,148,148,148,149,149,149,149,150,150,150,150,150,151,151,151,140,141,141,141,142,142,142,142,142,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,145,145,145,145,137,139,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,137,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,137,137,137,137,137,137,137,137,137,137,137,137,146,147,148,149,150,151,137,137,137,137,137,137,154,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,152,153,154,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,140,141,142,143,144,145,146,147,148,149,150,151,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,152,153,154,146,147,148,149,150,151,140,141,142,143,144,145,137,146,147,148,149,150,151,140,141,142,143,144,145,137,137,137,137,137,137,137,137,137,137,137,137,152,153,154,138,146,146,146,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,140,140,140,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,137,139,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,152,153,154,138,146,147,148,149,150,151,140,141,142,143,144,145,137,139,146,147,148,149,150,151,146,147,148,149,150,151,140,141,142,143,144,145,140,141,142,143,144,145,140,141,142,143,144,145,0,0,155,0,0,0,0,0,0,0,155,155,0,156,155,0,0,0,0,0,0,0,157,0,0,0,0,0,0,157,0,0,0,0,0,0,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,0,0,0,0,0,0,0,0,0,172,173,0,0,0,0,0,0,174,0,157,173,156,158,175,157,157,165,176,166,177,167,178,155,156,179,180,181,182,183,184,157,155,156,179,180,181,182,183,184,157,172,155,155,185,186,170,155,156,179,180,181,182,183,184,157,155,156,179,180,181,182,183,184,157,157,156,187,180,181,182,183,184,179,180,174,188,161,189,190,183,180,182,184,187,179,180,180,181,181,182,182,183,183,184,184,155,156,179,180,181,182,183,184,157,155,156,179,180,181,182,183,184,157,183,155,156,179,180,181,182,183,184,157,172,155,191,155,179,179,180,180,181,181,182,182,183,183,184,184,179,179,180,180,181,181,182,182,183,183,184,184,179,179,180,180,181,181,182,182,183,183,184,184,179,179,180,180,181,181,182,182,183,183,184,184,156,179,180,181,182,183,184,157,171,179,179,180,180,181,181,182,182,183,183,184,184,192,179,179,180,180,181,181,182,182,183,183,184,184,155,156,179,180,181,182,183,184,157,183,180,181,183,155,155,180,183,180,183,157,155,180,183,180,183,160,193,155,156,180,181,182,183,184,157,163,183,180,181,183,180,183,164,180,181,183,180,183,156,162,194,173,183,168,195,169,196,180,181,183,183,180,181,187,179,180,180,181,181,182,182,183,183,184,184,159,197,155,156,179,180,181,182,183,184,157,183,155,156,179,180,181,182,183,184,157,155,156,179,180,181,182,183,184,157,183,155,156,179,180,181,182,183,184,157,24,0,0,0,0,0,0,0,0,0,23,23,27,27,0,198,0,0,0,0,199,200,200,200,200,200,200,200,200,200,199,200,199,200,200,199,200,199,200,199,200,0,0,200,0,0,199,200,199,200,200,199,200,200,200,0,200,0,200,0,199,200,199,200,199,200,0,200,200,0,0,199,200,0,0,0,0,199,0,200,0,0,0,199,200,200,199,200,199,200,199,200,0,0,0,0,0,0,201,202,201,201,201,201,201,202,201,202,201,202,201,202,201,201,201,202,201,201,201,201,202,201,201,201,201,202,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,202,201,201,202,201,201,201,201,201,201,201,202,201,202,201,201,201,201,201,202,201,201,201,201,201,201,201,201,202,201,202,201,202,201,201,201,202,201,202,201,201,201,201,201,202,202,201,202,203,0,0,0,203,0,203,203,203,203,203,203,203,204,205,206,203,204,205,206,203,203,204,206,203,203,204,206,203,203,203,203,203,203,203,203,203,203,203,203,203,204,205,206,203,203,203,204,205,206,203,203,203,203,203,204,205,206,203,203,204,205,206,203,203,203,203,203,203,203,203,203,203,203,204,205,206,204,205,206,203,203,203,203,203,203,203,204,205,206,203,203,204,206,203,203,204,205,206,203,204,205,206,203,204,205,206,203,203,203,203,203,203,203,0,0,0,0,0,0,0,0,0,0,0,0,0,207,208,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,211,210,211,210,211,210,211,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,212,221,222,223,225,227,228,230,232,210,212,221,222,223,225,227,228,230,232,208,210,211,222,223,224,225,226,227,228,229,230,231,232,233,210,211,210,211,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,0,0,0,0,207,207,207,207,207,207,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,226,229,233,211,210,211,225,226,227,228,229,232,233,210,209,210,211,219,220,222,223,224,225,226,227,228,229,230,231,232,233,210,211,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,212,213,214,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,222,223,224,225,226,227,228,229,230,231,232,233,210,211,222,223,224,225,226,227,228,229,230,231,232,233,210,211,0,225,228,232,210,211,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,212,221,222,223,225,227,228,230,232,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,0,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,235,236,237,238,239,240,241,242,243,244,245,246,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,237,238,235,247,248,247,248,247,235,236,247,247,248,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,256,257,257,258,258,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,0,234,0,0,0,0,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,235,237,238,235,253,245,246,235,247,236,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,237,238,235,239,240,241,242,249,250,251,252,253,254,245,246,235,235,238,0,235,235,235,237,238,235,253,254,245,246,255,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,247,248,256,257,258,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,236,247,248,237,238,235,239,240,241,242,243,244,249,250,251,252,253,254,245,246,255,256,257,258,247,0,0,0,259,0,259,0,259,0,0,0,260,0,259,261,262,263,264,259,261,262,263,264,259,261,262,263,264,259,261,262,263,264,259,259,261,262,263,264,259,261,262,263,264,265,261,262,263,264,259,261,262,263,264,260,260,260,260,259,265,261,262,263,264,266,261,262,263,264,265,261,262,263,264,266,261,262,263,264,265,262,263,266,262,263,260,260,259,261,262,263,264,259,261,262,263,264,259,261,262,263,264,259,261,262,263,264,0,0,0,0,0,0,0,0,0,0,0,267,0,0,0,0,0,0,0,267,268,269,268,268,268,0,268,270,271,272,273,274,275,276,267,277,278,279,280,281,268,268,269,270,271,272,273,274,275,276,267,277,278,279,280,281,268,269,275,275,267,268,280,268,269,280,268,269,268,268,272,273,277,268,269,274,278,279,268,274,279,276,267,268,268,268,274,278,279,268,269,280,268,270,271,272,273,274,274,275,276,276,267,267,277,278,278,279,279,280,281,268,268,268,269,270,271,272,273,273,273,274,275,276,267,267,277,277,277,278,279,280,281,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,269,268,268,269,268,273,276,277,268,268,276,268,268,268,270,271,272,273,274,275,276,267,277,278,279,280,281,268,269,273,276,277,268,269,275,271,273,277,281,268,273,268,268,0,280,268,270,272,273,275,276,277,268,269,268,268,268,268,268,272,272,268,268,268,269,277,268,268,269,280,280,268,269,274,276,267,278,279,268,270,271,272,273,274,275,276,267,277,278,279,280,281,268,268,269,270,271,272,273,274,275,276,267,277,278,279,280,281,268,269,273,268,268,268,268,277,268,277,270,271,272,273,274,275,276,267,277,278,279,280,281,268,269,273,269,270,272,272,272,272,272,268,269,277,0,0,0,0,0,0,0,0,0,0,0,282,282,0,0,0,0,0,0,0,0,0,0,0,0,0,282,282,282,283,284,285,286,287,288,289,290,291,292,293,283,294,282,284,285,286,287,288,289,290,291,292,293,283,294,282,284,285,286,287,288,289,290,291,292,293,282,282,283,294,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,0,283,294,284,285,286,287,288,289,290,291,292,293,282,0,284,285,286,287,288,289,290,291,292,293,283,284,285,286,287,288,289,290,291,292,293,284,285,286,287,288,289,290,291,292,293,284,285,286,287,288,289,290,291,292,293,283,284,285,286,287,288,289,290,291,292,293,283,284,285,286,287,288,289,290,291,292,293,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,283,284,285,286,287,288,289,290,291,292,293,283,294,294,282,284,285,286,287,288,289,290,291,292,293,283,283,294,294,282,284,284,285,285,286,286,287,287,288,288,289,289,290,290,291,291,292,292,293,293,283,294,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,282,283,294,282,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,0,283,294,284,285,286,287,288,289,290,291,292,293,283,294,284,285,286,287,288,289,290,291,292,293,282,283,294,282,284,285,286,287,288,289,290,291,292,293,283,294,282,284,285,286,287,288,289,290,291,292,293,283,294,282,284,285,286,287,288,289,290,291,292,293,295,296,297,298,296,298,0,0,0,0,0,0,0,0,297,0,0,0,299,300,301,302,303,304,295,305,296,297,298,299,300,301,302,303,304,295,305,296,297,298,0,300,301,295,305,296,297,298,300,301,295,305,296,297,298,295,305,296,297,298,299,300,301,295,305,296,297,298,299,300,301,302,303,304,295,295,305,305,296,296,297,297,298,298,299,300,301,302,303,304,295,305,296,296,297,297,298,298,299,300,301,302,303,304,295,305,296,297,298,299,302,303,304,299,295,298,302,303,304,299,299,299,300,301,0,300,301,295,305,296,297,298,295,305,296,297,298,299,300,301,302,303,304,295,305,296,297,298,299,300,301,302,303,304,295,305,296,297,298,299,299,301,299,300,301,302,303,304,295,305,296,297,298,0,0,0,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,307,306,307,306,306,306,306,306,307,306,307,306,306,306,306,306,306,306,306,306,307,306,307,307,306,307,306,306,306,306,306,306,306,306,307,306,306,306,306,306,306,307,306,306,306,306,306,306,306,306,306,306,306,306,306,307,307,306,307,306,306,306,307,306,307,0,0,0,0,0,308,309,310,311,310,310,310,310,309,310,310,308,309,310,310,308,309,310,308,309,310,310,311,312,308,309,310,310,311,312,310,310,309,310,310,309,310,310,309,310,310,310,310,310,310,310,310,308,309,310,311,312,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,308,309,310,311,312,308,309,310,310,310,310,310,310,310,310,310,310,310,311,312,310,310,310,310,310,310,310,308,309,310,311,312,310,308,309,310,311,312,310,310,308,309,310,310,310,310,310,310,310,310,310,310,310,310,308,309,311,312,308,309,312,310,310,310,310,310,310,310,310,310,310,310,310,308,309,311,312,310,310,310,310,310,309,310,310,308,309,310,311,312,308,309,310,311,312,310,310,308,309,310,311,312,310,310,310,310,310],"f":[null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,[[],["writer",3]],null,[[]],null,null,[[],["vec",3]],[[]],[[],[["u8",15],["vec",3,["u8"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["str",15]],["result",6]],null,null,null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]],[["layout",3],["result",4,["layout","layouterror"]],["layouterror",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["usize",15]],[["layout",3],["result",4,["layout","layouterror"]],["layouterror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["system",3]],[[],["layout",3]],[[],["layouterror",3]],[[],["allocerror",3]],[[],["global",3]],[[]],[[]],[[]],[[]],[[]],[[],[["u8",15],["nonnull",3,["u8"]]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]]],[[],["system",3]],[[],["global",3]],[[["layout",3]],["bool",15]],[[["layouterror",3]],["bool",15]],[[["allocerror",3]],["bool",15]],[[["layout",3]],[["result",4,["layouterror"]],["layouterror",3]]],[[["layout",3]],[["layout",3],["result",4,["layout","layouterror"]],["layouterror",3]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],["layout",3]],[[],["layout",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["layout",3],["result",4,["layout","layouterror"]],["layouterror",3]]],[[["usize",15]],["layout",3]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3]]],[[]],[[]],[[]],[[]],[[]],[[["layout",3]],["bool",15]],[[],["layout",3]],[[],["layout",3]],[[["usize",15]],["usize",15]],[[["layout",3],["usize",15]]],[[["layout",3],["usize",15]]],[[["layout",3],["usize",15]]],[[["usize",15]],[["result",4,["layouterror"]],["layouterror",3]]],[[["usize",15]],[["layout",3],["result",4,["layout","layouterror"]],["layouterror",3]]],[[]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[["layout",3],["u8",15],["nonnull",3,["u8"]]],[["result",4,["nonnull","allocerror"]],["nonnull",3],["allocerror",3]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["typeid",3]],[[]],[[["typeid",3]],["ordering",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["typeid",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["typeid",3]],["bool",15]],[[],["typeid",3]],[[["typeid",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],null,null,null,null,null,null,null,[[["str",15]]],[[["str",15],["cow",4,["str"]]]],[[["str",15]]],[[["str",15],["cow",4,["str"]]]],[[]],[[],["path",3]],[[]],[[]],[[]],[[]],[[]],[[],["cow",4]],[[["cow",4]]],[[]],[[]],[[["cow",4]],["ordering",4]],[[],["cow",4]],[[]],[[["pathbuf",3]],["bool",15]],[[],["bool",15]],[[["path",3]],["bool",15]],[[["path",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[["pathbuf",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[["osstring",3]],["bool",15]],[[["path",3]],["bool",15]],[[["path",3]],["bool",15]],[[["osstring",3]],["bool",15]],[[["string",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["osstr",3]],["bool",15]],[[["str",15]],["bool",15]],[[["cow",4]],["bool",15]],[[["vec",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["cstring",3]],[["cstr",3],["cow",4,["cstr"]]]],[[["cstring",3]],[["cstr",3],["cow",4,["cstr"]]]],[[["osstring",3]],[["cow",4,["osstr"]],["osstr",3]]],[[["string",3]],[["str",15],["cow",4,["str"]]]],[[["string",3]],[["str",15],["cow",4,["str"]]]],[[["osstr",3]],[["cow",4,["osstr"]],["osstr",3]]],[[["cstr",3]],[["cstr",3],["cow",4,["cstr"]]]],[[]],[[["pathbuf",3]],[["path",3],["cow",4,["path"]]]],[[["pathbuf",3]],[["path",3],["cow",4,["path"]]]],[[["vec",3]],["cow",4]],[[["path",3]],[["path",3],["cow",4,["path"]]]],[[["str",15]],[["str",15],["cow",4,["str"]]]],[[["osstring",3]],[["cow",4,["osstr"]],["osstr",3]]],[[],["cow",4]],[[["vec",3,["global"]],["global",3]],["cow",4]],[[],["cow",4]],[[],[["str",15],["cow",4,["str"]]]],[[],[["str",15],["cow",4,["str"]]]],[[],[["str",15],["cow",4,["str"]]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["vec",3]],["bool",15]],[[["osstr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["path",3]],[["option",4,["ordering"]],["ordering",4]]],[[["osstring",3]],[["option",4,["ordering"]],["ordering",4]]],[[["path",3]],[["option",4,["ordering"]],["ordering",4]]],[[["pathbuf",3]],[["option",4,["ordering"]],["ordering",4]]],[[["osstr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["pathbuf",3]],[["option",4,["ordering"]],["ordering",4]]],[[["path",3]],[["option",4,["ordering"]],["ordering",4]]],[[["osstr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["osstr",3]],[["option",4,["ordering"]],["ordering",4]]],[[["osstring",3]],[["option",4,["ordering"]],["ordering",4]]],[[["path",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cow",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["box",3]]],[[]],[[]],[[],["box",3]],[[],["box",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["box",3]],[[],[["box",3,["path","global"]],["path",3],["global",3]]],[[],["box",3]],[[],[["box",3,["str","global"]],["str",15],["global",3]]],[[],[["global",3],["cstr",3],["box",3,["cstr","global"]]]],[[],[["global",3],["box",3,["osstr","global"]],["osstr",3]]],[[["box",3]]],[[["box",3]]],[[]],[[["box",3]],["ordering",4]],[[["usize",15]]],[[],[["global",3],["box",3,["osstr","global"]],["osstr",3]]],[[],[["global",3],["box",3,["global"]]]],[[],[["box",3,["str","global"]],["str",15],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[],[["global",3],["cstr",3],["box",3,["cstr","global"]]]],[[]],[[]],[[],["str",15]],[[],[["result",4,["box","box"]],["box",3,["any"]],["box",3]]],[[],[["box",3,["any"]],["result",4,["box","box"]],["box",3]]],[[],[["box",3,["any"]],["result",4,["box","box"]],["box",3]]],[[]],[[["box",3]],["bool",15]],[[],[["error",3],["result",4,["error"]]]],[[],["u64",15]],[[],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],[["global",3],["box",3,["global"]]]],[[["cow",4,["cstr"]],["cstr",3]],[["global",3],["cstr",3],["box",3,["cstr","global"]]]],[[["cow",4,["path"]],["path",3]],[["box",3,["path","global"]],["path",3],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[["osstring",3]],[["global",3],["box",3,["osstr","global"]],["osstr",3]]],[[]],[[["cstr",3]],[["global",3],["cstr",3],["box",3,["cstr","global"]]]],[[["cow",4]],[["global",3],["box",3,["global"]]]],[[["str",15]],[["box",3,["str","global"]],["str",15],["global",3]]],[[],[["error",8],["box",3,["error","global"]],["global",3]]],[[["pathbuf",3]],[["box",3,["path","global"]],["path",3],["global",3]]],[[["str",15]],[["error",8],["box",3,["error","global"]],["global",3]]],[[]],[[],[["box",3,["error","global"]],["error",8],["global",3]]],[[["str",15]],[["global",3],["box",3,["error","global"]],["error",8]]],[[["cow",4,["str"]],["str",15]],[["error",8],["box",3,["error","global"]],["global",3]]],[[["path",3]],[["box",3,["path","global"]],["path",3],["global",3]]],[[["cow",4,["str"]],["str",15]],[["box",3,["str","global"]],["str",15],["global",3]]],[[["cow",4,["osstr"]],["osstr",3]],[["global",3],["box",3,["osstr","global"]],["osstr",3]]],[[["str",15],["box",3,["str"]]],["box",3]],[[["string",3]],[["error",8],["global",3],["box",3,["error","global"]]]],[[["vec",3]],["box",3]],[[["string",3]],[["global",3],["box",3,["error","global"]],["error",8]]],[[],[["global",3],["box",3,["global"]]]],[[["string",3]],[["box",3,["str","global"]],["str",15],["global",3]]],[[["str",15],["cow",4,["str"]]],[["global",3],["box",3,["error","global"]],["error",8]]],[[["osstr",3]],[["global",3],["box",3,["osstr","global"]],["osstr",3]]],[[["cstring",3]],[["global",3],["cstr",3],["box",3,["cstr","global"]]]],[[],[["box",3,["global"]],["global",3]]],[[],[["box",3,["global"]],["global",3]]],[[],["box",3]],[[["box",3]],["bool",15]],[[["box",3]],["bool",15]],[[]],[[],["initializer",3]],[[]],[[["box",3]],["box",3]],[[]],[[["box",3]]],[[]],[[["box",3]],[["pin",3,["box"]],["box",3]]],[[["box",3]]],[[["box",3]]],[[["str",15]],["charpredicatesearcher",3]],[[["str",15]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["box",3]],["bool",15]],[[["box",3]]],[[],["usize",15]],[[["box",3]],["bool",15]],[[["box",3]],["bool",15]],[[],[["box",3,["global"]],["global",3]]],[[],["box",3]],[[],[["global",3],["box",3,["maybeuninit","global"]],["maybeuninit",19]]],[[],[["box",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],[["box",3,["global"]],["global",3]]],[[["usize",15]],["box",3]],[[],[["global",3],["box",3,["maybeuninit","global"]],["maybeuninit",19]]],[[],[["box",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],[["box",3,["global"]],["global",3]]],[[["usize",15]],["box",3]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["box",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["box",3,["global"]],["pin",3,["box"]]]],[[],[["pin",3,["box"]],["box",3]]],[[["box",3],["pin",3,["box"]],["context",3]],["poll",4]],[[["box",3],["pin",3,["box"]],["context",3]],[["option",4],["poll",4,["option"]]]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[],[["result",4,["error"]],["error",3]]],[[["string",3]],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[["vec",3]],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[["string",3]],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[["vec",3],["u8",15]],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[["box",3],["pin",3,["box"]]],["generatorstate",4]],[[["seekfrom",4]],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],[["u64",15],["error",3],["result",4,["u64","error"]]]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[]],[[],["string",3]],[[["box",3,["global"]],["global",3]],[["result",4,["box"]],["box",3,["global"]]]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["box","allocerror"]],["box",3,["global"]],["allocerror",3]]],[[],[["allocerror",3],["result",4,["box","allocerror"]],["box",3]]],[[],[["box",3,["maybeuninit","global"]],["result",4,["box","allocerror"]],["allocerror",3]]],[[],[["allocerror",3],["box",3,["maybeuninit"]],["result",4,["box","allocerror"]]]],[[],[["box",3,["maybeuninit","global"]],["result",4,["box","allocerror"]],["allocerror",3]]],[[],[["allocerror",3],["box",3,["maybeuninit"]],["result",4,["box","allocerror"]]]],[[],["typeid",3]],[[]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[],[["result",4,["error"]],["error",3]]],[[["arguments",3]],[["result",4,["error"]],["error",3]]],[[["i128",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["ref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["refmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cell",3]],[[],["refcell",3]],[[["ref",3]],["ref",3]],[[["refcell",3]]],[[]],[[]],[[["cell",3]],["ordering",4]],[[["refcell",3]],["ordering",4]],[[],["cell",3]],[[],["refcell",3]],[[],["unsafecell",3]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[["cell",3]],["bool",15]],[[["refcell",3]],["bool",15]],[[["ref",3]],[["ref",3],["result",4,["ref","ref"]],["ref",3]]],[[["refmut",3]],[["refmut",3],["result",4,["refmut","refmut"]],["refmut",3]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["cell",3]],[[],["refcell",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unsafecell",3]],[[]],[[]],[[],["cell",3]],[[["cell",3]],["bool",15]],[[["refcell",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["cell",3]],["bool",15]],[[["refcell",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cell",3]],["bool",15]],[[["refcell",3]],["bool",15]],[[["ref",3]]],[[["refmut",3]]],[[["cell",3]],["bool",15]],[[["refcell",3]],["bool",15]],[[["ref",3]],["ref",3]],[[["refmut",3]],["refmut",3]],[[["ref",3]]],[[["refmut",3]]],[[],["cell",3]],[[],["refcell",3]],[[],["unsafecell",3]],[[["cell",3]],[["option",4,["ordering"]],["ordering",4]]],[[["refcell",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[["cell",3]]],[[["refcell",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["ref",3],["borrowerror",3],["result",4,["ref","borrowerror"]]]],[[],[["borrowmuterror",3],["refmut",3],["result",4,["refmut","borrowmuterror"]]]],[[],[["borrowerror",3],["result",4,["borrowerror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["reverse",3]],[[["reverse",3]]],[[]],[[]],[[],["ordering",4]],[[["ordering",4]],["ordering",4]],[[["reverse",3]],["ordering",4]],[[],["reverse",3]],[[],["bool",15]],[[["ordering",4]],["bool",15]],[[["reverse",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["bool",15]],[[["reverse",3]],["bool",15]],[[],["bool",15]],[[["reverse",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["reverse",3]],["bool",15]],[[],["bool",15]],[[["reverse",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["reverse",3]],["bool",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["ordering",4]],[["option",4,["ordering"]],["ordering",4]]],[[["reverse",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["ordering",4]],[[["ordering",4]],["ordering",4]],[[],["ordering",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["entry",4]],[[["btreemap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["btreemap",3]],[[],["iter",3]],[[],["keys",3]],[[],["values",3]],[[],["range",3]],[[]],[[]],[[]],[[]],[[]],[[["btreemap",3]],["ordering",4]],[[],["bool",15]],[[],["btreemap",3]],[[],["str",15]],[[],["drainfilter",3]],[[]],[[]],[[]],[[],["entry",4]],null,[[["btreemap",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],[["occupiedentry",3],["option",4,["occupiedentry"]]]],[[],["option",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["btreemap",3]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intokeys",3]],[[]],[[],["intovalues",3]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[],["keys",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["occupiedentry",3],["option",4,["occupiedentry"]]]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["btreemap",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["btreemap",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangemut",3]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["btreemap",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["occupiederror"]],["occupiederror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["values",3]],[[],["valuesmut",3]],null,null,null,null,null,null,null,null,null,[[["btreeset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["difference",3]],[[],["symmetricdifference",3]],[[],["intersection",3]],[[],["union",3]],[[],["btreeset",3]],[[],["range",3]],[[["btreeset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["btreeset",3]],["ordering",4]],[[],["bool",15]],[[],["btreeset",3]],[[["btreeset",3]],["difference",3]],[[],["drainfilter",3]],[[]],[[["btreeset",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["btreeset",3]],[[],["option",4]],[[]],[[],["bool",15]],[[["btreeset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[["btreeset",3]],["bool",15]],[[],["bool",15]],[[["btreeset",3]],["bool",15]],[[["btreeset",3]],["bool",15]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["btreeset",3]],["bool",15]],[[],["btreeset",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["btreeset",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["bool",15]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["btreeset",3]],[[["btreeset",3]],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["btreeset",3]],["union",3]],null,null,null,null,null,[[["vecdeque",3]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],[["result",4,["usize","usize"]],["usize",15]]],[[],[["result",4,["usize","usize"]],["usize",15]]],[[],[["result",4,["usize","usize"]],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["iter",3]],[[],["vecdeque",3]],[[],["intoiter",3]],[[["vecdeque",3]]],[[]],[[]],[[]],[[["vecdeque",3]],["ordering",4]],[[],["bool",15]],[[],["vecdeque",3]],[[],["drain",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["vecdeque",3]],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["global"]],["global",3]],["vecdeque",3]],[[]],[[]],[[],["vecdeque",3]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[]],[[],["vecdeque",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["vecdeque",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["iter",3]],[[],["itermut",3]],[[["usize",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["vecdeque",3]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["vecdeque",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["infallible",4]],[[]],[[["infallible",4]],["ordering",4]],[[],["str",15]],[[["infallible",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["infallible",4]],[[]],[[]],[[]],[[]],[[["infallible",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["alignment",4],["option",4,["alignment"]]]],[[],["bool",15]],[[],[["str",15],["option",4,["str"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[],["arguments",3]],[[]],[[]],[[["error",3]],["ordering",4]],[[],["debuglist",3]],[[],["debugmap",3]],[[],["debugset",3]],[[["str",15]],["debugstruct",3]],[[["str",15]],["debugtuple",3]],[[],["error",3]],[[],["str",15]],[[],["debugset",3]],[[],["debuglist",3]],[[],["debugmap",3]],[[["debug",8]],["debugset",3]],[[["debug",8]],["debuglist",3]],[[["debug",8]],["debugmap",3]],[[["error",3]],["bool",15]],[[["str",15],["debug",8]],["debugstruct",3]],[[["debug",8]],["debugtuple",3]],[[],["char",15]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],["u32",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["arguments",3]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debug",8]],["debugmap",3]],[[["str",15]],[["error",3],["result",4,["error"]]]],[[["str",15],["bool",15]],[["error",3],["result",4,["error"]]]],[[["error",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["usize",15],["option",4,["usize"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["debug",8]],["debugmap",3]],[[],[["usize",15],["option",4,["usize"]]]],[[["write",8],["arguments",3]],[["error",3],["result",4,["error"]]]],[[["char",15]],[["error",3],["result",4,["error"]]]],[[["char",15]],[["error",3],["result",4,["error"]]]],[[["arguments",3]],[["error",3],["result",4,["error"]]]],[[["arguments",3]],[["error",3],["result",4,["error"]]]],[[["arguments",3]],[["error",3],["result",4,["error"]]]],[[["str",15]],[["error",3],["result",4,["error"]]]],[[["str",15]],[["error",3],["result",4,["error"]]]],[[["str",15]],[["error",3],["result",4,["error"]]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["buildhasherdefault",3]],[[],["siphasher",3]],[[]],[[]],[[],["buildhasherdefault",3]],[[],["siphasher",3]],[[["buildhasherdefault",3]],["bool",15]],[[],["u64",15]],[[],["u64",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[]],[[],["siphasher",3]],[[["u64",15]],["siphasher",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["i128",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chain",3]],[[],["flatmap",3]],[[],["flatten",3]],[[],["interspersewith",3]],[[],["empty",3]],[[],["chain",3]],[[],["cloned",3]],[[],["copied",3]],[[],["cycle",3]],[[],["enumerate",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["fuse",3]],[[],["inspect",3]],[[],["intersperse",3]],[[],["map",3]],[[],["mapwhile",3]],[[],["peekable",3]],[[],["rev",3]],[[],["scan",3]],[[],["skip",3]],[[],["skipwhile",3]],[[],["stepby",3]],[[],["take",3]],[[],["takewhile",3]],[[],["zip",3]],[[],["fromfn",3]],[[],["once",3]],[[],["oncewith",3]],[[],["repeat",3]],[[],["repeatwith",3]],[[],["successors",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cloned",3]],[[],["ordering",4]],[[],["ordering",4]],[[]],[[],["copied",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["cycle",3]],[[],["empty",3]],[[],["empty",3]],[[],["enumerate",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["usize",15]]],[[],["filter",3]],[[],["filtermap",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["flatmap",3]],[[],["flatten",3]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fromfn",3]],[[]],[[],["fuse",3]],[[],["bool",15]],[[],["bool",15]],[[],["inspect",3]],[[],["intersperse",3]],[[],["interspersewith",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["map",3]],[[],["mapwhile",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["once",3]],[[],["oncewith",3]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["peekable",3]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[],["option",4]],[[],["repeat",3]],[[],["repeatwith",3]],[[],["rev",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4,["usize"]]]],[[],["scan",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["skip",3]],[[],["skipwhile",3]],[[["usize",15]],["stepby",3]],[[],[["usize",15],["option",4,["usize"]]]],[[["option",4]],["successors",3]],[[]],[[]],[[["usize",15]],["take",3]],[[],["takewhile",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["result",4,["option"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["zip",3]],[[],["zip",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["phantomdata",3]],[[],["phantompinned",3]],[[]],[[]],[[["phantomdata",3]],["ordering",4]],[[["phantompinned",3]],["ordering",4]],[[],["phantomdata",3]],[[],["phantompinned",3]],[[["phantomdata",3]],["bool",15]],[[["phantompinned",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["phantomdata",3]],[["option",4,["ordering"]],["ordering",4]]],[[["phantompinned",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["discriminant",3]],[[],["manuallydrop",3]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[["manuallydrop",3]],["ordering",4]],[[],["manuallydrop",3]],[[]],[[]],[[],["discriminant",3]],[[]],[[["manuallydrop",3]]],[[["discriminant",3]],["bool",15]],[[["manuallydrop",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["manuallydrop",3]]],[[],["usize",15]],[[],["usize",15]],[[["manuallydrop",3]],["bool",15]],[[],["bool",15]],[[],["manuallydrop",3]],[[],["maybeuninit",19]],[[["manuallydrop",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["manuallydrop",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["maybeuninit",19]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["maybeuninit",19]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["nonzeroi8",3]],[[],["nonzeroi16",3]],[[],["nonzeroi32",3]],[[],["nonzeroi64",3]],[[],["nonzeroi128",3]],[[],["nonzeroisize",3]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["nonzerou8",3]]],[[["u8",15]]],[[["u16",15]]],[[["nonzerou16",3]]],[[["nonzerou32",3]]],[[["u32",15]]],[[["nonzerou64",3]]],[[["u64",15]]],[[["u128",15]]],[[["nonzerou128",3]]],[[["nonzerousize",3]]],[[["usize",15]]],[[["nonzeroi8",3]]],[[["i8",15]]],[[["i16",15]]],[[["nonzeroi16",3]]],[[["i32",15]]],[[["nonzeroi32",3]]],[[["i64",15]]],[[["nonzeroi64",3]]],[[["nonzeroi128",3]]],[[["i128",15]]],[[["nonzeroisize",3]]],[[["isize",15]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["wrapping",3]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3]]],[[["nonzerou8",3]]],[[["u8",15]]],[[["nonzerou16",3]]],[[["u16",15]]],[[["u32",15]]],[[["nonzerou32",3]]],[[["u64",15]]],[[["nonzerou64",3]]],[[["u128",15]]],[[["nonzerou128",3]]],[[["usize",15]]],[[["nonzerousize",3]]],[[["nonzeroi8",3]]],[[["i8",15]]],[[["nonzeroi16",3]]],[[["i16",15]]],[[["i32",15]]],[[["nonzeroi32",3]]],[[["nonzeroi64",3]]],[[["i64",15]]],[[["nonzeroi128",3]]],[[["i128",15]]],[[["nonzeroisize",3]]],[[["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3]]],[[["wrapping",3,["isize"]],["isize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["nonzeroi8"]],["nonzeroi8",3]]],[[],[["nonzeroi16",3],["option",4,["nonzeroi16"]]]],[[],[["option",4,["nonzeroi32"]],["nonzeroi32",3]]],[[],[["nonzeroi64",3],["option",4,["nonzeroi64"]]]],[[],[["option",4,["nonzeroi128"]],["nonzeroi128",3]]],[[],[["nonzeroisize",3],["option",4,["nonzeroisize"]]]],[[["u8",15]],[["nonzerou8",3],["option",4,["nonzerou8"]]]],[[["u16",15]],[["nonzerou16",3],["option",4,["nonzerou16"]]]],[[["u32",15]],[["nonzerou32",3],["option",4,["nonzerou32"]]]],[[["u64",15]],[["nonzerou64",3],["option",4,["nonzerou64"]]]],[[["u128",15]],[["option",4,["nonzerou128"]],["nonzerou128",3]]],[[["usize",15]],[["nonzerousize",3],["option",4,["nonzerousize"]]]],[[["nonzerou8",3]],[["nonzerou8",3],["option",4,["nonzerou8"]]]],[[["nonzerou16",3]],[["nonzerou16",3],["option",4,["nonzerou16"]]]],[[["nonzerou32",3]],[["nonzerou32",3],["option",4,["nonzerou32"]]]],[[["nonzerou64",3]],[["nonzerou64",3],["option",4,["nonzerou64"]]]],[[["nonzerou128",3]],[["option",4,["nonzerou128"]],["nonzerou128",3]]],[[["nonzerousize",3]],[["nonzerousize",3],["option",4,["nonzerousize"]]]],[[["nonzeroi8",3]],[["option",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzeroi16",3]],[["nonzeroi16",3],["option",4,["nonzeroi16"]]]],[[["nonzeroi32",3]],[["option",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["nonzeroi64",3]],[["nonzeroi64",3],["option",4,["nonzeroi64"]]]],[[["nonzeroi128",3]],[["option",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["nonzeroisize",3]],[["nonzeroisize",3],["option",4,["nonzeroisize"]]]],[[],[["nonzerou8",3],["option",4,["nonzerou8"]]]],[[],[["nonzerou16",3],["option",4,["nonzerou16"]]]],[[],[["nonzerou32",3],["option",4,["nonzerou32"]]]],[[],[["nonzerou64",3],["option",4,["nonzerou64"]]]],[[],[["option",4,["nonzerou128"]],["nonzerou128",3]]],[[],[["nonzerousize",3],["option",4,["nonzerousize"]]]],[[["u32",15]],[["nonzerou8",3],["option",4,["nonzerou8"]]]],[[["u32",15]],[["nonzerou16",3],["option",4,["nonzerou16"]]]],[[["u32",15]],[["nonzerou32",3],["option",4,["nonzerou32"]]]],[[["u32",15]],[["nonzerou64",3],["option",4,["nonzerou64"]]]],[[["u32",15]],[["option",4,["nonzerou128"]],["nonzerou128",3]]],[[["u32",15]],[["nonzerousize",3],["option",4,["nonzerousize"]]]],[[["u32",15]],[["option",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["u32",15]],[["nonzeroi16",3],["option",4,["nonzeroi16"]]]],[[["u32",15]],[["option",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["u32",15]],[["nonzeroi64",3],["option",4,["nonzeroi64"]]]],[[["u32",15]],[["option",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["u32",15]],[["nonzeroisize",3],["option",4,["nonzeroisize"]]]],[[],["parsefloaterror",3]],[[],["tryfrominterror",3]],[[],["parseinterror",3]],[[],["interrorkind",4]],[[],["nonzerou8",3]],[[],["nonzerou16",3]],[[],["nonzerou32",3]],[[],["nonzerou64",3]],[[],["nonzerou128",3]],[[],["nonzerousize",3]],[[],["nonzeroi8",3]],[[],["nonzeroi16",3]],[[],["nonzeroi32",3]],[[],["nonzeroi64",3]],[[],["nonzeroi128",3]],[[],["nonzeroisize",3]],[[],["wrapping",3]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonzerou8",3]],["ordering",4]],[[["nonzerou16",3]],["ordering",4]],[[["nonzerou32",3]],["ordering",4]],[[["nonzerou64",3]],["ordering",4]],[[["nonzerou128",3]],["ordering",4]],[[["nonzerousize",3]],["ordering",4]],[[["nonzeroi8",3]],["ordering",4]],[[["nonzeroi16",3]],["ordering",4]],[[["nonzeroi32",3]],["ordering",4]],[[["nonzeroi64",3]],["ordering",4]],[[["nonzeroi128",3]],["ordering",4]],[[["nonzeroisize",3]],["ordering",4]],[[["wrapping",3]],["ordering",4]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["wrapping",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["wrapping",3]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["parsefloaterror",3]],["bool",15]],[[["tryfrominterror",3]],["bool",15]],[[["parseinterror",3]],["bool",15]],[[["interrorkind",4]],["bool",15]],[[["nonzerou8",3]],["bool",15]],[[["nonzerou16",3]],["bool",15]],[[["nonzerou32",3]],["bool",15]],[[["nonzerou64",3]],["bool",15]],[[["nonzerou128",3]],["bool",15]],[[["nonzerousize",3]],["bool",15]],[[["nonzeroi8",3]],["bool",15]],[[["nonzeroi16",3]],["bool",15]],[[["nonzeroi32",3]],["bool",15]],[[["nonzeroi64",3]],["bool",15]],[[["nonzeroi128",3]],["bool",15]],[[["nonzeroisize",3]],["bool",15]],[[["wrapping",3]],["bool",15]],[[["fpcategory",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["tryfrominterror",3]],[[["infallible",4]],["tryfrominterror",3]],[[]],[[]],[[]],[[["nonzerou8",3]],["nonzerou16",3]],[[]],[[["nonzerou16",3]],["nonzerou32",3]],[[]],[[["nonzerou8",3]],["nonzerou32",3]],[[["nonzerou32",3]],["nonzerou64",3]],[[["nonzerou16",3]],["nonzerou64",3]],[[["nonzerou8",3]],["nonzerou64",3]],[[]],[[["nonzerou32",3]],["nonzerou128",3]],[[["nonzerou8",3]],["nonzerou128",3]],[[["nonzerou16",3]],["nonzerou128",3]],[[]],[[["nonzerou64",3]],["nonzerou128",3]],[[["nonzerou8",3]],["nonzerousize",3]],[[["nonzerou16",3]],["nonzerousize",3]],[[]],[[]],[[["nonzerou8",3]],["nonzeroi16",3]],[[["nonzeroi8",3]],["nonzeroi16",3]],[[]],[[]],[[["nonzeroi8",3]],["nonzeroi32",3]],[[["nonzerou16",3]],["nonzeroi32",3]],[[["nonzeroi16",3]],["nonzeroi32",3]],[[["nonzerou8",3]],["nonzeroi32",3]],[[["nonzerou32",3]],["nonzeroi64",3]],[[]],[[["nonzeroi32",3]],["nonzeroi64",3]],[[["nonzerou8",3]],["nonzeroi64",3]],[[["nonzerou16",3]],["nonzeroi64",3]],[[["nonzeroi8",3]],["nonzeroi64",3]],[[["nonzeroi16",3]],["nonzeroi64",3]],[[["nonzeroi8",3]],["nonzeroi128",3]],[[["nonzerou64",3]],["nonzeroi128",3]],[[]],[[["nonzerou16",3]],["nonzeroi128",3]],[[["nonzeroi64",3]],["nonzeroi128",3]],[[["nonzeroi16",3]],["nonzeroi128",3]],[[["nonzerou32",3]],["nonzeroi128",3]],[[["nonzeroi32",3]],["nonzeroi128",3]],[[["nonzerou8",3]],["nonzeroi128",3]],[[["nonzeroi16",3]],["nonzeroisize",3]],[[]],[[["nonzerou8",3]],["nonzeroisize",3]],[[["nonzeroi8",3]],["nonzeroisize",3]],[[]],[[]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["str",15]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["str",15]],[["result",4,["nonzerou16"]],["nonzerou16",3]]],[[["str",15]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["str",15]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["str",15]],[["nonzerou128",3],["result",4,["nonzerou128"]]]],[[["str",15]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[["str",15]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[["str",15]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["str",15]],[["nonzeroi32",3],["result",4,["nonzeroi32"]]]],[[["str",15]],[["result",4,["nonzeroi64"]],["nonzeroi64",3]]],[[["str",15]],[["result",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["str",15]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["interrorkind",4]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["parsefloaterror",3]],["bool",15]],[[["tryfrominterror",3]],["bool",15]],[[["parseinterror",3]],["bool",15]],[[["nonzerou8",3]],["bool",15]],[[["nonzerou16",3]],["bool",15]],[[["nonzerou32",3]],["bool",15]],[[["nonzerou64",3]],["bool",15]],[[["nonzerou128",3]],["bool",15]],[[["nonzerousize",3]],["bool",15]],[[["nonzeroi8",3]],["bool",15]],[[["nonzeroi16",3]],["bool",15]],[[["nonzeroi32",3]],["bool",15]],[[["nonzeroi64",3]],["bool",15]],[[["nonzeroi128",3]],["bool",15]],[[["nonzeroisize",3]],["bool",15]],[[["wrapping",3]],["bool",15]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[["u8",15]],[["nonzerou8",3],["option",4,["nonzerou8"]]]],[[["u16",15]],[["nonzerou16",3],["option",4,["nonzerou16"]]]],[[["u32",15]],[["nonzerou32",3],["option",4,["nonzerou32"]]]],[[["u64",15]],[["nonzerou64",3],["option",4,["nonzerou64"]]]],[[["u128",15]],[["option",4,["nonzerou128"]],["nonzerou128",3]]],[[["usize",15]],[["nonzerousize",3],["option",4,["nonzerousize"]]]],[[["i8",15]],[["option",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["i16",15]],[["nonzeroi16",3],["option",4,["nonzeroi16"]]]],[[["i32",15]],[["option",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["i64",15]],[["nonzeroi64",3],["option",4,["nonzeroi64"]]]],[[["i128",15]],[["option",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["isize",15]],[["nonzeroisize",3],["option",4,["nonzeroisize"]]]],[[["u8",15]],["nonzerou8",3]],[[["u16",15]],["nonzerou16",3]],[[["u32",15]],["nonzerou32",3]],[[["u64",15]],["nonzerou64",3]],[[["u128",15]],["nonzerou128",3]],[[["usize",15]],["nonzerousize",3]],[[["i8",15]],["nonzeroi8",3]],[[["i16",15]],["nonzeroi16",3]],[[["i32",15]],["nonzeroi32",3]],[[["i64",15]],["nonzeroi64",3]],[[["i128",15]],["nonzeroi128",3]],[[["isize",15]],["nonzeroisize",3]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonzerou8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzerou16",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzerou32",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzerou64",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzerou128",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzerousize",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzeroi8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzeroi16",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzeroi32",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzeroi64",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzeroi128",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonzeroisize",3]],[["option",4,["ordering"]],["ordering",4]]],[[["wrapping",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u32",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["u32",15]],[["u32",15],["wrapping",3,["u32"]]]],[[["u32",15]],[["i32",15],["wrapping",3,["i32"]]]],[[["u32",15]],[["i8",15],["wrapping",3,["i8"]]]],[[["u32",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["u32",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["u32",15]],[["u16",15],["wrapping",3,["u16"]]]],[[["u32",15]],[["u8",15],["wrapping",3,["u8"]]]],[[["u32",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["u32",15]],[["u128",15],["wrapping",3,["u128"]]]],[[["u32",15]],[["usize",15],["wrapping",3,["usize"]]]],[[["u32",15]],[["wrapping",3,["i64"]],["i64",15]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["wrapping",3]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["u32",15],["wrapping",3,["u32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3,["i128"]],["i128",15]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[["u32",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["u32",15]],[["u16",15],["wrapping",3,["u16"]]]],[[["u32",15]],[["u128",15],["wrapping",3,["u128"]]]],[[["u32",15]],[["i8",15],["wrapping",3,["i8"]]]],[[["u32",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["u32",15]],[["usize",15],["wrapping",3,["usize"]]]],[[["u32",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["u32",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["u32",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["u32",15]],[["u32",15],["wrapping",3,["u32"]]]],[[["u32",15]],[["u8",15],["wrapping",3,["u8"]]]],[[["u32",15]],[["i32",15],["wrapping",3,["i32"]]]],[[["u32",15]],[["u128",15],["wrapping",3,["u128"]]]],[[["u32",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["u32",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["u32",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["u32",15]],[["u32",15],["wrapping",3,["u32"]]]],[[["u32",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["u32",15]],[["usize",15],["wrapping",3,["usize"]]]],[[["u32",15]],[["i32",15],["wrapping",3,["i32"]]]],[[["u32",15]],[["i8",15],["wrapping",3,["i8"]]]],[[["u32",15]],[["u16",15],["wrapping",3,["u16"]]]],[[["u32",15]],[["u8",15],["wrapping",3,["u8"]]]],[[["u32",15]],[["wrapping",3,["u64"]],["u64",15]]],[[],["nonzeroi8",3]],[[],["nonzeroi16",3]],[[],["nonzeroi32",3]],[[],["nonzeroi64",3]],[[],["nonzeroi128",3]],[[],["nonzeroisize",3]],[[["u8",15]],["nonzerou8",3]],[[["u16",15]],["nonzerou16",3]],[[["u32",15]],["nonzerou32",3]],[[["u64",15]],["nonzerou64",3]],[[["u128",15]],["nonzerou128",3]],[[["usize",15]],["nonzerousize",3]],[[["nonzerou8",3]],["nonzerou8",3]],[[["nonzerou16",3]],["nonzerou16",3]],[[["nonzerou32",3]],["nonzerou32",3]],[[["nonzerou64",3]],["nonzerou64",3]],[[["nonzerou128",3]],["nonzerou128",3]],[[["nonzerousize",3]],["nonzerousize",3]],[[["nonzeroi8",3]],["nonzeroi8",3]],[[["nonzeroi16",3]],["nonzeroi16",3]],[[["nonzeroi32",3]],["nonzeroi32",3]],[[["nonzeroi64",3]],["nonzeroi64",3]],[[["nonzeroi128",3]],["nonzeroi128",3]],[[["nonzeroisize",3]],["nonzeroisize",3]],[[["u32",15]],["nonzerou8",3]],[[["u32",15]],["nonzerou16",3]],[[["u32",15]],["nonzerou32",3]],[[["u32",15]],["nonzerou64",3]],[[["u32",15]],["nonzerou128",3]],[[["u32",15]],["nonzerousize",3]],[[["u32",15]],["nonzeroi8",3]],[[["u32",15]],["nonzeroi16",3]],[[["u32",15]],["nonzeroi32",3]],[[["u32",15]],["nonzeroi64",3]],[[["u32",15]],["nonzeroi128",3]],[[["u32",15]],["nonzeroisize",3]],[[["usize",15]],[["u32",15],["wrapping",3,["u32"]]]],[[["usize",15]]],[[["usize",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["u8",15],["wrapping",3,["u8"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["u128",15],["wrapping",3,["u128"]]]],[[["usize",15]]],[[["usize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["usize",15]],[["i32",15],["wrapping",3,["i32"]]]],[[["usize",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["usize",15]],[["usize",15],["wrapping",3,["usize"]]]],[[["usize",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["usize",15]]],[[["usize",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["usize",15]]],[[["usize",15]],[["u16",15],["wrapping",3,["u16"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["i8",15],["wrapping",3,["i8"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["usize",15]]],[[["usize",15]],[["u16",15],["wrapping",3,["u16"]]]],[[["usize",15]]],[[["usize",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["usize",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["usize",15]]],[[["usize",15]],[["usize",15],["wrapping",3,["usize"]]]],[[["usize",15]],[["u8",15],["wrapping",3,["u8"]]]],[[["usize",15]]],[[["usize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["i32",15],["wrapping",3,["i32"]]]],[[["usize",15]],[["u32",15],["wrapping",3,["u32"]]]],[[["usize",15]]],[[["usize",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["usize",15]],[["i8",15],["wrapping",3,["i8"]]]],[[["usize",15]],[["u128",15],["wrapping",3,["u128"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["wrapping",3,["u64"]],["u64",15]],[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]],[["i16",15],["wrapping",3,["i16"]]]],[[["i8",15],["wrapping",3,["i8"]]],[["i8",15],["wrapping",3,["i8"]]]],[[["i32",15],["wrapping",3,["i32"]]],[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]],[["wrapping",3,["i64"]],["i64",15]]],[[["u16",15],["wrapping",3,["u16"]]],[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u128",15],["wrapping",3,["u128"]]],[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3,["isize"]],["isize",15]],[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3,["i128"]],["i128",15]],[["wrapping",3,["i128"]],["i128",15]]],[[["wrapping",3]]],[[["u32",15],["wrapping",3,["u32"]]],[["u32",15],["wrapping",3,["u32"]]]],[[["usize",15],["wrapping",3,["usize"]]],[["usize",15],["wrapping",3,["usize"]]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]],[["u8",15],["wrapping",3,["u8"]]]],[[["wrapping",3]]],[[["wrapping",3,["i128"]],["i128",15]]],[[["u16",15],["wrapping",3,["u16"]]]],[[["wrapping",3,["u64"]],["u64",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i16"]],["i16",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["u8",15],["wrapping",3,["u8"]]]],[[["i32",15],["wrapping",3,["i32"]]]],[[["wrapping",3]]],[[["wrapping",3,["isize"]],["isize",15]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["wrapping",3,["i64"]],["i64",15]]],[[["i8",15],["wrapping",3,["i8"]]]],[[["u128",15],["wrapping",3,["u128"]]]],[[["wrapping",3]]],[[["wrapping",3]]],[[["usize",15],["wrapping",3,["usize"]]]],[[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["u64"]],["u64",15]]],[[],[["u16",15],["wrapping",3,["u16"]]]],[[],[["u128",15],["wrapping",3,["u128"]]]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["nonzeroi64",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzerousize",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[],["result",4]],[[["nonzeroi128",3]],[["result",4,["nonzerou8"]],["nonzerou8",3]]],[[["nonzeroi8",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzerou16",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzerou32",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzeroisize",3]],[["result",4,["nonzerou8"]],["nonzerou8",3]]],[[["nonzeroi16",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzerou128",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzeroi32",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["u8",15]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzerou64",3]],[["nonzerou8",3],["result",4,["nonzerou8"]]]],[[["nonzeroisize",3]],[["result",4,["nonzerou16"]],["nonzerou16",3]]],[[["nonzeroi128",3]],[["nonzerou16",3],["result",4,["nonzerou16"]]]],[[["u16",15]],[["nonzerou16",3],["result",4,["nonzerou16"]]]],[[],["result",4]],[[["nonzeroi8",3]],[["result",4,["nonzerou16"]],["nonzerou16",3]]],[[["nonzerou128",3]],[["nonzerou16",3],["result",4,["nonzerou16"]]]],[[["nonzeroi16",3]],[["nonzerou16",3],["result",4,["nonzerou16"]]]],[[["nonzerou32",3]],[["result",4,["nonzerou16"]],["nonzerou16",3]]],[[["nonzerousize",3]],[["nonzerou16",3],["result",4,["nonzerou16"]]]],[[["nonzerou64",3]],[["nonzerou16",3],["result",4,["nonzerou16"]]]],[[["nonzeroi64",3]],[["result",4,["nonzerou16"]],["nonzerou16",3]]],[[["nonzeroi32",3]],[["result",4,["nonzerou16"]],["nonzerou16",3]]],[[["u32",15]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzeroisize",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzerou128",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzeroi64",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzeroi32",3]],[["result",4,["nonzerou32"]],["nonzerou32",3]]],[[["nonzerou64",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzeroi8",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[],["result",4]],[[["nonzeroi128",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzeroi16",3]],[["result",4,["nonzerou32"]],["nonzerou32",3]]],[[["nonzerousize",3]],[["nonzerou32",3],["result",4,["nonzerou32"]]]],[[["nonzeroisize",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["nonzerousize",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["nonzerou128",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["nonzeroi8",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["nonzeroi16",3]],[["nonzerou64",3],["result",4,["nonzerou64"]]]],[[["nonzeroi64",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["nonzeroi128",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[["nonzeroi32",3]],[["result",4,["nonzerou64"]],["nonzerou64",3]]],[[],["result",4]],[[["u64",15]],[["nonzerou64",3],["result",4,["nonzerou64"]]]],[[["u128",15]],[["result",4,["nonzerou128"]],["nonzerou128",3]]],[[["nonzeroisize",3]],[["result",4,["nonzerou128"]],["nonzerou128",3]]],[[["nonzeroi8",3]],[["nonzerou128",3],["result",4,["nonzerou128"]]]],[[["nonzeroi16",3]],[["result",4,["nonzerou128"]],["nonzerou128",3]]],[[["nonzeroi32",3]],[["nonzerou128",3],["result",4,["nonzerou128"]]]],[[["nonzerousize",3]],[["result",4,["nonzerou128"]],["nonzerou128",3]]],[[["nonzeroi64",3]],[["result",4,["nonzerou128"]],["nonzerou128",3]]],[[["nonzeroi128",3]],[["nonzerou128",3],["result",4,["nonzerou128"]]]],[[],["result",4]],[[["nonzeroi64",3]],[["nonzerousize",3],["result",4,["nonzerousize"]]]],[[["nonzerou32",3]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[["nonzeroi128",3]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[["nonzerou64",3]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[["nonzeroi8",3]],[["nonzerousize",3],["result",4,["nonzerousize"]]]],[[["nonzeroi32",3]],[["nonzerousize",3],["result",4,["nonzerousize"]]]],[[["nonzeroi16",3]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[["nonzerou128",3]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[["usize",15]],[["nonzerousize",3],["result",4,["nonzerousize"]]]],[[["nonzeroisize",3]],[["result",4,["nonzerousize"]],["nonzerousize",3]]],[[],["result",4]],[[["i8",15]],[["result",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzerou64",3]],[["result",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzeroisize",3]],[["result",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzerou8",3]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[["nonzerou16",3]],[["result",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzeroi32",3]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[["nonzeroi16",3]],[["result",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzerou32",3]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[["nonzeroi64",3]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[["nonzerou128",3]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[["nonzerousize",3]],[["result",4,["nonzeroi8"]],["nonzeroi8",3]]],[[["nonzeroi128",3]],[["nonzeroi8",3],["result",4,["nonzeroi8"]]]],[[],["result",4]],[[],["result",4]],[[["nonzerou128",3]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["nonzerou32",3]],[["result",4,["nonzeroi16"]],["nonzeroi16",3]]],[[["nonzeroi128",3]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["nonzeroi64",3]],[["result",4,["nonzeroi16"]],["nonzeroi16",3]]],[[["nonzerou64",3]],[["result",4,["nonzeroi16"]],["nonzeroi16",3]]],[[["nonzerou16",3]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["i16",15]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["nonzeroisize",3]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["nonzeroi32",3]],[["result",4,["nonzeroi16"]],["nonzeroi16",3]]],[[["nonzerousize",3]],[["nonzeroi16",3],["result",4,["nonzeroi16"]]]],[[["nonzeroi128",3]],[["result",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["nonzeroisize",3]],[["result",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["nonzerou128",3]],[["nonzeroi32",3],["result",4,["nonzeroi32"]]]],[[["nonzerou64",3]],[["nonzeroi32",3],["result",4,["nonzeroi32"]]]],[[["nonzerou32",3]],[["result",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["i32",15]],[["result",4,["nonzeroi32"]],["nonzeroi32",3]]],[[["nonzerousize",3]],[["nonzeroi32",3],["result",4,["nonzeroi32"]]]],[[],["result",4]],[[["nonzeroi64",3]],[["nonzeroi32",3],["result",4,["nonzeroi32"]]]],[[["nonzerou128",3]],[["nonzeroi64",3],["result",4,["nonzeroi64"]]]],[[["nonzerou64",3]],[["result",4,["nonzeroi64"]],["nonzeroi64",3]]],[[["nonzeroisize",3]],[["nonzeroi64",3],["result",4,["nonzeroi64"]]]],[[],["result",4]],[[["nonzeroi128",3]],[["result",4,["nonzeroi64"]],["nonzeroi64",3]]],[[["i64",15]],[["nonzeroi64",3],["result",4,["nonzeroi64"]]]],[[["nonzerousize",3]],[["result",4,["nonzeroi64"]],["nonzeroi64",3]]],[[],["result",4]],[[["nonzerousize",3]],[["result",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["i128",15]],[["result",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["nonzeroisize",3]],[["result",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["nonzerou128",3]],[["result",4,["nonzeroi128"]],["nonzeroi128",3]]],[[["nonzeroi64",3]],[["result",4,["nonzeroisize"]],["nonzeroisize",3]]],[[["isize",15]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[["nonzerou64",3]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[["nonzeroi32",3]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[],["result",4]],[[["nonzerou128",3]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[["nonzeroi128",3]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[["nonzerousize",3]],[["result",4,["nonzeroisize"]],["nonzeroisize",3]]],[[["nonzerou32",3]],[["result",4,["nonzeroisize"]],["nonzeroisize",3]]],[[["nonzerou16",3]],[["nonzeroisize",3],["result",4,["nonzeroisize"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u8",15]],["nonzerou8",3]],[[["u16",15]],["nonzerou16",3]],[[["u32",15]],["nonzerou32",3]],[[["u64",15]],["nonzerou64",3]],[[["u128",15]],["nonzerou128",3]],[[["usize",15]],["nonzerousize",3]],[[["nonzerou8",3]],["nonzerou8",3]],[[["nonzerou16",3]],["nonzerou16",3]],[[["nonzerou32",3]],["nonzerou32",3]],[[["nonzerou64",3]],["nonzerou64",3]],[[["nonzerou128",3]],["nonzerou128",3]],[[["nonzerousize",3]],["nonzerousize",3]],[[["nonzeroi8",3]],["nonzeroi8",3]],[[["nonzeroi16",3]],["nonzeroi16",3]],[[["nonzeroi32",3]],["nonzeroi32",3]],[[["nonzeroi64",3]],["nonzeroi64",3]],[[["nonzeroi128",3]],["nonzeroi128",3]],[[["nonzeroisize",3]],["nonzeroisize",3]],[[],["nonzerou8",3]],[[],["nonzerou16",3]],[[],["nonzerou32",3]],[[],["nonzerou64",3]],[[],["nonzerou128",3]],[[],["nonzerousize",3]],[[],["nonzeroi8",3]],[[],["nonzeroi16",3]],[[],["nonzeroi32",3]],[[],["nonzeroi64",3]],[[],["nonzeroi128",3]],[[],["nonzeroisize",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["bound",4]],[[],["bound",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["controlflow",4]],[[],["controlflow",4]],[[],["option",4]],[[]],[[]],[[]],[[],["controlflow",4]],[[],["generatorstate",4]],[[],["rangefull",3]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeto",3]],[[],["rangeinclusive",3]],[[],["rangetoinclusive",3]],[[],["bound",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bound",4]],[[["generatorstate",4]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["rangefull",3]],[[],["range",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[["controlflow",4]],["bool",15]],[[["generatorstate",4]],["bool",15]],[[["rangefull",3]],["bool",15]],[[["range",3]],["bool",15]],[[["rangefrom",3]],["bool",15]],[[["rangeto",3]],["bool",15]],[[["rangeinclusive",3]],["bool",15]],[[["rangetoinclusive",3]],["bool",15]],[[["bound",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["controlflow",4]],[[]],[[["infallible",4],["controlflow",4,["infallible"]]],["controlflow",4]],[[["str",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[["str",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[]],[[]],[[["str",15]]],[[]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[["str",15]]],[[]],[[["str",15]]],[[]],[[["str",15]]],[[]],[[["str",15]]],[[]],[[]],[[["str",15]]],[[["str",15]]],[[]],[[["str",15]]],[[]],[[]],[[["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["bound",4]],[[],["controlflow",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["controlflow",4]],["bool",15]],[[["generatorstate",4]],["bool",15]],[[["range",3]],["bool",15]],[[["rangefrom",3]],["bool",15]],[[["rangeto",3]],["bool",15]],[[["rangeinclusive",3]],["bool",15]],[[["rangetoinclusive",3]],["bool",15]],[[["bound",4]],["bool",15]],[[]],[[],["rangeinclusive",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["generatorstate",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[["pin",3]],["generatorstate",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[],["bound",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,[[],["usize",15]],[[]],[[]],[[],["nonnull",3]],[[]],[[]],[[],["maybeuninit",19]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonnull",3]],[[],["dynmetadata",3]],[[],["nonnull",3]],[[]],[[]],[[["dynmetadata",3]],["ordering",4]],[[["nonnull",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[],["nonnull",3]],[[]],[[],["bool",15]],[[["dynmetadata",3]],["bool",15]],[[["nonnull",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["nonnull",3]],[[],["nonnull",3]],[[]],[[["nonnull",3]],["nonnull",3]],[[]],[[],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[],["layout",3]],[[],["usize",15]],[[]],[[],[["nonnull",3],["option",4,["nonnull"]]]],[[],["nonnull",3]],[[]],[[]],[[["dynmetadata",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nonnull",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15],["nonnull",3]],["nonnull",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["usize",15],["u8",15]]],[[]],[[]],null,null,[[["rc",3]]],[[]],[[]],[[],["rc",3]],[[],["rc",3]],[[]],[[]],[[]],[[]],[[]],[[],["rc",3]],[[],["weak",3]],[[]],[[]],[[["rc",3]],["ordering",4]],[[]],[[],["rc",3]],[[],["weak",3]],[[]],[[],[["result",4,["rc","rc"]],["rc",3],["rc",3,["any"]]]],[[["rc",3]],["weak",3]],[[]],[[]],[[["rc",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[],["rc",3]],[[["osstring",3]],[["rc",3,["osstr"]],["osstr",3]]],[[]],[[["path",3]],[["path",3],["rc",3,["path"]]]],[[["vec",3,["global"]],["global",3]],["rc",3]],[[["cow",4]],["rc",3]],[[["string",3]],[["str",15],["rc",3,["str"]]]],[[["cstr",3]],[["cstr",3],["rc",3,["cstr"]]]],[[["str",15]],[["str",15],["rc",3,["str"]]]],[[["cstring",3]],[["cstr",3],["rc",3,["cstr"]]]],[[["osstr",3]],[["rc",3,["osstr"]],["osstr",3]]],[[["box",3,["global"]],["global",3]],["rc",3]],[[],["rc",3]],[[["pathbuf",3]],[["path",3],["rc",3,["path"]]]],[[]],[[],["rc",3]],[[],["rc",3]],[[],["weak",3]],[[["rc",3]],["bool",15]],[[["rc",3]],["option",4]],[[["rc",3]]],[[["rc",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["rc",3]]],[[]],[[["rc",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["rc",3]]],[[["rc",3]],["bool",15]],[[],["rc",3]],[[],["weak",3]],[[],["rc",3]],[[],[["rc",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],["rc",3]],[[],[["rc",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],["rc",3]],[[["rc",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["rc",3],["pin",3,["rc"]]]],[[["rc",3]],["bool",15]],[[["weak",3]],["bool",15]],[[["rc",3]],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[["rc",3]],[["result",4,["rc"]],["rc",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["rc","allocerror"]],["rc",3],["allocerror",3]]],[[],[["result",4,["rc","allocerror"]],["rc",3,["maybeuninit"]],["allocerror",3]]],[[],[["result",4,["rc","allocerror"]],["rc",3,["maybeuninit"]],["allocerror",3]]],[[["rc",3]],[["rc",3],["result",4,["rc"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],[["rc",3],["option",4,["rc"]]]],[[["rc",3]],["usize",15]],[[],["usize",15]],null,null,null,null,null,null,[[["result",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["controlflow",4]],[[],["result",4]],[[],["iter",3]],[[],["intoiter",3]],[[["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["result",4]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[["result",4]],["bool",15]],[[],["option",4]],[[["str",15]]],[[["str",15]]],[[],["result",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["streamresult",3]],[["mzstatus",4],["mzerror",4],["result",4,["mzstatus","mzerror"]]]],[[["streamresult",3]],[["mzstatus",4],["mzerror",4],["result",4,["mzstatus","mzerror"]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["result",4,["infallible"]],["infallible",4]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["result",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["result",4]],["result",4]],[[],["result",4]],[[["result",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],[["option",4,["result"]],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["split",3]],[[],["rsplit",3]],[[],["windows",3]],[[],["chunks",3]],[[],["chunksexact",3]],[[],["arraywindows",3]],[[],["arraychunks",3]],[[],["rchunks",3]],[[],["rchunksexact",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[["usize",15],["rangeto",3,["usize"]]],[["range",3,["usize"]],["usize",15]]],[[]],[[]],[[]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["splitinclusive",3]],[[],["utf8error",3]],[[],["parseboolerror",3]],[[],["chars",3]],[[],["charindices",3]],[[],["bytes",3]],[[],["split",3]],[[],["rsplit",3]],[[],["splitterminator",3]],[[],["rsplitterminator",3]],[[],["splitn",3]],[[],["rsplitn",3]],[[],["matchindices",3]],[[],["rmatchindices",3]],[[],["matches",3]],[[],["rmatches",3]],[[],["lines",3]],[[],["linesany",3]],[[],["splitwhitespace",3]],[[],["splitasciiwhitespace",3]],[[],["encodeutf16",3]],[[],["escapedebug",3]],[[],["escapedefault",3]],[[],["escapeunicode",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["str",15]],[[],["str",15]],[[["utf8error",3]],["bool",15]],[[["parseboolerror",3]],["bool",15]],[[],[["usize",15],["option",4,["usize"]]]],[[],["option",4]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["str","global"]],["str",15],["global",3]]],[[["str",15]],["result",4]],[[],[["result",4,["str","utf8error"]],["str",15],["utf8error",3]]],[[],[["utf8error",3],["str",15],["result",4,["str","utf8error"]]]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["char",15],["option",4,["char"]]]],[[],["option",4]],[[],["option",4]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],["usize",15]],[[["utf8error",3]],["bool",15]],[[],[["option",4,["str"]],["str",15]]],[[],[["char",15],["option",4,["char"]]]],[[],["option",4]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],["option",4]],[[],["option",4]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["u16",15],["option",4,["u16"]]]],[[],[["char",15],["option",4,["char"]]]],[[],[["char",15],["option",4,["char"]]]],[[],[["char",15],["option",4,["char"]]]],[[],[["option",4,["str"]],["str",15]]],[[],[["char",15],["option",4,["char"]]]],[[],["option",4]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],["option",4]],[[],["option",4]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["usize",15]],null,[[],[["usize",15],["option",4,["usize"]]]],[[],["option",4]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["searchstep",4]],[[],["charsearcher",3]],[[],["charslicesearcher",3]],[[],["charpredicatesearcher",3]],[[],["strsearcher",3]],[[]],[[]],[[]],[[]],[[]],[[["searchstep",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["searchstep",4]],["bool",15]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["searchstep",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3]]],[[]],[[]],[[],["arc",3]],[[],["arc",3]],null,[[],[["option",4,["backtrace"]],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],[["option",4,["error"]],["error",8]]],[[],["waittimeoutresult",3]],[[],["arc",3]],[[],["weak",3]],[[]],[[]],[[]],[[["arc",3]],["ordering",4]],[[]],[[],["condvar",3]],[[],["mutex",3]],[[],["rwlock",3]],[[],["arc",3]],[[],["weak",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],[["arc",3],["result",4,["arc","arc"]],["arc",3,["any"]]]],[[["arc",3]],["weak",3]],[[]],[[]],[[]],[[]],[[]],[[["waittimeoutresult",3]],["bool",15]],[[["arc",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["mutex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["poisonerror",3]],["trylockerror",4]],[[]],[[]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[["pathbuf",3]],[["arc",3,["path"]],["path",3]]],[[],["arc",3]],[[]],[[],["arc",3]],[[["vec",3,["global"]],["global",3]],["arc",3]],[[["string",3]],[["arc",3,["str"]],["str",15]]],[[]],[[["path",3]],[["arc",3,["path"]],["path",3]]],[[["cow",4]],["arc",3]],[[["str",15]],[["arc",3,["str"]],["str",15]]],[[["osstring",3]],[["arc",3,["osstr"]],["osstr",3]]],[[["cstr",3]],[["cstr",3],["arc",3,["cstr"]]]],[[["osstr",3]],[["arc",3,["osstr"]],["osstr",3]]],[[["cstring",3]],[["cstr",3],["arc",3,["cstr"]]]],[[["box",3,["global"]],["global",3]],["arc",3]],[[]],[[],["arc",3]],[[],["arc",3]],[[],["weak",3]],[[["arc",3]],["bool",15]],[[],[["result",4,["poisonerror"]],["poisonerror",3]]],[[]],[[],[["result",4,["poisonerror"]],["poisonerror",3]]],[[["arc",3]],["option",4]],[[["arc",3]]],[[]],[[["arc",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["poisonerror"]],["poisonerror",3]]],[[]],[[],[["result",4,["poisonerror"]],["poisonerror",3]]],[[["arc",3]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["arc",3]],["bool",15]],[[],[["mutexguard",3],["result",4,["mutexguard","poisonerror"]],["poisonerror",3,["mutexguard"]]]],[[["arc",3]],["bool",15]],[[["arc",3]]],null,[[["waittimeoutresult",3]],["bool",15]],[[["arc",3]],["bool",15]],[[["usize",15]],["barrier",3]],[[],["condvar",3]],[[],["mutex",3]],[[],["once",3]],[[],["poisonerror",3]],[[],["rwlock",3]],[[],["arc",3]],[[],["weak",3]],[[],["arc",3]],[[],[["arc",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],["arc",3]],[[],[["arc",3,["maybeuninit"]],["maybeuninit",19]]],[[["usize",15]],["arc",3]],[[]],[[]],[[["arc",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["arc",3],["pin",3,["arc"]]]],[[["arc",3]],["bool",15]],[[["weak",3]],["bool",15]],[[],[["poisonerror",3,["rwlockreadguard"]],["rwlockreadguard",3],["result",4,["rwlockreadguard","poisonerror"]]]],[[],[["option",4,["error"]],["error",8]]],[[["arc",3]],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["arc",3]],[["arc",3],["result",4,["arc"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["mutexguard",3],["trylockerror",4,["mutexguard"]],["result",4,["mutexguard","trylockerror"]]]],[[],[["arc",3],["result",4,["arc","allocerror"]],["allocerror",3]]],[[],[["arc",3,["maybeuninit"]],["result",4,["arc","allocerror"]],["allocerror",3]]],[[],[["arc",3,["maybeuninit"]],["result",4,["arc","allocerror"]],["allocerror",3]]],[[],[["allocerror",3],["pin",3,["arc"]],["result",4,["pin","allocerror"]]]],[[],[["trylockerror",4,["rwlockreadguard"]],["result",4,["rwlockreadguard","trylockerror"]],["rwlockreadguard",3]]],[[["arc",3]],[["arc",3],["result",4,["arc"]]]],[[],[["result",4,["rwlockwriteguard","trylockerror"]],["rwlockwriteguard",3],["trylockerror",4,["rwlockwriteguard"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["mutexguard",3]]],[[],[["arc",3],["option",4,["arc"]]]],[[],["barrierwaitresult",3]],[[["mutexguard",3]],[["mutexguard",3],["poisonerror",3,["mutexguard"]],["result",4,["mutexguard","poisonerror"]]]],[[["duration",3],["mutexguard",3]],[["result",4,["poisonerror"]],["poisonerror",3]]],[[["u32",15],["mutexguard",3]],[["result",4,["poisonerror"]],["poisonerror",3]]],[[["duration",3],["mutexguard",3]],[["result",4,["poisonerror"]],["poisonerror",3]]],[[["mutexguard",3]],[["mutexguard",3],["poisonerror",3,["mutexguard"]],["result",4,["mutexguard","poisonerror"]]]],[[["arc",3]],["usize",15]],[[],["usize",15]],[[],[["rwlockwriteguard",3],["poisonerror",3,["rwlockwriteguard"]],["result",4,["rwlockwriteguard","poisonerror"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[]],[[["ordering",4],["bool",15]],["bool",15]],[[["ordering",4]]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["ordering",4],["bool",15]],[["result",4,["bool","bool"]],["bool",15]]],[[["ordering",4]],["result",4]],[[["i8",15],["ordering",4]],[["i8",15],["result",4,["i8","i8"]]]],[[["u8",15],["ordering",4]],[["u8",15],["result",4,["u8","u8"]]]],[[["ordering",4],["i16",15]],[["result",4,["i16","i16"]],["i16",15]]],[[["u16",15],["ordering",4]],[["u16",15],["result",4,["u16","u16"]]]],[[["i32",15],["ordering",4]],[["result",4,["i32","i32"]],["i32",15]]],[[["ordering",4],["u32",15]],[["result",4,["u32","u32"]],["u32",15]]],[[["ordering",4],["i64",15]],[["result",4,["i64","i64"]],["i64",15]]],[[["u64",15],["ordering",4]],[["u64",15],["result",4,["u64","u64"]]]],[[["ordering",4],["isize",15]],[["result",4,["isize","isize"]],["isize",15]]],[[["usize",15],["ordering",4]],[["result",4,["usize","usize"]],["usize",15]]],[[["ordering",4],["bool",15]],[["result",4,["bool","bool"]],["bool",15]]],[[["ordering",4]],["result",4]],[[["i8",15],["ordering",4]],[["i8",15],["result",4,["i8","i8"]]]],[[["u8",15],["ordering",4]],[["u8",15],["result",4,["u8","u8"]]]],[[["ordering",4],["i16",15]],[["result",4,["i16","i16"]],["i16",15]]],[[["u16",15],["ordering",4]],[["u16",15],["result",4,["u16","u16"]]]],[[["i32",15],["ordering",4]],[["result",4,["i32","i32"]],["i32",15]]],[[["ordering",4],["u32",15]],[["result",4,["u32","u32"]],["u32",15]]],[[["ordering",4],["i64",15]],[["result",4,["i64","i64"]],["i64",15]]],[[["u64",15],["ordering",4]],[["u64",15],["result",4,["u64","u64"]]]],[[["ordering",4],["isize",15]],[["result",4,["isize","isize"]],["isize",15]]],[[["usize",15],["ordering",4]],[["result",4,["usize","usize"]],["usize",15]]],[[["ordering",4]]],[[],["atomicbool",3]],[[],["atomicptr",3]],[[],["atomici8",3]],[[],["atomicu8",3]],[[],["atomici16",3]],[[],["atomicu16",3]],[[],["atomici32",3]],[[],["atomicu32",3]],[[],["atomici64",3]],[[],["atomicu64",3]],[[],["atomicisize",3]],[[],["atomicusize",3]],[[["ordering",4]],["bool",15]],[[["ordering",4]]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["ordering",4],["bool",15]],["bool",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["ordering",4],["bool",15]],["bool",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["ordering",4],["bool",15]],["bool",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["ordering",4]],[["result",4,["bool","bool"]],["bool",15]]],[[["ordering",4]],["result",4]],[[["ordering",4]],[["i8",15],["result",4,["i8","i8"]]]],[[["ordering",4]],[["u8",15],["result",4,["u8","u8"]]]],[[["ordering",4]],[["result",4,["i16","i16"]],["i16",15]]],[[["ordering",4]],[["u16",15],["result",4,["u16","u16"]]]],[[["ordering",4]],[["result",4,["i32","i32"]],["i32",15]]],[[["ordering",4]],[["result",4,["u32","u32"]],["u32",15]]],[[["ordering",4]],[["result",4,["i64","i64"]],["i64",15]]],[[["ordering",4]],[["u64",15],["result",4,["u64","u64"]]]],[[["ordering",4]],[["result",4,["isize","isize"]],["isize",15]]],[[["ordering",4]],[["result",4,["usize","usize"]],["usize",15]]],[[["ordering",4],["bool",15]],["bool",15]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["bool",15]],["atomicbool",3]],[[]],[[],["atomicptr",3]],[[]],[[["i8",15]],["atomici8",3]],[[]],[[]],[[["u8",15]],["atomicu8",3]],[[]],[[["i16",15]],["atomici16",3]],[[]],[[["u16",15]],["atomicu16",3]],[[["i32",15]],["atomici32",3]],[[]],[[]],[[["u32",15]],["atomicu32",3]],[[["i64",15]],["atomici64",3]],[[]],[[]],[[["u64",15]],["atomicu64",3]],[[["isize",15]],["atomicisize",3]],[[]],[[]],[[["usize",15]],["atomicusize",3]],[[["bool",15]],["atomicbool",3]],[[],["atomicptr",3]],[[["i8",15]],["atomici8",3]],[[["u8",15]],["atomicu8",3]],[[["i16",15]],["atomici16",3]],[[["u16",15]],["atomicu16",3]],[[["i32",15]],["atomici32",3]],[[["u32",15]],["atomicu32",3]],[[["i64",15]],["atomici64",3]],[[["u64",15]],["atomicu64",3]],[[["isize",15]],["atomicisize",3]],[[["usize",15]],["atomicusize",3]],[[],["bool",15]],[[]],[[],["i8",15]],[[],["u8",15]],[[],["i16",15]],[[],["u16",15]],[[],["i32",15]],[[],["u32",15]],[[],["i64",15]],[[],["u64",15]],[[],["isize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["i8",15]],[[],["u8",15]],[[],["i16",15]],[[],["u16",15]],[[],["i32",15]],[[],["u32",15]],[[],["i64",15]],[[],["u64",15]],[[],["isize",15]],[[],["usize",15]],[[["ordering",4]],["bool",15]],[[["ordering",4]]],[[["ordering",4]],["i8",15]],[[["ordering",4]],["u8",15]],[[["ordering",4]],["i16",15]],[[["ordering",4]],["u16",15]],[[["ordering",4]],["i32",15]],[[["ordering",4]],["u32",15]],[[["ordering",4]],["i64",15]],[[["ordering",4]],["u64",15]],[[["ordering",4]],["isize",15]],[[["ordering",4]],["usize",15]],[[["bool",15]],["atomicbool",3]],[[],["atomicptr",3]],[[["i8",15]],["atomici8",3]],[[["u8",15]],["atomicu8",3]],[[["i16",15]],["atomici16",3]],[[["u16",15]],["atomicu16",3]],[[["i32",15]],["atomici32",3]],[[["u32",15]],["atomicu32",3]],[[["i64",15]],["atomici64",3]],[[["u64",15]],["atomicu64",3]],[[["isize",15]],["atomicisize",3]],[[["usize",15]],["atomicusize",3]],[[]],[[["ordering",4],["bool",15]]],[[["ordering",4]]],[[["i8",15],["ordering",4]]],[[["u8",15],["ordering",4]]],[[["ordering",4],["i16",15]]],[[["u16",15],["ordering",4]]],[[["i32",15],["ordering",4]]],[[["ordering",4],["u32",15]]],[[["ordering",4],["i64",15]]],[[["u64",15],["ordering",4]]],[[["ordering",4],["isize",15]]],[[["usize",15],["ordering",4]]],[[["ordering",4],["bool",15]],["bool",15]],[[["ordering",4]]],[[["i8",15],["ordering",4]],["i8",15]],[[["u8",15],["ordering",4]],["u8",15]],[[["ordering",4],["i16",15]],["i16",15]],[[["u16",15],["ordering",4]],["u16",15]],[[["i32",15],["ordering",4]],["i32",15]],[[["ordering",4],["u32",15]],["u32",15]],[[["ordering",4],["i64",15]],["i64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[["ordering",4],["isize",15]],["isize",15]],[[["usize",15],["ordering",4]],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sender",3]],[[],["syncsender",3]],[[],["senderror",3]],[[],["recverror",3]],[[],["tryrecverror",4]],[[],["recvtimeouterror",4]],[[],["trysenderror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[["senderror",3]],["bool",15]],[[["recverror",3]],["bool",15]],[[["tryrecverror",4]],["bool",15]],[[["recvtimeouterror",4]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["recverror",3]],["tryrecverror",4]],[[]],[[["recverror",3]],["recvtimeouterror",4]],[[]],[[]],[[["senderror",3]],["trysenderror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[],["iter",3]],[[["senderror",3]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["recverror",3],["result",4,["recverror"]]]],[[["instant",3]],[["result",4,["recvtimeouterror"]],["recvtimeouterror",4]]],[[["duration",3]],[["result",4,["recvtimeouterror"]],["recvtimeouterror",4]]],[[],[["senderror",3],["result",4,["senderror"]]]],[[],[["senderror",3],["result",4,["senderror"]]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tryiter",3]],[[],[["tryrecverror",4],["result",4,["tryrecverror"]]]],[[],[["result",4,["trysenderror"]],["trysenderror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,null,null,null,null,null,null,null,[[["duration",3]],["duration",3]],[[["duration",3]]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u64",15]],[[],["f32",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[["duration",3]],[["option",4,["duration"]],["duration",3]]],[[["u32",15]],[["option",4,["duration"]],["duration",3]]],[[["u32",15]],[["option",4,["duration"]],["duration",3]]],[[["duration",3]],[["option",4,["duration"]],["duration",3]]],[[],["duration",3]],[[],["fromsecserror",3]],[[]],[[]],[[["duration",3]],["ordering",4]],[[],["duration",3]],[[["u32",15]],["duration",3]],[[["u32",15]]],[[["duration",3]],["f32",15]],[[["duration",3]],["f64",15]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[["duration",3]],["bool",15]],[[["fromsecserror",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["u64",15]],["duration",3]],[[["u64",15]],["duration",3]],[[["u64",15]],["duration",3]],[[["u64",15]],["duration",3]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[]],[[]],[[]],[[],["bool",15]],[[["u32",15]],["duration",3]],[[["u32",15]]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[["duration",3]],["bool",15]],[[["fromsecserror",3]],["bool",15]],[[["u64",15],["u32",15]],["duration",3]],[[["duration",3]],[["option",4,["ordering"]],["ordering",4]]],[[["duration",3]],["duration",3]],[[["u32",15]],["duration",3]],[[["duration",3]],["duration",3]],[[["duration",3]],["duration",3]],[[["duration",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["duration",3]],[[],["duration",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["f32",15]],[["result",4,["duration","fromsecserror"]],["duration",3],["fromsecserror",3]]],[[["f64",15]],[["result",4,["duration","fromsecserror"]],["duration",3],["fromsecserror",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["vec",3]]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["intoiter",3]],[[],["vec",3]],[[["vec",3]]],[[]],[[]],[[["vec",3]],["ordering",4]],[[],["usize",15]],[[]],[[]],[[]],[[],[["vec",3,["global"]],["global",3]]],[[]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],[["vec",3,["global"]],["global",3]]],[[["str",15]],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["vec",3,["global"]],["global",3]]],[[["cow",4]],[["vec",3,["global"]],["global",3]]],[[["cstring",3]],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[["vecdeque",3]],[["vec",3,["global"]],["global",3]]],[[["string",3]],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[["binaryheap",3]],[["vec",3,["global"]],["global",3]]],[[["box",3]],["vec",3]],[[]],[[],[["vec",3,["global"]],["global",3]]],[[]],[[]],[[],[["vec",3,["global"]],["global",3]]],[[["usize",15]],[["vec",3,["global"]],["global",3]]],[[["usize",15]],["vec",3]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["vec",3,["global"]],["global",3]]],[[],["vec",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["vec",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["splice",3]],[[]],[[["usize",15]],["vec",3]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[["usize",15]],[["result",4,["tryreserveerror"]],["tryreserveerror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["vec",3,["global"]],["global",3]]],[[["usize",15]],["vec",3]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],[["usize",15],["error",3],["result",4,["usize","error"]]]]],"p":[[3,"Writer"],[3,"Layout"],[8,"GlobalAlloc"],[3,"System"],[8,"Allocator"],[3,"Global"],[3,"LayoutError"],[3,"AllocError"],[3,"TypeId"],[8,"Any"],[4,"Cow"],[8,"ToOwned"],[8,"Borrow"],[8,"BorrowMut"],[3,"Box"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[8,"Clone"],[3,"Reverse"],[4,"Ordering"],[8,"Ord"],[8,"PartialEq"],[8,"PartialOrd"],[4,"Entry"],[3,"BTreeMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"OccupiedError"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"IntoKeys"],[3,"IntoValues"],[3,"Range"],[3,"RangeMut"],[3,"DrainFilter"],[3,"IterMut"],[3,"BTreeSet"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"DrainFilter"],[3,"IntoIter"],[3,"Range"],[3,"VecDeque"],[3,"Drain"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[8,"TryInto"],[8,"TryFrom"],[8,"AsMut"],[8,"AsRef"],[4,"Infallible"],[8,"From"],[8,"Into"],[8,"Default"],[4,"Alignment"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Write"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[8,"Hasher"],[8,"Hash"],[8,"IntoIterator"],[8,"Iterator"],[8,"DoubleEndedIterator"],[3,"Chain"],[3,"Rev"],[3,"Repeat"],[8,"Step"],[3,"FlatMap"],[3,"Flatten"],[3,"IntersperseWith"],[3,"Empty"],[3,"Cloned"],[3,"Copied"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"Fuse"],[3,"Inspect"],[3,"Intersperse"],[3,"Map"],[3,"MapWhile"],[3,"Peekable"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"StepBy"],[3,"Take"],[3,"TakeWhile"],[3,"Zip"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"RepeatWith"],[3,"Successors"],[8,"Extend"],[8,"FromIterator"],[8,"ExactSizeIterator"],[8,"Product"],[8,"Sum"],[8,"DiscriminantKind"],[3,"PhantomData"],[3,"PhantomPinned"],[19,"MaybeUninit"],[3,"Discriminant"],[3,"ManuallyDrop"],[3,"Wrapping"],[4,"IntErrorKind"],[4,"FpCategory"],[3,"NonZeroI8"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI128"],[3,"NonZeroIsize"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"NonZeroUsize"],[3,"ParseFloatError"],[3,"TryFromIntError"],[3,"ParseIntError"],[4,"ControlFlow"],[4,"GeneratorState"],[4,"Bound"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"FnOnce"],[8,"Index"],[8,"Try"],[8,"Generator"],[8,"Deref"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Fn"],[8,"FnMut"],[8,"RangeBounds"],[8,"DerefMut"],[8,"DivAssign"],[8,"Drop"],[8,"FromResidual"],[8,"IndexMut"],[8,"MulAssign"],[8,"RemAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"SubAssign"],[8,"Pointee"],[3,"DynMetadata"],[3,"NonNull"],[3,"Rc"],[3,"Weak"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"SliceIndex"],[8,"Concat"],[8,"Join"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"GroupBy"],[3,"GroupByMut"],[3,"RSplit"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ArrayWindows"],[3,"ArrayChunks"],[3,"ArrayChunksMut"],[3,"RChunks"],[3,"RChunksMut"],[3,"RChunksExact"],[3,"RChunksExactMut"],[8,"FromStr"],[3,"Bytes"],[3,"SplitInclusive"],[3,"Chars"],[3,"CharIndices"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"EncodeUtf16"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[4,"SearchStep"],[8,"Pattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[8,"Searcher"],[8,"ReverseSearcher"],[4,"TryLockError"],[3,"Arc"],[3,"Weak"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"Once"],[3,"PoisonError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"],[3,"OnceState"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"SendError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Receiver"],[3,"Sender"],[3,"SyncSender"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"Duration"],[3,"FromSecsError"],[3,"Drain"],[3,"IntoIter"],[3,"Vec"],[3,"DrainFilter"],[3,"Splice"]],"a":{"!=":[611,619,4408,4410],"%":[4077,4078],"%=":[4078],"&":[4022],"&*":[4035],"&=":[4023],"*":[4035,4036,4051,4052],"*=":[4052],"+":[4019,4020],"+=":[4020],"-":[4053,4085,4086],"-=":[4086],"..":[4070,4072,4073,4075],"..=":[4074,4076],"/":[4038,4039],"/=":[4039],"<":[616,621],"<<":[4081],"<<=":[4082],"<=":[616,621],"==":[611,619,4408,4410],">":[616,621],">=":[616,621],">>":[4083],">>=":[4084],"?":[4088],"[":[4049,4050],"[]":[4049,4050],"]":[4049,4050],"^":[4026],"^=":[4027],"compare_and_swap":[6060,6072],"foldl":[1831],"foldr":[2097],"inject":[1831],"memcpy":[4446],"memmove":[4445],"popcnt":[2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912],"popcount":[2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912],"reverse":[2090],"{:?}":[1371],"{}":[1378],"|":[4024],"|=":[4025]}},\
"sp_storage":{"doc":"Primitive types for storage related stuff.","t":[12,12,4,3,4,13,13,3,3,3,3,3,3,6,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,12,17,17,17,17,17,17,5,5],"n":["0","0","ChildInfo","ChildTrieParentKeyId","ChildType","ParentKeyId","ParentKeyId","PrefixedStorageKey","Storage","StorageChangeSet","StorageChild","StorageData","StorageKey","StorageMap","TrackedStorageKey","add_read","add_write","as_byte_slice","as_ref","as_slice_of","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","changes","child_info","child_type","children_default","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","data","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","encode","encode","encode_to","encode_to","encode_to","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_prefixed_key","has_been_read","has_been_written","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into_inner","into_prefixed_storage_key","key","keyspace","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new_default","new_default_from_vec","new_ref","parent_prefix","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prefixed_storage_key","reads","ref_cast","ref_cast_mut","serialize","serialize","serialize","serialize","storage_key","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_update","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","using_encoded","using_encoded","well_known_keys","whitelist","whitelisted","writes","CHANGES_TRIE_CONFIG","CHILD_STORAGE_KEY_PREFIX","CODE","DEFAULT_CHILD_STORAGE_KEY_PREFIX","EXTRINSIC_INDEX","HEAP_PAGES","is_child_storage_key","starts_with_child_storage_key"],"q":["sp_storagesp_storage::well_known_keys","","","","","","",""],"d":["","","Information related to a child state.","A child trie of default type. It uses the same default …","Type of child. It does not strictly define different …","This is the one used by default.","If runtime module ensures that the child key is a unique …","Storage key of a child trie, it contains the prefix to …","Struct containing data needed for a storage.","Storage change set","Child trie storage data.","Storage data associated to a <code>StorageKey</code>.","Storage key.","Map of data to use in a storage, it is a collection of …","Storage key with read/write tracking information.","Add a storage read to this key.","Add a storage write to this key.","","","","Block hash","","","","","","","","","","","","","","","","","","","","","A list of changes","Associated child info for a child trie.","Returns the type for this child info.","Children trie storage data. The key does not including …","","","","","","","","","","","","","","","","","","","","","","","","","Child data for storage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transform a prefixed key into a tuple of the child type …","Check if this key has been “read”, i.e. it exists in …","Check if this key has been “written”, i.e. a new …","","","","","","","","","","","","","","","","","Get inner key, this should only be needed when writing …","Returns a the full location in the direct parent of this …","","Returns byte sequence (keyspace) that can be use by …","","","","","","","","","Create a default <code>TrackedStorageKey</code>","Create a prefixed storage key from its byte array …","Try to get a child type from its <code>u32</code> representation.","Instantiates child information for a default child trie …","Same as <code>new_default</code> but with <code>Vec<u8></code> as input.","Create a prefixed storage key reference.","Returns the location reserved for this child trie in …","","","","","","","Return a the full location in the direct parent of this …","","","","","","","","Returns a reference to the location in the direct parent …","","","","","","","","","","","","","Top trie storage data.","","","","","","","","","","","","","","","","","","","","","Try to update with another instance, return false if both …","","","","","","","","","","","","","List of all well known keys and prefixes in storage.","Whitelist this key.","","","Changes trie configuration is stored under this key.","Prefix of child storage keys.","Wasm code of the runtime.","Prefix of the default child storage keys in the top trie.","Current extrinsic index (u32) is stored under this key.","Number of wasm linear memory pages required for execution …","Whether a key is a child storage key.","Returns if the given <code>key</code> starts with …"],"i":[1,2,0,0,0,3,4,0,0,0,0,0,0,0,0,5,5,1,1,1,6,1,5,7,2,8,9,6,3,4,10,1,5,7,2,8,9,6,3,4,10,6,8,3,9,1,5,7,2,8,9,3,4,10,1,5,7,2,8,9,3,4,10,1,5,7,2,3,10,8,1,5,2,1,5,2,1,5,2,1,5,2,2,9,7,7,1,7,2,6,1,2,1,5,2,1,5,7,2,8,6,3,4,10,1,5,7,2,8,9,6,3,4,10,1,5,5,7,2,8,9,6,3,4,10,4,5,5,1,5,7,2,3,10,1,5,7,2,8,9,6,3,4,10,7,3,5,3,1,5,7,2,8,6,3,10,5,7,4,3,3,7,4,1,5,7,2,3,10,3,5,7,7,1,7,2,6,3,1,5,2,1,5,7,2,8,9,3,4,10,9,1,5,7,2,8,9,6,3,4,10,1,5,7,2,8,9,6,3,4,10,3,1,5,7,2,8,9,6,3,4,10,1,2,0,5,5,5,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["childtype",4]],null,[[],["storagekey",3]],[[],["trackedstoragekey",3]],[[],["prefixedstoragekey",3]],[[],["storagedata",3]],[[],["storagechild",3]],[[],["storage",3]],[[],["childinfo",4]],[[],["childtype",4]],[[],["childtrieparentkeyid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["storagekey",3]],["ordering",4]],[[["trackedstoragekey",3]],["ordering",4]],[[["prefixedstoragekey",3]],["ordering",4]],[[["storagedata",3]],["ordering",4]],[[["childinfo",4]],["ordering",4]],[[["childtrieparentkeyid",3]],["ordering",4]],null,[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["storagedata",3]],[[],["storage",3]],[[],["vec",3]],[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[["storagekey",3]],["bool",15]],[[["trackedstoragekey",3]],["bool",15]],[[["prefixedstoragekey",3]],["bool",15]],[[["storagedata",3]],["bool",15]],[[["storagechild",3]],["bool",15]],[[["storagechangeset",3]],["bool",15]],[[["childinfo",4]],["bool",15]],[[["childtype",4]],["bool",15]],[[["childtrieparentkeyid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prefixedstoragekey",3]],["option",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["prefixedstoragekey",3]],null,[[]],[[["storagekey",3]],["bool",15]],[[["trackedstoragekey",3]],["bool",15]],[[["prefixedstoragekey",3]],["bool",15]],[[["storagedata",3]],["bool",15]],[[["storagechild",3]],["bool",15]],[[["storagechangeset",3]],["bool",15]],[[["childinfo",4]],["bool",15]],[[["childtrieparentkeyid",3]],["bool",15]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3,["u8"]],["u8",15]]],[[["u32",15]],[["option",4,["childtype"]],["childtype",4]]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[["vec",3]]],[[]],[[["storagekey",3]],[["option",4,["ordering"]],["ordering",4]]],[[["trackedstoragekey",3]],[["option",4,["ordering"]],["ordering",4]]],[[["prefixedstoragekey",3]],[["option",4,["ordering"]],["ordering",4]]],[[["storagedata",3]],[["option",4,["ordering"]],["ordering",4]]],[[["childinfo",4]],[["option",4,["ordering"]],["ordering",4]]],[[["childtrieparentkeyid",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["prefixedstoragekey",3]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["childinfo",4]],["bool",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["fnonce",8]]],[[["fnonce",8]]],null,[[]],null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[3,"StorageKey"],[3,"StorageData"],[4,"ChildInfo"],[4,"ChildType"],[3,"TrackedStorageKey"],[3,"StorageChangeSet"],[3,"PrefixedStorageKey"],[3,"StorageChild"],[3,"Storage"],[3,"ChildTrieParentKeyId"]]},\
"sp_tasks":{"doc":"Runtime tasks.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsyncExternalities","DataJoinHandle","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","child_storage","child_storage_hash","child_storage_root","clear_child_prefix","clear_prefix","commit","deregister_extension_by_type_id","extension_by_type_id","fmt","from","from","from_mut","from_mut","from_ref","from_ref","get_read_and_written_keys","get_whitelist","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","join","kill_child_storage","new_async_externalities","next_child_storage_key","next_storage_key","place_child_storage","place_storage","read_write_count","register_extension_with_type_id","reset_read_write_count","set_offchain_storage","set_whitelist","spawn","storage","storage_append","storage_changes_root","storage_commit_transaction","storage_hash","storage_rollback_transaction","storage_root","storage_start_transaction","try_from","try_from","try_into","try_into","type_id","type_id","unchecked_into","unchecked_into","vzip","vzip","wipe","with_runtime_spawn"],"q":["sp_tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Simple state-less externalities for use in async context.","Task handle (wasm).","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","Join handle returned by <code>spawn</code> function","","New Async externalities.","","","","","","","","","","Spawn new runtime task (native).","","","","","","","","","","","","","","","","","","","","Extend async externalities with the ability to spawn wasm …"],"i":[0,0,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,2,2,2],"f":[null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4]],[["vec",3,["u8"]],["u8",15]]],[[["childinfo",4],["u32",15],["option",4,["u32"]]]],[[["option",4,["u32"]],["u32",15]]],[[]],[[["typeid",3]],[["result",4,["error"]],["error",4]]],[[["typeid",3]],[["any",8],["option",4,["any"]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[]],[[]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["global",3],["box",3,["global"]]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["childinfo",4],["option",4,["u32"]],["u32",15]]],[[["spawnnamed",8],["box",3,["spawnnamed"]]],[["str",15],["result",4,["asyncexternalities","str"]],["asyncexternalities",3]]],[[["childinfo",4]],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["childinfo",4],["u8",15],["option",4,["vec"]],["vec",3,["u8"]]]],[[["vec",3,["u8"]],["u8",15],["option",4,["vec"]]]],[[]],[[["box",3,["extension"]],["extension",8],["typeid",3]],[["result",4,["error"]],["error",4]]],[[]],[[["option",4]]],[[["vec",3,["trackedstoragekey"]],["trackedstoragekey",3]]],[[["vec",3,["u8"]],["u8",15]],["datajoinhandle",3]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[["vec",3,["u8"]],["u8",15]]],[[],[["result",4,["option"]],["option",4,["vec"]]]],[[],["result",4]],[[],[["vec",3,["u8"]],["option",4,["vec"]]]],[[],["result",4]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["runtimespawn",8],["box",3,["runtimespawn"]]],[["result",4,["str"]],["str",15]]]],"p":[[3,"DataJoinHandle"],[3,"AsyncExternalities"]]},\
"sp_tracing":{"doc":"Substrate tracing primitives and macros.","t":[13,13,18,13,18,13,13,13,13,13,13,18,3,3,13,13,18,13,13,13,13,18,7,7,7,3,3,3,4,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,14,14,0,14,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,14,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,14,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Bool","DEBUG","DEBUG","ERROR","ERROR","Encoded","Formatted","I32","I64","I8","INFO","INFO","Level","Span","Str","TRACE","TRACE","U32","U64","U8","WARN","WARN","WASM_NAME_KEY","WASM_TARGET_KEY","WASM_TRACE_IDENTIFIER","WasmEntryAttributes","WasmFieldName","WasmFields","WasmLevel","WasmMetadata","WasmValue","WasmValuesSet","as_log","as_serde","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_of","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","current","debug","debug_span","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","drop","emit","empty","empty","encode","encode","encode","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","enter","enter_span","entered","eq","eq","eq","error","error_span","event","event","field","fields","fields","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","follows_from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","ge","ge","gt","gt","has_field","hash","id","in_scope","info","info_span","into","into","into","into","into","into","into","into","into","into","is_disabled","is_none","is_span","iter","le","le","level","line","lt","lt","metadata","metadata","module_path","name","ne","new","new_disabled","new_root","none","parent_id","partial_cmp","partial_cmp","record","record_all","record_bool","record_debug","record_i64","record_str","record_u64","span","span","target","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","trace","trace_span","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_init_simple","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","using_encoded","using_encoded","using_encoded","warn","warn_span","with_subscriber","within_span","Event","as_serde","borrow","borrow_mut","child_of","dispatch","fields","fmt","from","into","is_contextual","is_log","is_root","metadata","new","new_child_of","normalized_metadata","parent","record","record","try_from","try_into","type_id","AsId","Attributes","Entered","EnteredSpan","Id","Record","Span","as_id","as_serde","as_serde","as_serde","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_of","clone","clone_into","contains","contains","deref","drop","drop","eq","exit","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_non_zero_u64","from_u64","hash","into","into","into","into","into","into_non_zero_u64","into_u64","is_contextual","is_empty","is_empty","is_root","metadata","ne","new","new","new_root","parent","record","record","record","record","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","values"],"q":["sp_tracingsp_tracing::event","","","","","","","","","","","","","","","","","","","","","","","sp_tracing::span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Further information for debugging purposes","The “debug” level.","This is a fatal errors","The “error” level.","SCALE CODEC encoded object – the name should allow the …","Debug or Display call, this is most-likely a print-able …","","","","Nice to now info","The “info” level.","Describes the level of verbosity of a span or event.","A handle representing a span, with the capability to …","","The lowest level, keeping track of minute detail","The “trace” level.","","","","This is a warning you should be aware of","The “warn” level.","The fieldname for the wasm-originated name","The fieldname for the wasm-originated target","The identifier we are using to inject the wasm events in …","Span or Event Attributes","The name of a field provided as the argument name when …","A list of <code>WasmFieldName</code>s in the order provided","The Tracing Level – the user can filter by this","Metadata provides generic information about the specifc …","A paramter value provided to the span/event","A list of <code>WasmFieldName</code>s with the given <code>WasmValue</code> (if …","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>Span</code> as child of the given parent span, …","","","","","","","","","","","","","","","","","","","","Returns a handle to the span considered by the <code>Subscriber</code> …","Constructs an event at the debug level.","Constructs a span at the debug level.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","convert the given Attributes to an event and emit it …","Create an empty entry","Create an empty entry","","","","","","","","","","","Enters this span, returning a guard that will exit the …","Enter a span.","Enters this span, consuming it and returning a guard that …","","","","Constructs an event at the error level.","Constructs a span at the error level.","Events represent single points in time during the …","Constructs a new <code>Event</code>.","Returns a <code>Field</code> for the field with the given <code>name</code>, if one …","The list of fields specified in the call","the Values provided","The file this was emitted from – useful for debugging;  …","","","","","","","","","","","Indicates that the span with the given ID has an indirect …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if this <code>Span</code> has a field for the given <code>Field</code> …","","Returns this span’s <code>Id</code>, if it is enabled.","Executes the given function in the context of this span.","Constructs an event at the info level.","Constructs a span at the info level.","","","","","","","","","","","Returns <code>true</code> if this span was disabled by the subscriber …","Returns <code>true</code> if this span was constructed by <code>Span::none</code> …","Whether this is a call  to <code>span!</code> or <code>event!</code>","Iterate over the fields","","","The level of this entry","The specific line number in the file – useful for …","","","Returns this span’s <code>Metadata</code>, if it is enabled.","the metadata of the location","The module path;  <code>&\'static str</code> converted to bytes","The name given to <code>event!</code>/<code>span!</code>, <code>&\'static str</code> converted to …","","Constructs a new <code>Span</code> with the given metadata and set of …","Constructs a new disabled span with the given <code>Metadata</code>.","Constructs a new <code>Span</code> as the root of its own trace tree, …","Constructs a new span that is <em>completely disabled</em>.","the parent, if directly specified – otherwise assume …","","","Records that the field described by <code>field</code> has the value …","Records all the fields in the provided <code>ValueSet</code>.","","","","","","Spans represent periods of time in which a program was …","Constructs a new span.","The given target to <code>event!</code>/<code>span!</code> – or module-name, …","","","","","","","","","","","","","","","","","","Constructs an event at the trace level.","Constructs a span at the trace level.","","","","","","","","","","Try to init a simple tracing subscriber with log …","","","","","","","","","","","","","","","","","","","","","","Constructs an event at the warn level.","Constructs a span at the warn level.","Invokes a function with a reference to this span’s ID …","Runs given code within a tracing span, measuring it’s …","<code>Event</code>s represent single points in time where something …","","","","Constructs a new <code>Event</code> with the specified metadata and …","Constructs a new <code>Event</code> with the specified metadata and …","Returns an iterator over the set of values on this <code>Event</code>.","","","","Returns true if the new event’s parent should be …","","Returns true if the new event should be a root.","Returns metadata describing this <code>Event</code>.","Returns a new <code>Event</code> in the current span, with the …","Returns a new <code>Event</code> as a child of the specified span, …","","Returns the new event’s explicitly-specified parent, if …","","Visits all the fields on this <code>Event</code> with the specified …","","","","Trait implemented by types which have a span <code>Id</code>.","Attributes provided to a <code>Subscriber</code> describing a new span …","A guard representing a span which has been entered and is …","An owned version of <code>Entered</code>, a guard representing a span …","Identifies a span within the context of a subscriber.","A set of fields recorded by a span.","A handle representing a span, with the capability to …","Returns the <code>Id</code> of the span that <code>self</code> corresponds to, or …","","","","","","","","","","","","","","Returns <code>Attributes</code> describing a new child span of the …","","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …","Returns <code>true</code> if this <code>Record</code> contains a value for the …","","","","","Exits this span, returning the underlying <code>Span</code>.","","","","","","","","","","","Constructs a new span ID from the given <code>NonZeroU64</code>.","Constructs a new span ID from the given <code>u64</code>.","","","","","","","Returns the span’s ID as a <code>NonZeroU64</code>.","Returns the span’s ID as a <code>u64</code>.","Returns true if the new span’s parent should be …","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.","Returns true if this <code>Record</code> contains <em>no</em> values.","Returns true if the new span should be a root.","Returns a reference to the new span’s metadata.","","Returns <code>Attributes</code> describing a new child span of the …","Constructs a new <code>Record</code> from a <code>ValueSet</code>.","Returns <code>Attributes</code> describing a new span at the root of …","Returns the new span’s explicitly-specified parent, if …","Records all the fields in this set of <code>Attributes</code> with the …","","Records all the fields in this <code>Record</code> with the provided …","","","","","","","","","","","","","","","","","","Returns a reference to a <code>ValueSet</code> containing any values …"],"i":[1,2,3,2,3,1,1,1,1,1,2,3,0,0,1,2,3,1,1,1,2,3,0,0,0,0,0,0,0,0,0,0,3,3,2,1,4,5,6,7,8,9,3,2,1,4,5,6,7,8,9,3,9,2,1,4,5,6,7,8,9,3,2,1,4,5,6,7,8,9,3,3,9,0,0,2,1,4,5,6,7,8,2,1,4,5,6,7,8,2,1,4,5,6,7,8,2,1,4,5,6,7,8,2,7,8,9,8,5,6,4,5,6,2,1,4,5,6,7,8,9,0,9,9,3,3,0,0,0,0,9,7,8,7,2,1,4,5,6,7,8,9,3,3,9,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,5,5,5,5,6,6,6,6,7,7,8,8,8,9,9,3,3,3,3,3,3,9,9,9,9,0,0,2,1,4,5,6,7,8,9,9,3,9,9,7,5,3,3,7,7,3,3,9,8,7,7,3,9,9,9,9,8,3,3,9,9,6,6,6,6,6,0,0,7,2,1,4,5,6,7,8,2,1,4,5,6,7,8,9,3,3,0,0,2,1,4,5,6,7,8,9,3,0,2,1,4,5,6,7,8,9,3,2,1,4,5,6,7,8,9,3,4,5,6,0,0,9,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,11,12,13,14,15,16,12,13,14,15,16,12,13,14,13,12,12,13,14,16,15,16,12,16,15,16,12,13,14,15,16,12,13,14,12,12,12,15,16,12,13,14,12,12,13,13,14,13,13,12,13,14,13,13,13,13,14,14,12,15,16,12,13,14,15,16,12,13,14,15,16,12,13,14,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["level",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["metadata",3],["valueset",3]],["span",3]],[[],["wasmlevel",4]],[[],["wasmvalue",4]],[[],["wasmfieldname",3]],[[],["wasmfields",3]],[[],["wasmvaluesset",3]],[[],["wasmmetadata",3]],[[],["wasmentryattributes",3]],[[],["span",3]],[[],["level",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["level",3]],["ordering",4]],[[],["span",3]],null,null,[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["wasmentryattributes",3]]],[[]],[[]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entered",3]],null,[[],["enteredspan",3]],[[["span",3]],["bool",15]],[[["level",3]],["bool",15]],[[["levelfilter",3]],["bool",15]],null,null,null,null,[[],[["field",3],["option",4,["field"]]]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],["span",3]],[[]],[[["level",3]],["wasmlevel",4]],[[["bool",15]],["wasmvalue",4]],[[["u64",15]],["wasmvalue",4]],[[["u8",15]],["wasmvalue",4]],[[["i8",15]],["wasmvalue",4]],[[["str",15]],["wasmvalue",4]],[[["u32",15]],["wasmvalue",4]],[[["i64",15]],["wasmvalue",4]],[[],["wasmvalue",4]],[[["i8",15]],["wasmvalue",4]],[[["u32",15]],["wasmvalue",4]],[[["i32",15]],["wasmvalue",4]],[[["arguments",3]],["wasmvalue",4]],[[["i32",15]],["wasmvalue",4]],[[]],[[["vec",3,["u8"]],["u8",15]]],[[["str",15]]],[[]],[[["vec",3,["wasmfieldname"]],["wasmfieldname",3]],["wasmfields",3]],[[["vec",3,["str"]],["str",15]],["wasmfields",3]],[[["fieldset",3]],["wasmfields",3]],[[]],[[["vec",3]]],[[["vec",3]]],[[]],[[["vec",3]]],[[]],[[["metadata",3]],["wasmmetadata",3]],[[["event",3]],["wasmentryattributes",3]],[[["attributes",3]],["wasmentryattributes",3]],[[]],[[["wasmentryattributes",3]],["span",3]],[[]],[[]],[[["str",15]],[["parselevelerror",3],["level",3],["result",4,["level","parselevelerror"]]]],[[["levelfilter",3]],["bool",15]],[[["level",3]],["bool",15]],[[["levelfilter",3]],["bool",15]],[[["level",3]],["bool",15]],[[],["bool",15]],[[]],[[],[["id",3],["option",4,["id"]]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["id",3],["option",4,["id"]]]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],[["wasmfieldname",3],["iter",3,["wasmfieldname"]]]],[[["levelfilter",3]],["bool",15]],[[["level",3]],["bool",15]],null,null,[[["level",3]],["bool",15]],[[["levelfilter",3]],["bool",15]],[[],[["metadata",3],["option",4,["metadata"]]]],null,null,null,[[["level",3]],["bool",15]],[[["metadata",3],["valueset",3]],["span",3]],[[["metadata",3]],["span",3]],[[["metadata",3],["valueset",3]],["span",3]],[[],["span",3]],null,[[["level",3]],[["option",4,["ordering"]],["ordering",4]]],[[["levelfilter",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["span",3]],[[["valueset",3]],["span",3]],[[["field",3],["bool",15]]],[[["field",3],["debug",8]]],[[["field",3],["i64",15]]],[[["field",3],["str",15]]],[[["u64",15],["field",3]]],null,null,null,[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["fnonce",8]]],[[["fnonce",8]]],[[["fnonce",8]]],null,null,[[],["option",4]],null,null,[[]],[[]],[[]],[[["metadata",3],["valueset",3]]],[[["metadata",3],["valueset",3]]],[[],["iter",3]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["metadata",3]],[[["metadata",3],["valueset",3]],["event",3]],[[["metadata",3],["valueset",3]],["event",3]],[[],[["metadata",3],["option",4,["metadata"]]]],[[],[["id",3],["option",4,["id"]]]],[[["visit",8]]],[[["visit",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],[["id",3],["option",4,["id"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["metadata",3],["valueset",3],["id",3]],["attributes",3]],[[],["id",3]],[[]],[[["field",3]],["bool",15]],[[["field",3]],["bool",15]],[[],["span",3]],[[]],[[]],[[["id",3]],["bool",15]],[[],["span",3]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[["nonzerou64",3]],["id",3]],[[["u64",15]],["id",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonzerou64",3]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["metadata",3]],[[["id",3]],["bool",15]],[[["metadata",3],["valueset",3]],["attributes",3]],[[["valueset",3]],["record",3]],[[["metadata",3],["valueset",3]],["attributes",3]],[[],[["id",3],["option",4,["id"]]]],[[["visit",8]]],[[["visit",8]]],[[["visit",8]]],[[["visit",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["valueset",3]]],"p":[[4,"WasmValue"],[4,"WasmLevel"],[3,"Level"],[3,"WasmFieldName"],[3,"WasmFields"],[3,"WasmValuesSet"],[3,"WasmMetadata"],[3,"WasmEntryAttributes"],[3,"Span"],[3,"Event"],[8,"AsId"],[3,"Id"],[3,"Attributes"],[3,"Record"],[3,"Entered"],[3,"EnteredSpan"]]},\
"sp_trie":{"doc":"Utility functions to interact with Substrate’s Base-16 …","t":[18,8,13,6,16,3,4,6,13,13,13,7,4,13,13,13,13,13,6,16,6,8,13,13,13,13,16,16,8,3,3,3,6,6,3,6,8,3,13,13,3,8,8,6,3,6,6,13,6,8,8,3,18,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,10,11,11,5,11,5,11,11,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,10,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,5,5,5,5,5,11,11,5,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6],"n":["ALLOW_EMPTY","AsHashDB","BadFormat","CError","Codec","CompactProof","CompactProofError","DBValue","Decode","DecodeError","DuplicateKey","EMPTY_PREFIX","Error","ExtraneousChildNode","ExtraneousChildProof","ExtraneousHashReference","ExtraneousNode","ExtraneousValue","GenericMemoryDB","Hash","HashDB","HashDBT","IncompleteProof","IncompleteProof","InvalidChildReference","InvalidChildRoot","Item","Key","KeyFunction","KeySpacedDB","KeySpacedDBMut","Layout","Lookup","MemoryDB","NodeCodec","PrefixedMemoryDB","Query","Recorder","RootMismatch","RootMismatch","StorageProof","Trie","TrieConfiguration","TrieDB","TrieDBIterator","TrieDBMut","TrieError","TrieError","TrieHash","TrieLayout","TrieMut","TrieStream","USE_EXTENSION","ValueMismatch","VerifyError","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","append_empty_data","append_extension","append_leaf","append_substream","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_hash_db","as_hash_db","as_hash_db_mut","as_hash_db_mut","as_raw","begin_branch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch_node","branch_node_nibbled","child_delta_trie_root","child_trie_root","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","contains","contains","contains","contains","contains","decode","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_compact","decode_plan","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","delta_trie_root","description","description","drain","emplace","emplace","empty","empty_child_trie_root","empty_node","empty_trie_root","encode","encode","encode_compact","encode_index","encode_index","encode_to","encode_to","encoded_compact_size","encoded_nodes","eq","eq","eq","eq","extension_node","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","generate_trie_proof","get","get","get","get","get","get","get","get_with","hashed_null_node","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_compact_proof","into_iter","into_memory_db","into_nodes","is_empty","is_empty","is_empty","is_empty_node","iter","iter_compact_encoded_nodes","iter_nodes","key","leaf_node","merge","ne","ne","ne","ne","new","new","new","new","new","new","new_prefixed","new_prefixed_then_seek","next","nibble_ops","ordered_trie_root","out","prefixed_key","read_child_trie_value","read_child_trie_value_with","read_trie_value","read_trie_value_with","record","record","record_all_keys","remove","remove","remove","root","root","seek","source","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","to_storage_proof","to_string","to_string","to_string","trie_build","trie_root","trie_root","trie_root_unhashed","trie_root_unhashed","trie_types","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unchecked_into","using_encoded","using_encoded","verify_trie_proof","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_depth","BIT_PER_NIBBLE","CONTENT_HEADER_SIZE","NIBBLE_LENGTH","NIBBLE_PER_BYTE","PADDING_BITMASK","SPLIT_SHIFTS","at","at_left","biggest_depth","left_common","left_nibble_at","number_padding","pad_left","pad_right","push_at_left","shift_key","Layout","Lookup","TrieDB","TrieDBMut","TrieError"],"q":["sp_triesp_trie::nibble_ops","","","","","","","","","","","","","","","","sp_trie::trie_types","","","",""],"d":["If true, the trie will allow empty values into <code>TrieDBMut</code>","Reexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …","Bad format.","Various re-exports from the <code>trie-db</code> crate.","Codec to use (needs to match hasher and nibble ops).","Storage proof in compact form.","Error for trie node decoding.","Various re-exports from the <code>trie-db</code> crate.","Decoding error.","One of the proof nodes could not be decoded.","The statement being verified contains multiple key-value …","Various re-exports from the <code>hash-db</code> crate.","Error for trie node decoding.","Compact node is not needed.","Child content with root not in proof.","The proof contains at least one extraneous hash reference …","The proof contains at least one extraneous node.","The proof contains at least one extraneous value which …","Reexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …","Hasher to use for this trie.","Reexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …","Various re-exports from the <code>hash-db</code> crate.","Missing nodes in proof.","The proof is missing trie nodes required to verify.","The proof contains an invalid child reference that …","Bad child trie root.","Output item.","","Various re-exports from the <code>memory-db</code> crate.","<code>HashDB</code> implementation that append a encoded prefix …","<code>HashDBMut</code> implementation that append a encoded prefix …","substrate trie layout","Querying interface, as in <code>trie_db</code> but less generic.","Reexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …","Concrete implementation of a <code>NodeCodec</code> with Parity Codec …","Reexport from <code>hash_db</code>, with genericity set for <code>Hasher</code> …","Various re-exports from the <code>trie-db</code> crate.","Various re-exports from the <code>trie-db</code> crate.","Verification failed due to root mismatch.","The root hash computed from the proof is incorrect.","A proof that some set of key-value pairs are included in …","Various re-exports from the <code>trie-db</code> crate.","Various re-exports from the <code>trie-db</code> crate.","Persistent trie database read-access interface for the a …","Various re-exports from the <code>trie-db</code> crate.","Persistent trie database write-access interface for the a …","TrieDB error over <code>TrieConfiguration</code> trait.","Errors from trie crate.","Hash type for a trie layout.","Various re-exports from the <code>trie-db</code> crate.","Various re-exports from the <code>trie-db</code> crate.","Codec-flavored TrieStream.","If true, the trie will use extension nodes and no partial …","The proof indicates that an expected value was not found …","Errors that may occur during proof verification. Most of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determine a child trie root given a hash DB and delta …","Determine a child trie root given its ordered contents, …","","","","","","","","","","","Check for the existance of a hash-key.","","","","","Does the trie contain a given key?","Does the trie contain a given key?","Decode a byte-slice into the desired item.","","","","","","","Decode a compact proof.","","","","","","","","Determine a trie root given a hash DB and delta values.","","","Drain all visited records.","Like <code>insert()</code>, except you provide the key and the data is …","","Returns a new empty proof.","Determine the empty child trie root.","","Determine the empty trie root.","","","Encode a compact proof.","","Encoding of index as a key (when reusing general trie for …","","","Returns the estimated encoded size of the compact proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","Create a proof for a subset of keys in a trie.","Look up a given hash into the bytes that hash to it, …","What is the value of the given key in this trie?","","","","","What is the value of the given key in this trie?","Search for the key with the given query parameter. See …","","Insert a datum item into the DB and return the datum’s …","Insert a <code>key</code>/<code>value</code> pair into the trie. An empty value is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode as a compact proof with default trie layout.","","Creates a <code>MemoryDB</code> from <code>Self</code>.","Convert into plain node vector.","Is the trie empty?","Returns whether this is an empty proof.","Is the trie empty?","","Returns a depth-first iterator over the elements of trie.","Return an iterator on the compact encoded nodes.","Create an iterator over trie nodes constructed from the …","","","Merges multiple storage proofs covering potentially …","","","","","instantiate new keyspaced db","instantiate new keyspaced db","Constructs a storage proof from a subset of encoded trie …","","Create a new iterator.","Create a new <code>Recorder</code> which records all given nodes.","Create a new iterator, but limited to a given prefix.","Create a new iterator, but limited to a given prefix. It …","","Various re-exports from the <code>trie-db</code> crate.","A trie root formed from the items, with keys attached …","","Derive a database key from hash value of the node (key) …","Read a value from the child trie.","Read a value from the child trie with given query.","Read a value from the trie.","Read a value from the trie with given Query.","Record that a node has been passed through.","Record a visited node, given its hash, data, and depth.","Record all keys for a given root.","Remove a datum previously inserted. Insertions can be “…","Remove a <code>key</code> from the trie. Equivalent to making it equal …","","Return the root of the trie.","Return the root of the trie.","Position the iterator on the first element with key >= <code>key</code>","","","","","","","","","Decode to a full storage_proof.","","","","Operation to build a trie db from its ordered iterator …","","Determines a trie root given its ordered contents, closed …","","Determines a trie root node’s data given its ordered …","This module is for non generic definition of trie type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a set of key-value pairs against a trie root and a …","","","","","","","","","","","","","Create a <code>Recorder</code> which only records nodes beyond a given …","Single nibble length in bit.","Size of header.","Number of child for a branch (trie radix).","Number of nibble per byte.","Nibble (half a byte).","The nibble shifts needed to align. We use two value, one …","Get u8 nibble value at a given index in a <code>NibbleSlice</code>.","Get u8 nibble value at a given index of a byte.","Count the biggest common depth between two left aligned …","Calculate the number of common nibble between two left …","Get u8 nibble value at a given index in a left aligned …","Calculate the number of needed padding a array of nibble …","Mask a byte, keeping left nibble.","Mask a byte, keeping right byte.","Push u8 nibble value at a given index into an existing …","Shifts right aligned key to add a given left offset. …","","Querying interface, as in <code>trie_db</code> but less generic.","Persistent trie database read-access interface for the a …","Persistent trie database write-access interface for the a …","As in <code>trie_db</code>, but less generic, error type for the crate."],"i":[1,0,2,0,1,0,0,0,2,3,3,0,0,4,4,3,3,3,0,1,0,0,4,3,3,4,5,6,0,0,0,0,0,0,0,0,0,0,4,3,0,0,0,0,0,0,0,4,0,0,0,0,1,3,0,2,7,8,9,10,10,10,10,10,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,12,16,12,16,10,10,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,7,7,0,0,2,7,8,9,10,2,7,8,9,10,16,11,12,16,16,17,18,5,8,9,8,9,8,9,0,7,8,9,7,10,13,15,0,4,2,15,16,12,8,0,7,0,8,9,0,13,19,8,9,8,9,2,8,9,3,7,4,4,2,2,8,9,3,3,15,4,4,20,11,12,2,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,0,16,18,11,12,16,16,17,17,7,16,18,12,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,3,15,4,11,12,2,7,8,9,10,13,14,3,15,8,14,8,8,18,8,17,7,17,9,8,6,7,8,2,8,9,3,11,12,8,10,14,15,14,14,14,0,19,10,0,0,0,0,0,5,15,0,16,18,12,17,18,14,3,8,9,2,7,8,9,10,9,4,2,3,19,13,19,13,19,0,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,4,11,12,2,7,8,9,10,13,14,3,15,8,9,0,4,11,12,2,7,8,9,10,13,14,3,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[["private",3]]],[[]],[[]],[[]],[[]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["hashdb",8]],[[],["hashdb",8]],[[],["hashdb",8]],[[],["hashdb",8]],[[]],[[["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4]],[["vec",3,["u8"]],["u8",15]]],[[["usize",15],["option",4]],[["vec",3,["u8"]],["u8",15]]],[[],[["result",4,["box"]],["box",3,["trieerror"]]]],[[]],[[],["error",4]],[[],["nodecodec",3]],[[],["storageproof",3]],[[],["compactproof",3]],[[],["triestream",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["prefix",6]],["bool",15]],[[["prefix",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4,["bool","box"]],["box",3,["trieerror","global"]],["bool",15]]],[[],[["result",4,["bool","box"]],["box",3,["trieerror","global"]],["bool",15]]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["option",4,["triehash"]],["triehash",6]],[["triehash",6],["error",4],["result",4,["triehash","error"]]]],[[],[["nodeplan",4],["result",4,["nodeplan"]]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[["u32",15]],[["result",4,["error"]],["error",3]]],[[],["nodecodec",3]],[[],["triestream",3]],[[],["layout",3]],[[],["recorder",3]],[[["triehash",6],["trieconfiguration",8]],[["box",3,["trieerror"]],["result",4,["triehash","box"]],["triehash",6]]],[[],["str",15]],[[],["str",15]],[[],[["vec",3,["record","global"]],["record",3],["global",3]]],[[]],[[["prefix",6]]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["storageproof",3],["triehash",6]],[["result",4,["compactproof","error"]],["compactproof",3],["error",4]]],[[["u32",15]],[["vec",3,["u8"]],["u8",15]]],[[["u32",15]],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[],[["usize",15],["option",4,["usize"]]]],null,[[["error",4]],["bool",15]],[[["storageproof",3]],["bool",15]],[[["compactproof",3]],["bool",15]],[[["error",4]],["bool",15]],[[["usize",15],["childreference",4]],[["vec",3,["u8"]],["u8",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["box",3,["trieerror"]],["trieerror",6]]],[[]],[[["storageproof",3]]],[[]],[[]],[[]],[[["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["triehash",6],["trieconfiguration",8]],[["result",4,["vec","box"]],["vec",3,["vec"]],["box",3,["trieerror"]]]],[[],["option",4]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[["prefix",6]],["option",4]],[[["prefix",6]],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[],[["box",3,["trieerror","global"]],["option",4],["result",4,["option","box"]]]],[[]],[[]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[["prefix",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],[["compactproof",3],["result",4,["compactproof","compactprooferror"]],["compactprooferror",4,["layout"]]]],[[]],[[],[["memorydb",6],["hasher",8]]],[[],[["vec",3,["u8"]],["vec",3,["vec"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["box",3,["trieiterator","global"]],["box",3,["trieerror","global"]],["result",4,["box","box"]]]],[[]],[[],["storageproofnodeiterator",3]],[[]],[[["partial",6]],[["vec",3,["u8"]],["u8",15]]],[[]],[[["error",4]],["bool",15]],[[["storageproof",3]],["bool",15]],[[["compactproof",3]],["bool",15]],[[["error",4]],["bool",15]],[[]],[[]],[[["vec",3,["u8"]],["vec",3,["vec"]]]],[[]],[[["triedb",3]],[["result",4,["triedbiterator","box"]],["triedbiterator",3],["box",3,["trieerror","global"]]]],[[],["recorder",3]],[[["triedb",3]],[["result",4,["triedbiterator","box"]],["triedbiterator",3],["box",3,["trieerror","global"]]]],[[["triedb",3]],[["result",4,["triedbiterator","box"]],["triedbiterator",3],["box",3,["trieerror","global"]]]],[[],["option",4]],null,[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["option",4,["vec"]],["box",3,["trieerror"]],["result",4,["option","box"]]]],[[["query",8]],[["option",4,["vec"]],["box",3,["trieerror"]],["result",4,["option","box"]]]],[[["triehash",6]],[["option",4,["vec"]],["box",3,["trieerror"]],["result",4,["option","box"]]]],[[["triehash",6],["query",8]],[["option",4,["vec"]],["box",3,["trieerror"]],["result",4,["option","box"]]]],[[["u32",15]]],[[["u32",15]]],[[["triehash",6],["recorder",3]],[["box",3,["trieerror"]],["result",4,["box"]]]],[[]],[[],[["result",4,["option","box"]],["option",4,["vec"]],["box",3,["trieerror","global"]]]],[[["prefix",6]]],[[]],[[]],[[],[["result",4,["box"]],["box",3,["trieerror","global"]]]],[[],[["option",4,["error"]],["error",8]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],[[]],[[]],[[]],[[]],[[]],[[["option",4]],[["result",4,["compactprooferror"]],["compactprooferror",4,["layout"]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8","global"]],["u8",15],["global",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[["triehash",6]],[["verifyerror",4,["triehash","error"]],["result",4,["verifyerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["recorder",3]],null,null,null,null,null,null,[[["usize",15],["nibbleslice",3]],["u8",15]],[[["u8",15]],["u8",15]],[[],["usize",15]],[[["u8",15]],["usize",15]],[[["usize",15]],["u8",15]],[[["usize",15]],["usize",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[["usize",15]],["bool",15]],null,null,null,null,null],"p":[[8,"TrieLayout"],[4,"Error"],[4,"VerifyError"],[4,"CompactProofError"],[8,"Query"],[8,"KeyFunction"],[3,"NodeCodec"],[3,"StorageProof"],[3,"CompactProof"],[3,"TrieStream"],[3,"KeySpacedDB"],[3,"KeySpacedDBMut"],[3,"Layout"],[3,"TrieDBIterator"],[3,"Recorder"],[8,"HashDBT"],[8,"Trie"],[8,"TrieMut"],[8,"TrieConfiguration"],[6,"MemoryDB"]]},\
"sp_utils":{"doc":"Utilities Primitives for Substrate","t":[0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["metrics","mpsc","status_sinks","TOKIO_THREADS_ALIVE","TOKIO_THREADS_TOTAL","UNBOUNDED_CHANNELS_COUNTER","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","from","from","from","initialize","initialize","initialize","into","into","into","register_globals","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","TracingUnboundedReceiver","TracingUnboundedSender","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","close_channel","disconnect","drop","fmt","fmt","from","from","into","into","is_closed","is_terminated","poll_close","poll_flush","poll_next","poll_ready","poll_ready","same_receiver","start_send","start_send","to_owned","tracing_unbounded","try_from","try_from","try_into","try_into","try_next","try_poll_next","type_id","type_id","unbounded_send","ReadySinkEvent","StatusSinks","borrow","borrow","borrow_mut","borrow_mut","default","drop","from","from","into","into","new","next","push","send","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["sp_utils","","","sp_utils::metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_utils::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sp_utils::status_sinks","","","","","","","","","","","","","","","","","","","","",""],"d":["Metering primitives and globals","Features to meter unbounded channels","","","","","","","","","","","","","","","","","","","","","","","Register the statics to report to registry","","","","","","","","","","Wrapper Type around <code>UnboundedReceiver</code> that decreases the …","Wrapper Type around <code>UnboundedSender</code> that increases the …","","","","","","","Proxy function to mpsc::UnboundedReceiver that consumes …","Proxy function to mpsc::UnboundedSender","Proxy function to mpsc::UnboundedSender","","","","","","","","Proxy function to mpsc::UnboundedSender","","","","","Proxy function to mpsc::UnboundedSender","","Proxy function to mpsc::UnboundedSender","Proxy function to mpsc::UnboundedSender","","","Wrapper around <code>mpsc::unbounded</code> that tracks the in- and …","","","","","Proxy function to mpsc::UnboundedReceiver that discounts …","","","","Proxy function to mpsc::UnboundedSender","One of the sinks is ready.","Holds a list of <code>UnboundedSender</code>s, each associated with a …","","","","","","","","","","","Builds a new empty collection.","Waits until one of the sinks is ready, then returns an …","Adds a sender to the collection.","Sends an element on the sender.","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,1,2,3,1,2,3,0,0,4,5,4,5,4,4,5,4,4,5,4,5,4,5,4,5,4,5,4,4,5,4,4,4,4,4,4,0,4,5,4,5,5,5,4,5,4,0,0,6,7,6,7,6,7,6,7,6,7,6,6,6,7,6,7,6,7,6,7],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["genericcounter",3]],[[],["genericgauge",3]],[[],["genericcountervec",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["registry",3]],[["prometheuserror",4],["result",4,["prometheuserror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["context",3],["pin",3]],[["poll",4,["result"]],["result",4]]],[[["context",3],["pin",3]],[["poll",4,["result"]],["result",4]]],[[["context",3],["pin",3]],[["poll",4,["option"]],["option",4]]],[[["context",3]],[["result",4,["senderror"]],["poll",4,["result"]]]],[[["context",3],["pin",3]],[["poll",4,["result"]],["result",4]]],[[["unboundedsender",3]],["bool",15]],[[],[["result",4,["senderror"]],["senderror",3]]],[[["pin",3]],["result",4]],[[]],[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["tryrecverror",3],["result",4,["option","tryrecverror"]],["option",4]]],[[["context",3],["pin",3]],[["option",4,["result"]],["poll",4,["option"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],[["trysenderror",3],["result",4,["trysenderror"]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["statussinks",3]],[[]],[[["tracingunboundedsender",3],["duration",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"TOKIO_THREADS_TOTAL"],[3,"TOKIO_THREADS_ALIVE"],[3,"UNBOUNDED_CHANNELS_COUNTER"],[3,"TracingUnboundedSender"],[3,"TracingUnboundedReceiver"],[3,"StatusSinks"],[3,"ReadySinkEvent"]]},\
"sp_version_proc_macro":{"doc":"A proc-macro that generates a custom wasm section from a …","t":[23],"n":["runtime_version"],"q":["sp_version_proc_macro"],"d":[""],"i":[0],"f":[null],"p":[]},\
"sp_wasm_interface":{"doc":"Types and traits for interfacing between the host and the …","t":[18,13,13,13,13,8,8,8,13,13,13,13,8,8,6,3,8,8,6,4,18,8,3,8,13,18,4,13,4,6,8,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11],"n":["ENCODED_MAX_SIZE","F32","F32","F64","F64","Function","FunctionContext","HostFunctions","I32","I32","I64","I64","IntoValue","MaybeRefUnwindSafe","MemoryId","Pointer","PointerType","ReadPrimitive","Result","ReturnValue","SIZE","Sandbox","Signature","TryFromValue","Unit","VALUE_TYPE","Value","Value","ValueType","WordSize","WritePrimitive","allocate_memory","args","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_i32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deallocate_memory","decode","decode","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","encode_to","encode_to","eq","eq","eq","eq","eq","eq","execute","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_global_val","host_functions","instance_new","instance_teardown","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_value","into_value","invoke","memory_get","memory_new","memory_set","memory_teardown","name","ne","ne","ne","ne","new","new","new_with_args","null","offset","read_memory","read_memory_into","read_primitive","read_primitive","read_primitive","return_value","sandbox","signature","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from_value","try_from_value","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value_type","write_memory","write_primitive","write_primitive","write_primitive"],"q":["sp_wasm_interfaced":["Maximum number of bytes <code>ReturnValue</code> might occupy when …","An <code>f32</code> value type.","A 32-bit floating-point number stored as raw bit pattern.","An <code>f64</code> value type.","A 64-bit floating-point number stored as raw bit pattern.","Something that provides a function implementation on the …","Context used by <code>Function</code> to interact with the allocator …","Something that provides implementations for host …","An <code>i32</code> value type.","A 32-bit integer.","An <code>i64</code> value type.","A 64-bit integer.","Something that can be converted into a wasm compatible …","A trait that requires <code>RefUnwindSafe</code> when <code>feature = std</code>.","Sandbox memory identifier.","Type to represent a pointer in wasm at the host.","Something that can be wrapped in a wasm <code>Pointer</code>.","Something that can read a primitive from a wasm memory …","Result type used by traits in this crate.","Typed value that can be returned from a function.","The size of the type in wasm.","Something that provides access to the sandbox.","The Signature of a function","Something that can may be created from a wasm <code>Value</code>.","For returning nothing.","The type of the value in wasm.","Values supported by Substrate on the boundary between …","For returning some concrete value.","Value types supported by Substrate on the boundary …","The word size used in wasm. Normally known as <code>usize</code> in …","Something that can write a primitive to wasm memory …","Allocate a memory instance of <code>size</code> bytes.","The arguments of a function.","","","","","","","","","","","Return <code>Self</code> as <code>i32</code>.","","","","","","","","","","","Cast this pointer of type <code>T</code> to a pointer of type <code>R</code>.","","","","","","","","","","","Deallocate a given memory instance.","","","","","","","","","","","","","","","","","Execute this function with the given arguments.","","","","","","","","","","","","","","","","Get the value from a global with the given <code>name</code>. The …","Returns the host functions <code>Self</code> provides.","Create a new sandbox instance.","Delete a sandbox instance.","","","","","","","","","","","","","","","","","","","","","Convert <code>self</code> into a wasm <code>Value</code>.","","Invoke an exported function by a name.","Get sandbox memory from the <code>memory_id</code> instance at <code>offset</code> …","Create a new memory instance with the given <code>initial</code> size …","Set sandbox memory from the given value.","Delete a memory instance.","Returns the name of this function.","","","","","Create a new instance of <code>Self</code>.","Create a new instance of <code>Signature</code>.","Create a new instance of <code>Signature</code> with the given <code>args</code> …","Create a null pointer.","Calculate the offset from this pointer.","Read memory from <code>address</code> into a vector.","Read memory into the given <code>dest</code> buffer from <code>address</code>.","Read a primitive from the given memory location <code>ptr</code>.","","","The optional return value of a function.","Provides access to the sandbox.","Returns the signature of this function.","","","","","","","","","","","","","","Try to convert the given <code>Value</code> into <code>Self</code>.","","","","","","","","","","","","Returns the type of this value.","Write the given data at <code>address</code> into the memory.","Write the given value <code>t</code> to the given memory location <code>ptr</code>.","",""],"i":[1,2,3,2,3,0,0,0,2,3,2,3,0,0,0,0,0,0,0,0,4,0,0,0,1,5,0,1,0,0,0,6,7,2,3,8,7,1,2,3,8,7,1,3,2,3,8,7,1,2,3,8,7,1,8,2,3,8,7,1,2,3,8,7,1,6,3,1,3,1,3,1,3,1,3,1,9,2,3,8,7,1,9,2,3,8,7,1,2,2,3,3,8,8,7,7,1,1,10,11,10,10,2,3,8,7,1,2,3,8,7,1,2,3,8,7,1,2,3,8,7,1,5,8,10,10,10,10,10,9,3,8,7,1,8,7,7,8,8,6,6,12,6,6,7,6,9,3,1,2,3,8,7,1,2,2,3,8,7,1,13,8,2,3,8,7,1,2,3,8,7,1,3,6,14,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["wordsize",6]],[["result",6,["pointer"]],["pointer",3,["u8"]]]],null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],[["option",4,["i32"]],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["pointertype",8],["pointer",3]]],[[],["valuetype",4]],[[],["value",4]],[[],["pointer",3]],[[],["signature",3]],[[],["returnvalue",4]],[[]],[[]],[[]],[[]],[[]],[[["u8",15],["pointer",3,["u8"]]],["result",6]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[["u32",15]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["bool",15]],[[["valuetype",4]],["bool",15]],[[["value",4]],["bool",15]],[[["pointer",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["returnvalue",4]],["bool",15]],[[["iterator",8],["functioncontext",8]],[["option",4,["value"]],["result",6,["option"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["valuetype",4]]],[[]],[[]],[[["runtimevalue",4]]],[[["u32",15]]],[[]],[[]],[[["signature",3]]],[[["value",4]],["returnvalue",4]],[[]],[[["str",15],["u32",15]],[["option",4,["value"]],["result",6,["option"]]]],[[],[["function",8],["vec",3,["function"]]]],[[["u32",15]],[["u32",15],["result",6,["u32"]]]],[[["u32",15]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["box",3,["global"]],["global",3]],[["box",3,["any","global"]],["any",8],["global",3]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["arc",3]],[["any",8],["arc",3,["any"]]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[["rc",3]],[["rc",3,["any"]],["any",8]]],[[],["value",4]],[[],["value",4]],[[["u8",15],["u32",15],["pointer",3,["u8"]],["str",15],["wordsize",6]],[["u32",15],["result",6,["u32"]]]],[[["u8",15],["wordsize",6],["memoryid",6],["pointer",3,["u8"]]],[["u32",15],["result",6,["u32"]]]],[[["u32",15]],[["result",6,["memoryid"]],["memoryid",6]]],[[["u8",15],["wordsize",6],["memoryid",6],["pointer",3,["u8"]]],[["u32",15],["result",6,["u32"]]]],[[["memoryid",6]],["result",6]],[[],["str",15]],[[["value",4]],["bool",15]],[[["pointer",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["returnvalue",4]],["bool",15]],[[["u32",15]]],[[["cow",4],["option",4,["valuetype"]],["valuetype",4],["into",8,["cow"]]]],[[["cow",4],["into",8,["cow"]]]],[[]],[[["u32",15]],["option",4]],[[["u8",15],["pointer",3,["u8"]],["wordsize",6]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["u8",15],["pointer",3,["u8"]]],["result",6]],[[["pointer",3]],["result",6]],[[["pointer",3,["u32"]],["u32",15]],[["u32",15],["result",6,["u32"]]]],[[["u64",15],["pointer",3,["u64"]]],[["u64",15],["result",6,["u64"]]]],null,[[],["sandbox",8]],[[],["signature",3]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[],[["global",3],["u8",15],["vec",3,["u8","global"]]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["u8",15]],[["result",4,["valuetype"]],["valuetype",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["value",4]],["option",4]],[[["value",4]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["valuetype",4]],[[["u8",15],["pointer",3,["u8"]]],["result",6]],[[["pointer",3]],["result",6]],[[["u64",15],["pointer",3,["u64"]]],["result",6]],[[["pointer",3,["u32"]],["u32",15]],["result",6]]],"p":[[4,"ReturnValue"],[4,"ValueType"],[4,"Value"],[8,"PointerType"],[8,"IntoValue"],[8,"FunctionContext"],[3,"Signature"],[3,"Pointer"],[8,"Function"],[8,"Sandbox"],[8,"HostFunctions"],[8,"ReadPrimitive"],[8,"TryFromValue"],[8,"WritePrimitive"]]},\
"substrate_build_script_utils":{"doc":"Crate with utility functions for <code>build.rs</code> scripts.","t":[5,5],"n":["generate_cargo_keys","rerun_if_git_head_changed"],"q":["substrate_build_script_utils",""],"d":["Generate the <code>cargo:</code> key output","Make sure the calling <code>build.rs</code> script is rerun when …"],"i":[0,0],"f":[[[]],[[]]],"p":[]},\
"substrate_prometheus_endpoint":{"doc":"","t":[13,3,6,3,3,6,3,3,6,3,13,13,8,13,16,3,4,3,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12],"n":["AlreadyReg","Counter","CounterVec","F64","Gauge","GaugeVec","Histogram","HistogramOpts","HistogramVec","I64","InconsistentCardinality","Io","MetricSource","Msg","N","Opts","PrometheusError","Registry","SourcedCounter","SourcedGauge","SourcedMetric","U64","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buckets","buckets","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","common_opts","compare_and_swap","const_label","const_label","const_labels","const_labels","const_labels","dec","dec_by","dec_by","dec_by","default","desc","desc","desc","desc","describe","describe","exponential_buckets","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fq_name","fq_name","from","from","from","from","from","from","from","from","from","from","from","from","from","gather","get","get","get","get","get","get_sample_count","get_sample_sum","help","inc","inc","inc_by","inc_by","inc_by","inc_by","inc_by_with_ordering","init_prometheus","into","into","into","into","into","into","into","into","into","into","into","local","local","metric","metric","metric","name","namespace","namespace","namespace","new","new","new","new","new","new","new","new","new","new_custom","observe","observe_closure_duration","register","register","reset","set","set","set","set","source","start_timer","sub","subsystem","subsystem","subsystem","swap","swap","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unregister","variable_label","variable_label","variable_labels","variable_labels","variable_labels","with_opts","with_opts","with_opts","expect","got"],"q":["substrate_prometheus_endpointsubstrate_prometheus_endpoint::PrometheusError",""],"d":["A duplicate metric collector has already been registered.","The underlying implementation for <code>Counter</code> and <code>IntCounter</code>.","The underlying implementation for <code>CounterVec</code> and …","A atomic float.","The underlying implementation for <code>Gauge</code> and <code>IntGauge</code>.","The underlying implementation for <code>GaugeVec</code> and <code>IntGaugeVec</code>…","A <code>Metric</code> counts individual observations from an event or …","A struct that bundles the options for creating a <code>Histogram</code>…","A <code>Collector</code> that bundles a set of Histograms that all …","A atomic signed integer.","The label cardinality was inconsistent.","An error containing a <code>std::io::Error</code>.","A source of values for a <code>SourcedMetric</code>.","An error message which is only a string.","The type of the collected values.","A struct that bundles the options for creating most <code>Metric</code>…","The error types for prometheus.","A struct for registering Prometheus collectors, …","A counter whose values are obtained from an existing …","A gauge whose values are obtained from an existing source.","A metric whose values are obtained from an existing …","A atomic unsigned integer.","Add the given value to the gauge. (The value can be …","","","","","","","","","","","","","","","","","","","","","","","<code>buckets</code> set the buckets.","Defines the buckets into which observations are counted. …","","","","","","","","","","","","","","","Collects the current values of the metrics from the …","","","","","A container holding various options.","Get the value with the provided memory ordering.","<code>const_label</code> adds a const label.","<code>const_label</code> adds a const label.","<code>const_labels</code> sets the const labels.","<code>const_labels</code> sets the const labels.","const_labels are used to attach fixed labels to this …","Decrease the gauge by 1.","","","","","","","","","","","Create <code>count</code> buckets, where the lowest bucket has an …","","","","","","","","","","","","","<code>fq_name</code> returns the fq_name.","<code>fq_name</code> returns the fq_name.","","","","","","","","","","","","","","<code>gather</code> calls the Collect method of the registered …","","","","Return the counter value.","Return the gauge value.","Return count of all samples.","Return accumulated sum of all samples.","help provides information about this metric. Mandatory!","Increase the counter by 1.","Increase the gauge by 1.","","","","Increase the given value to the counter.","Increment the value by a given amount with the provided …","Initializes the metrics context, and starts an HTTP server…","","","","","","","","","","","","Return a <code>GenericLocalCounter</code> for single thread usage.","Return a <code>LocalHistogram</code> for single thread usage.","","","","namespace, subsystem, and name are components of the …","<code>namespace</code> sets the namespace.","<code>namespace</code> sets the namespace.","namespace, subsystem, and name are components of the …","Creates a new metric that obtains its values from the …","","","","Create a <code>GenericCounter</code> with the <code>name</code> and <code>help</code> arguments.","Create a <code>GenericGauge</code> with the <code>name</code> and <code>help</code> arguments.","Create a <code>HistogramOpts</code> with the <code>name</code> and <code>help</code> arguments.","<code>new</code> creates the Opts with the <code>name</code> and <code>help</code> arguments.","<code>new</code> creates a Registry.","Create a new registry, with optional custom prefix and …","Add a single observation to the <code>Histogram</code>.","Observe execution time of a closure, in second.","","<code>register</code> registers a new <code>Collector</code> to be included in …","Restart the counter, resetting its value back to 0.","","","","Set the gauge to an arbitrary value.","","Return a <code>HistogramTimer</code> to track a duration.","Subtract the given value from the gauge. (The value can be…","<code>subsystem</code> sets the sub system.","<code>subsystem</code> sets the sub system.","namespace, subsystem, and name are components of the …","Store the value, returning the previous value.","Stores a value into the atomic integer, returning the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>unregister</code> unregisters the <code>Collector</code> that equals the …","<code>variable_label</code> adds a variable label.","<code>variable_label</code> adds a variable label.","<code>variable_labels</code> sets the variable labels.","<code>variable_labels</code> sets the variable labels.","variable_labels contains names of labels for which the …","Create a <code>GenericCounter</code> with the <code>opts</code> options.","Create a <code>GenericGauge</code> with the <code>opts</code> options.","<code>with_opts</code> creates a <code>Histogram</code> with the <code>opts</code> options.","The expected number of labels.","The actual number of labels."],"i":[1,0,0,0,0,0,0,0,0,0,1,1,0,1,2,0,0,0,0,0,0,0,3,4,5,6,7,8,1,3,9,10,11,12,4,5,6,7,8,1,3,9,10,11,12,9,9,4,8,3,9,10,11,12,4,8,3,9,10,11,12,2,4,8,3,10,9,7,9,11,9,11,11,3,5,6,7,12,4,8,3,10,9,11,0,4,5,6,7,8,1,1,3,9,10,11,12,9,11,4,5,6,7,8,1,1,3,9,9,10,11,12,12,5,6,7,8,3,10,10,11,8,3,5,6,7,8,7,0,4,5,6,7,8,1,3,9,10,11,12,8,10,8,3,10,11,9,11,11,4,5,6,7,8,3,9,11,12,12,10,10,0,12,8,5,6,7,3,1,10,3,9,11,11,5,7,4,8,3,9,10,11,12,1,4,5,6,7,8,1,3,9,10,11,12,4,5,6,7,8,1,3,9,10,11,12,4,5,6,7,8,1,3,9,10,11,12,12,9,11,9,11,11,8,3,10,13,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["f64","global"]],["global",3],["f64",15]],["histogramopts",3]],null,[[],["sourcedmetric",3]],[[],["genericcounter",3]],[[],["genericgauge",3]],[[],["histogramopts",3]],[[],["histogram",3]],[[],["opts",3]],[[],["registry",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["metricfamily"]],["metricfamily",3]]],[[],[["vec",3,["metricfamily","global"]],["global",3],["metricfamily",3]]],[[],[["vec",3,["metricfamily","global"]],["global",3],["metricfamily",3]]],[[],[["vec",3,["metricfamily","global"]],["global",3],["metricfamily",3]]],null,[[["u64",15],["ordering",4]],["u64",15]],[[],["histogramopts",3]],[[],["opts",3]],[[["hashmap",3,["string","string","randomstate"]],["string",3],["randomstate",3]],["histogramopts",3]],[[["hashmap",3,["string","string","randomstate"]],["string",3],["randomstate",3]],["opts",3]],null,[[]],[[]],[[]],[[]],[[],["registry",3]],[[],[["vec",3,["desc"]],["desc",3]]],[[],[["vec",3,["desc","global"]],["global",3],["desc",3]]],[[],[["vec",3,["desc","global"]],["global",3],["desc",3]]],[[],[["vec",3,["desc","global"]],["global",3],["desc",3]]],[[],[["error",4],["result",4,["desc","error"]],["desc",3]]],[[],[["error",4],["result",4,["desc","error"]],["desc",3]]],[[["usize",15],["f64",15]],[["vec",3,["f64","global"]],["error",4],["result",4,["vec","error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["error",4]],[[]],[[]],[[]],[[["opts",3]],["histogramopts",3]],[[]],[[]],[[]],[[],[["vec",3,["metricfamily","global"]],["global",3],["metricfamily",3]]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["f64",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15],["ordering",4]]],[[["socketaddr",4],["registry",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["genericlocalcounter",3]],[[],["localhistogram",3]],[[],["metric",3]],[[],["metric",3]],[[],["metric",3]],null,[[],["histogramopts",3]],[[],["opts",3]],null,[[["opts",3]],["result",6]],[[],["atomicf64",3]],[[],["atomici64",3]],[[],["atomicu64",3]],[[],[["error",4],["result",4,["genericcounter","error"]],["genericcounter",3]]],[[],[["genericgauge",3],["result",4,["genericgauge","error"]],["error",4]]],[[],["histogramopts",3]],[[],["opts",3]],[[],["registry",3]],[[["string",3],["option",4,["hashmap"]],["option",4,["string"]],["hashmap",3,["string","string","randomstate"]]],[["result",4,["registry","error"]],["error",4],["registry",3]]],[[["f64",15]]],[[]],[[["clone",8],["registry",3],["collector",8]],[["result",4,["prometheuserror"]],["clone",8],["prometheuserror",4],["collector",8]]],[[["collector",8],["box",3,["collector","global"]],["global",3]],[["result",4,["error"]],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[],["histogramtimer",3]],[[]],[[],["histogramopts",3]],[[],["opts",3]],null,[[["ordering",4],["f64",15]],["f64",15]],[[["u64",15],["ordering",4]],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["collector",8],["box",3,["collector","global"]],["global",3]],[["result",4,["error"]],["error",4]]],[[],["histogramopts",3]],[[],["opts",3]],[[["string",3],["global",3],["vec",3,["string","global"]]],["histogramopts",3]],[[["string",3],["global",3],["vec",3,["string","global"]]],["opts",3]],null,[[["opts",3]],[["error",4],["result",4,["genericcounter","error"]],["genericcounter",3]]],[[["opts",3]],[["genericgauge",3],["result",4,["genericgauge","error"]],["error",4]]],[[["histogramopts",3]],[["histogram",3],["result",4,["histogram","error"]],["error",4]]],null,null],"p":[[4,"PrometheusError"],[8,"MetricSource"],[3,"Gauge"],[3,"SourcedMetric"],[3,"F64"],[3,"I64"],[3,"U64"],[3,"Counter"],[3,"HistogramOpts"],[3,"Histogram"],[3,"Opts"],[3,"Registry"],[13,"InconsistentCardinality"]]},\
"substrate_test_utils":{"doc":"Test utils","t":[14,23],"n":["assert_eq_uvec","test"],"q":["substrate_test_utils",""],"d":["Panic when the vectors are different, without taking the …","Marks async function to be executed by an async runtime …"],"i":[0,0],"f":[null,null],"p":[]},\
"substrate_test_utils_derive":{"doc":"","t":[23],"n":["test"],"q":["substrate_test_utils_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"substrate_test_utils_test_crate":{"doc":"","t":[5],"n":["main"],"q":["substrate_test_utils_test_crate"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"substrate_wasm_builder":{"doc":"Wasm builder is a utility for building a project as a …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["WasmBuilder","WasmBuilderSelectProject","append_to_rust_flags","borrow","borrow","borrow_mut","borrow_mut","build","enable_feature","export_heap_base","from","from","import_memory","into","into","new","set_file_name","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_current_project","with_project"],"q":["substrate_wasm_builder","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The builder for building a wasm binary.","First step of the <code>WasmBuilder</code> to select the project to …","Append the given <code>flag</code> to <code>RUST_FLAGS</code>.","","","","","Build the WASM binary.","Enable the given feature when building the wasm binary.","Enable exporting <code>__heap_base</code> as global variable in the …","","","Instruct the linker to import the memory into the WASM …","","","Create a new instance of the builder.","Set the name of the file that will be generated in <code>OUT_DIR</code>…","","","","","","","","","Use the current project as project for building the WASM …","Use the given <code>path</code> as project for building the WASM …"],"i":[0,0,1,2,1,2,1,1,1,1,2,1,1,2,1,1,1,2,1,2,1,2,1,2,1,2,2],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["wasmbuilderselectproject",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["wasmbuilder",3]],[[],[["str",15],["result",4,["wasmbuilder","str"]],["wasmbuilder",3]]]],"p":[[3,"WasmBuilder"],[3,"WasmBuilderSelectProject"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};