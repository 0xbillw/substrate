// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}
//!
//! DATABASE: `{{db_name}}`, RUNTIME: `{{runtime_name}}`
//! SKIP-WRITE: `{{params.skip_write}}`, SKIP-READ: `{{params.skip_read}}`, WARMUPS: `{{params.warmups}}`
//! STATE-VERSION: `V{{params.state_version}}`, STATE-CACHE-SIZE: `{{params.state_cache_size}}`
//! WEIGHT-PATH: `{{params.weight_path}}`
//! METRIC: `{{params.weight_metric}}`, WEIGHT-MUL: `{{params.weight_mul}}`, WEIGHT-ADD: `{{params.weight_add}}`

// Executed Command:
{{#each args as |arg|}}
//   {{arg}}
{{/each}}

pub mod constants {
	use frame_support::{
		parameter_types,
		weights::{Weight, constants, RuntimeDbWeight},
	};

	parameter_types! {
		/// Importing a block with 0 txs.
		pub const BlockExecutionWeight: Weight = {{underscore block}} * constants::WEIGHT_PER_NANOS;
		/// Executing a System remarks (no-op) txs.
		pub const ExtrinsicBaseWeight: Weight = {{underscore extrinsic}} * constants::WEIGHT_PER_NANOS;
	}

	#[cfg(test)]
	mod test_base_weights {
		use frame_support::weights::constants;

		/// Checks that the block weight exist and is sane.
		// NOTE: If this test fails but you are sure that the generated values are fine,
		// you can delete it.
		#[test]
		fn sane_block() {
			use super::constants::BlockExecutionWeight as W;

			// At least 100 µs.
			assert!(
				W::get() >= 100 * constants::WEIGHT_PER_MICROS,
				"Weight should be at least 100 µs."
			);
			// At most 50 ms.
			assert!(
				W::get() <= 10 * constants::WEIGHT_PER_MILLIS,
				"Weight should be at most 10 ms."
			);
		}

		/// Checks that the extrinsic weight exist and is sane.
		// NOTE: If this test fails but you are sure that the generated values are fine,
		// you can delete it.
		#[test]
		fn sane_extrinsic() {
			use super::constants::ExtrinsicBaseWeight as W;

			// At least 10 µs.
			assert!(
				W::get() >= 10 * constants::WEIGHT_PER_MICROS,
				"Weight should be at least 100 µs."
			);
			// At most 1 ms.
			assert!(
				W::get() <= constants::WEIGHT_PER_MILLIS,
				"Weight should be at most 10 ms."
			);
		}
	}
}
